/*
 * isis_hstxs_v2_types.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated ICD version: 2.0
 * Generated from:
 *  - isis_hstxs_icd_v2.yaml
 *  - isis_hstxs_sup_icd_v2.yaml
 */

#ifndef ISIS_HSTXS_V2_TYPES_H_
#define ISIS_HSTXS_V2_TYPES_H_

#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C"
{
#endif

/* DEFINES */

#define ISIS_HSTXS_V2_SET_STANDBY_MODE_ID {0xA0}
#define ISIS_HSTXS_V2_SET_TX_FREQUENCY_ID {0xA0}
#define ISIS_HSTXS_V2_SET_SYMBOLRATE_ID {0xA4}
#define ISIS_HSTXS_V2_SET_MODULATION_SCHEME_ID {0xA5}
#define ISIS_HSTXS_V2_SET_FRAME_ASM_VALUE_ID {0xA7}
#define ISIS_HSTXS_V2_SET_PCL_SETPOINT_ID {0xA8}
#define ISIS_HSTXS_V2_RESET_ID {0xAA}
#define ISIS_HSTXS_V2_SET_DIRECT_CARRIER_STATE_ID {0xAB}
#define ISIS_HSTXS_V2_GET_TELEMETRY_ID {0xB0}
#define ISIS_HSTXS_V2_SET_TX_MODE_ID {0xB0}
#define ISIS_HSTXS_V2_GET_SUP_UPTIME_ID {0xB1}
#define ISIS_HSTXS_V2_SET_LOCK_TIME_ID {0xB1}
#define ISIS_HSTXS_V2_GET_MSS_PWRTIME_ID {0xB2}
#define ISIS_HSTXS_V2_GET_SUP_STATUS_ID {0xB4}
#define ISIS_HSTXS_V2_GET_WDT_KICK_COUNTER_ID {0xB5}
#define ISIS_HSTXS_V2_SET_LUT_CHOICE_ID {0xB5}
#define ISIS_HSTXS_V2_GET_SUP_VERSION_ID {0xB6}
#define ISIS_HSTXS_V2_SET_PUNCTURING_LEVEL_ID {0xB6}
#define ISIS_HSTXS_V2_SET_REED_SOLOMON_INTERLEAVE_LEVEL_ID {0xB7}
#define ISIS_HSTXS_V2_SET_IDLE_FRAME_ONLY_MODE_ID {0xB8}
#define ISIS_HSTXS_V2_CLEAR_I2CSWDT_ID {0xC0}
#define ISIS_HSTXS_V2_SET_FRAME_SCID_ID {0xC0}
#define ISIS_HSTXS_V2_GET_MASTER_CHANNEL_COUNTER_ID {0xC1}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_ID {0xC2}
#define ISIS_HSTXS_V2_GET_SPI_FIFO_ERROR_COUNTER_ID {0xC3}
#define ISIS_HSTXS_V2_GET_ASM_VALUE_ID {0xC7}
#define ISIS_HSTXS_V2_GET_READSTATUS2_ID {0xC8}
#define ISIS_HSTXS_V2_WRITE_AND_SEND_FRAME_ID {0xD0}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_0_ID {0xD3}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_1_ID {0xD4}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_2_ID {0xD5}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_3_ID {0xD5}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_4_ID {0xD7}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_5_ID {0xD8}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_6_ID {0xD9}
#define ISIS_HSTXS_V2_GET_VIRTUAL_CHANNEL_COUNTER_7_ID {0xDA}
#define ISIS_HSTXS_V2_GET_FABRIC_VERSION_ID {0xDB}
#define ISIS_HSTXS_V2_SET_FECF_ID {0xDC}
#define ISIS_HSTXS_V2_GET_READSTATUS3_ID {0xDF}
#define ISIS_HSTXS_V2_GET_TX_FREQUENCY_ID {0xE0}
#define ISIS_HSTXS_V2_GET_GENERAL_STATUS_ID {0xE1}
#define ISIS_HSTXS_V2_GET_UPTIME_ID {0xE2}
#define ISIS_HSTXS_V2_GET_ERROR_COUNTERS_ID {0xE3}
#define ISIS_HSTXS_V2_GET_MODULATOR_CT_CAL_REGISTER_ID {0xE4}
#define ISIS_HSTXS_V2_GET_MSS_VERSION_ID {0xE6}
#define ISIS_HSTXS_V2_STORE_DEFAULT_SETTINGS_IN_ENVM_ID {0xF0}
#define ISIS_HSTXS_V2_GET_STATUS_OF_LAST_SET_DEFAULT_SETTINGS_COMMAND_ID {0xF1}
#define ISIS_HSTXS_V2_READ_DEFAULT_SETTINGS_FROM_ENVM_ID {0xF2}
#define ISIS_HSTXS_V2_STORE_DEFAULT_BACKUP_SETTINGS_IN_ENVM_ID {0xF3}
#define ISIS_HSTXS_V2_GET_STATUS_OF_LAST_SET_DEFAULT_BACKUP_SETTINGS_COMMAND_ID {0xF4}
#define ISIS_HSTXS_V2_READ_DEFAULT_BACKUP_SETTINGS_FROM_ENVM_ID {0xF5}

#define ISIS_HSTXS_V2_WRITE_AND_SEND_FRAME_MAX_DATA_LENGTH 217

/* ENUMS */

/*!
 * Command status code
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs_v2__command_status_code_t
{
    isis_hstxs_v2__command_status_code__result_ok = 0u, /*!< Command executed successfuly */
    isis_hstxs_v2__command_status_code__result_busy = 1u, /*!< Command is in process; result is not acceptable yet */
    isis_hstxs_v2__command_status_code__result_invalid_value = 2u, /*!< Input value is incorrect */
    isis_hstxs_v2__command_status_code__result_invalid_def_mem = 3u, /*!< Invalid default settings section (reserved) */
    isis_hstxs_v2__command_status_code__result_invalid_def_backup_mem = 4u, /*!< Invalid default backup setting section (reserved */
    isis_hstxs_v2__command_status_code__result_invalid_crc = 5u, /*!< Invalid CRC16 if used command “Store configuration” */
    isis_hstxs_v2__command_status_code__result_invalid_command_size = 6u, /*!< Invalid command size */
    isis_hstxs_v2__command_status_code__result_invalid_password = 7u, /*!< Invalid password if used command “Store configuration” */
    isis_hstxs_v2__command_status_code__result_invalid_command = 8u, /*!< Command is invalid or not allowed in this moment */
    isis_hstxs_v2__command_status_code__result_envm_write_error = 9u, /*!< eNVM write error */
    isis_hstxs_v2__command_status_code__result_nothing_received = 10u, /*!< Initial NVM section status- no data */
    isis_hstxs_v2__command_status_code__result_undefined_error = 255u, /*!< Undefined error */
    isis_hstxs_v2__command_status_code__result_force_uint32 = 268435455u, /*!< Dummy value to force enum to be 32 bit */
} isis_hstxs_v2__command_status_code_t;

/*!
 * Enabled/disabled enum
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs_v2__enabled_t
{
    isis_hstxs_v2__enabled__disabled = 0u,
    isis_hstxs_v2__enabled__enabled = 1u,
} isis_hstxs_v2__enabled_t;

/*!
 * Roll-off factor LUT
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs_v2__lut_t
{
    isis_hstxs_v2__lut___0_5 = 0u,
    isis_hstxs_v2__lut___0_35 = 1u,
} isis_hstxs_v2__lut_t;

/*!
 * Transmitter mode
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs_v2__mode_t
{
    isis_hstxs_v2__mode__standby = 0u, /*!< MSS powered, but transmitter not powered */
    isis_hstxs_v2__mode__on = 1u, /*!< MSS and transmitter powered */
} isis_hstxs_v2__mode_t;

/*!
 * Modulation scheme
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs_v2__modscheme_t
{
    isis_hstxs_v2__modscheme__bpsk = 0u,
    isis_hstxs_v2__modscheme__oqpsk = 1u,
} isis_hstxs_v2__modscheme_t;

/*!
 * Supervisor mode
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs_v2__sup_mode_t
{
    isis_hstxs_v2__sup_mode__sup_only = 0u,
    isis_hstxs_v2__sup_mode__standby = 1u,
} isis_hstxs_v2__sup_mode_t;

/*!
 * Transmitter symbol rate
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs_v2__symbolrate_t
{
    isis_hstxs_v2__symbolrate__thirtysecondth = 0u, /*!< one thirtysecondth of the maximum symbol rate - 156.25 ksps */
    isis_hstxs_v2__symbolrate__sixteenth = 1u, /*!< one sixteenth of the maximum symbol rate - 312.5 ksps */
    isis_hstxs_v2__symbolrate__eighth = 2u, /*!< one eight of the maximum symbol rate - 625 ksps */
    isis_hstxs_v2__symbolrate__quarter = 3u, /*!< one quarter of the maximum symbol rate - 1250 ksps */
    isis_hstxs_v2__symbolrate__half = 4u, /*!< one half of the maximum symbol rate - 2500 ksps */
    isis_hstxs_v2__symbolrate__full = 5u, /*!< maximum symbol rate - 5000 ksps */
} isis_hstxs_v2__symbolrate_t;

/* STRUCTS */

/*!
 *  ISIS_HSTXS_V2 instance structure
 */
typedef struct
{
    uint8_t mssAddr; /*!< I2C address used for mss part of the subsystem */
    uint8_t supAddr; /*!< I2C address used for sup part of the subsystem */
} ISIS_HSTXS_V2_t;

/*!
 * Union for storing the parameters for struct ccsds_frameheader.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__ccsds_frameheader_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        uint8_t spacecraft_id_high : 6; /*!< High bits of spacecraft ID (overwritten by TXS) */
        uint8_t version_number : 2; /*!< Transfer frame version number (forced to 0 by TXS) */
        uint8_t flag_ocf : 1; /*!< Operational control field flag */
        uint8_t virtual_channel : 3; /*!< Virtual channel identifier (virtual channel 0 will be used by the TXS for its idle frames) */
        uint8_t spacecraft_id_low : 4; /*!< Low bits of the spacecraft ID (overwritten by TXS) */
        uint8_t framecount_mc; /*!< Master channel frame count (overwritten by TXS) */
        uint8_t framecount_vc; /*!< Virtual channel frame count, sequential counter for number of frames sent within a virtual channel (modulo 256) */
        uint8_t firstheader_ptr_high : 3; /*!< High bits of the first header pointer */
        uint8_t seglength_id : 2; /*!< Segment length identifier */
        uint8_t flag_packetorder : 1; /*!< Packet order flag */
        uint8_t flag_sync : 1; /*!< Synchronization flag */
        uint8_t flag_secheader : 1; /*!< Transfer frame secondary header flag */
        uint8_t firstheader_ptr_low; /*!< Low bits of the first header pointer */
    } fields;
} isis_hstxs_v2__ccsds_frameheader_t;

/*!
 * Union for storing the parameters for struct supervisor_status.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__supervisor_status_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        uint8_t currmode : 1; /*!< Current supervisor mode */
        uint8_t good3v3Sw : 1; /*!< Flag to indicate whether the switched 3v3 line has a good voltage level */
        uint8_t good5vSw : 1; /*!< Flag to indicate whether the switched 5v line has a good voltage level */
        uint8_t paOverTemp : 1; /*!< Flag to indicate whether a PA overtemperature event has occurred */
        uint8_t tcxoOverTemp : 1; /*!< Flag to indicate whether a TCXO overtemperature event has occurred */
        uint8_t oc5v : 1; /*!< Flag to indicate whether an overcurrent event has occurred on the 5v input line */
    } fields;
} isis_hstxs_v2__supervisor_status_t;

/*!
 * Union for storing the parameters received by get_error_counters.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__get_error_counters__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint16_t lock_err_cnt; /*!< Lock error counter */
        uint16_t freq_err_cnt; /*!< Frequency error counter */
    } fields;
} isis_hstxs_v2__get_error_counters__from_t;

/*!
 * Union for storing the parameters received by get_general_status.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__get_general_status__from_t
{
    unsigned char raw[30];
    struct __attribute__ ((__packed__))
    {
        isis_hstxs_v2__modscheme_t modulation; /*!< Current Modulation Scheme */
        isis_hstxs_v2__mode_t tx_on; /*!< Transmitter status */
        isis_hstxs_v2__symbolrate_t symbolrate; /*!< Current Symbolrate */
        uint8_t reserved1; /*!< should be always zero */
        uint8_t mod_out_power; /*!< Modulation output power */
        isis_hstxs_v2__lut_t lut_choice; /*!< LUT choice */
        uint16_t scid; /*!< Spacecraft ID */
        uint16_t PCLsetpoint; /*!< Serial DAC voltage */
        uint32_t engine_stat; /*!< Engine Status */
        uint32_t uptime; /*!< MSS uptime, in seconds */
        uint16_t locked_err_cnt; /*!< Modulator PLL Lock error counter */
        uint16_t freq_err_cnt; /*!< Modulator frequency error counter */
        uint32_t spi_err_cnt; /*!< SPI error counter */
        uint32_t reserved2; /*!<  */
    } fields;
} isis_hstxs_v2__get_general_status__from_t;

/*!
 * Union for storing the parameters received by get_readstatus2.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__get_readstatus2__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint32_t PuncturingMode : 3; /*!<  */
        uint32_t RS_InterleaveNr : 3; /*!<  */
        uint32_t SymbolRate : 3; /*!<  */
        uint32_t BypassPseudoRandom : 1; /*!<  */
        uint32_t LUT_Switch : 1; /*!<  */
        uint32_t Disable_Pulseshaping : 1; /*!<  */
        uint32_t MODSCHEME : 1; /*!<  */
        uint32_t RAMP_DAC_TEST : 1; /*!<  */
        uint32_t DIRECT_CARRIER : 1; /*!<  */
        uint32_t I_CHAN_POL : 1; /*!<  */
        uint32_t Q_CHAN_POL : 1; /*!<  */
        uint32_t STANDBY_TX_On : 1; /*!<  */
        uint32_t IdleFrameOnly : 1; /*!<  */
        uint32_t TEST_MODE_OnOff_Dly : 1; /*!<  */
        uint32_t Carrier_Suppression : 1; /*!<  */
        uint32_t Carrier_Only : 1; /*!<  */
        uint32_t PRBS : 1; /*!<  */
        uint32_t DAC_DATA_OnOff : 1; /*!<  */
        uint32_t DAC_DATA_MIDRANGE : 1; /*!<  */
        uint32_t DAC_OnOff : 1; /*!<  */
        uint32_t GAUS_NOISE : 1; /*!<  */
        uint32_t DacClipError_Dly : 1; /*!<  */
        uint32_t I2CDATAFRAME_UPDATEVALID_DLY : 1; /*!<  */
        uint32_t IDLEFRAMETMROVERFLOW_DLY : 1; /*!<  */
        uint32_t FECF_OnOff : 1; /*!<  */
        uint32_t GOLDCODE_ONOFF : 1; /*!<  */
    } fields;
} isis_hstxs_v2__get_readstatus2__from_t;

/*!
 * Union for storing the parameters received by get_telemetry.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__get_telemetry__from_t
{
    unsigned char raw[40];
    struct __attribute__ ((__packed__))
    {
        uint16_t reflPower; /*!< Reflected RF Transmission Power \note conversion: eng. value = 0.6105006105 * raw */
        uint16_t forwPower; /*!< Forward RF Transmission Power \note conversion: eng. value = 0.6105006105 * raw */
        uint16_t volt3v3; /*!< Voltage of the 3v3 input line \note conversion: eng. value [in V] = 0.004884 * raw */
        uint16_t volt3v3sw; /*!< Voltage of the 3v3 switched line \note conversion: eng. value [in V] = 0.004884 * raw */
        uint16_t volt5v; /*!< Voltage of the 5v input line \note conversion: eng. value [in V] = 0.004884 * raw */
        uint16_t voltBat; /*!< Voltage of the battery voltage input line \note conversion: eng. value [in V] = 0.004884 * raw */
        uint16_t cur3v3; /*!< 3V3 Line Current Monitor (2 bytes) \note conversion: eng. value = 0.1221001221001221 * raw */
        uint16_t cur3v3sw; /*!< Current consumed on the 3v3 input line \note conversion: eng. value [in mA] = 0.407 * raw */
        uint16_t cur5v; /*!< Current consumed on the 5v input line \note conversion: eng. value [in mA] = 0.6105 * raw */
        uint16_t curBat; /*!< Current consumed on the battery voltage input line \note conversion: eng. value [in mA] = 0.6105 * raw */
        uint16_t voltCtl; /*!< Voltage of the control loop \note conversion: eng. value [in mV] = 0.6105 * raw */
        uint16_t tempDriver; /*!< Temperature of the driver \note conversion: eng. value [in °C] = -0.07669 * raw + 195.6037*/
        uint16_t tempPD; /*!< Temperature of the Power Dectector \note conversion: eng. value [in °C] = 0.1221 * raw + -255*/
        uint16_t tempPA; /*!< Temperature of the Power Amplifier \note conversion: eng. value [in °C] = -0.07669 * raw + 195.6037*/
        uint16_t tempTXCO; /*!< Temperature of the TCXO \note conversion: eng. value [in °C] = -0.07669 * raw + 195.6037*/
        uint32_t uptime; /*!< Uptime of the supervisor, in seconds */
        uint32_t mssPwrTime; /*!< Amount of time the MSS has been powered, in seconds */
        isis_hstxs_v2__supervisor_status_t StatusFlags; /*!< Supervisor status flags */
        uint8_t WDTResetCount; /*!< Amount of times the supervisor has power cycled the MSS due to a watchdog trigger */
    } fields;
} isis_hstxs_v2__get_telemetry__from_t;

/*!
 * Union for storing the parameters received by read_default_backup_settings_from_envm.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__read_default_backup_settings_from_envm__from_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        isis_hstxs_v2__command_status_code_t command_status; /*!<  */
        uint32_t freq; /*!<  */
        uint32_t pcl_setpoint; /*!<  */
        uint32_t modpw; /*!<  */
        uint32_t modctal; /*!<  */
        uint32_t mod; /*!<  */
        uint32_t symrate; /*!<  */
        uint32_t lut_nr; /*!<  */
        uint32_t scid; /*!<  */
        uint32_t val_asm; /*!<  */
        uint32_t punctmode; /*!<  */
        uint32_t rs_interleaver; /*!<  */
        uint32_t moden_time_to_lock; /*!<  */
        uint32_t idle_frame_max_on_time; /*!<  */
        uint32_t fecf_onoff; /*!<  */
        uint32_t reserved1; /*!<  */
        uint32_t reserved2; /*!<  */
        uint32_t CRC16; /*!<  */
    } fields;
} isis_hstxs_v2__read_default_backup_settings_from_envm__from_t;

/*!
 * Union for storing the parameters received by read_default_settings_from_envm.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__read_default_settings_from_envm__from_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        isis_hstxs_v2__command_status_code_t command_status; /*!<  */
        uint32_t freq; /*!<  */
        uint32_t pcl_setpoint; /*!<  */
        uint32_t modpw; /*!<  */
        uint32_t modctal; /*!<  */
        uint32_t mod; /*!<  */
        uint32_t symrate; /*!<  */
        uint32_t lut_nr; /*!<  */
        uint32_t scid; /*!<  */
        uint32_t val_asm; /*!<  */
        uint32_t punctmode; /*!<  */
        uint32_t rs_interleaver; /*!<  */
        uint32_t moden_time_to_lock; /*!<  */
        uint32_t idle_frame_max_on_time; /*!<  */
        uint32_t fecf_onoff; /*!<  */
        uint32_t reserved1; /*!<  */
        uint32_t reserved2; /*!<  */
        uint32_t CRC16; /*!<  */
    } fields;
} isis_hstxs_v2__read_default_settings_from_envm__from_t;

/*!
 * Union for storing the parameters sent by store_default_backup_settings_in_envm.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__store_default_backup_settings_in_envm__to_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        uint32_t password; /*!<  */
        uint32_t freq; /*!<  */
        uint32_t pcl_setpoint; /*!<  */
        uint32_t modpw; /*!<  */
        uint32_t modctal; /*!<  */
        uint32_t mod; /*!<  */
        uint32_t symrate; /*!<  */
        uint32_t lut_nr; /*!<  */
        uint32_t scid; /*!<  */
        uint32_t val_asm; /*!<  */
        uint32_t punctmode; /*!<  */
        uint32_t rs_interleaver; /*!<  */
        uint32_t moden_time_to_lock; /*!<  */
        uint32_t idle_frame_max_on_time; /*!<  */
        uint32_t fecf_onoff; /*!<  */
        uint32_t reserved1; /*!<  */
        uint32_t reserved2; /*!<  */
        uint32_t CRC16; /*!<  */
    } fields;
} isis_hstxs_v2__store_default_backup_settings_in_envm__to_t;

/*!
 * Union for storing the parameters sent by store_default_settings_in_envm.
 */
typedef union __attribute__((__packed__)) _isis_hstxs_v2__store_default_settings_in_envm__to_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        uint32_t password; /*!<  */
        uint32_t freq; /*!<  */
        uint32_t pcl_setpoint; /*!<  */
        uint32_t modpw; /*!<  */
        uint32_t modctal; /*!<  */
        uint32_t mod; /*!<  */
        uint32_t symrate; /*!<  */
        uint32_t lut_nr; /*!<  */
        uint32_t scid; /*!<  */
        uint32_t val_asm; /*!<  */
        uint32_t punctmode; /*!<  */
        uint32_t rs_interleaver; /*!<  */
        uint32_t moden_time_to_lock; /*!<  */
        uint32_t idle_frame_max_on_time; /*!<  */
        uint32_t fecf_onoff; /*!<  */
        uint32_t reserved1; /*!<  */
        uint32_t reserved2; /*!<  */
        uint32_t CRC16; /*!<  */
    } fields;
} isis_hstxs_v2__store_default_settings_in_envm__to_t;

/*!
 * Structure the parameters sent by write_and_send_frame.
 */
typedef struct __attribute__((__packed__))
_isis_hstxs_v2__write_and_send_frame__to_t
{
    isis_hstxs_v2__ccsds_frameheader_t header; /*!< Header to be transmitted */
    uint8_t* data; /*!< Data to be transmitted (maximum length: 217 elements) */
} isis_hstxs_v2__write_and_send_frame__to_t;

#ifdef __cplusplus
}
#endif

#endif /* ISIS_HSTXS_V2_TYPES_H_ */

