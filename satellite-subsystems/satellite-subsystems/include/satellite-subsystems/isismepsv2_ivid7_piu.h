/*
 * isismepsv2_ivid7_piu.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated from:
 *  - imepsv2_structs.yaml
 *  - imepsv2_ivid7_piu.yaml
 */

#ifndef ISISMEPSV2_IVID7_PIU_H_
#define ISISMEPSV2_IVID7_PIU_H_

#include "isismepsv2_ivid7_piu_types.h"
#include <satellite-subsystems/common_types.h>

#ifdef __cplusplus
extern "C"
{
#endif

/*!
 *	Initialize driver for a number of ISISMEPSV2_IVID7_PIU instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] isismepsv2_ivid7_piu Pointer to array of ISISMEPSV2_IVID7_PIU instances
 *	@param[in] isismepsv2_ivid7_piuCount Number of ISISMEPSV2_IVID7_PIU instances pointed to by isismepsv2_ivid7_piu input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t ISISMEPSV2_IVID7_PIU_Init(const ISISMEPSV2_IVID7_PIU_t* isismepsv2_ivid7_piu, uint8_t isismepsv2_ivid7_piuCount);

/*!
 * Switches off any command enable output bus channels that have been switched on after the system powered up up. Only output bus channels that can be commanded off are affected. All force enable channels will remain enabled.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__cancel(uint8_t index, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Correct the unitâ€™s unix time with the specified amount of seconds
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] correction_in Amount of seconds to correct the unix time with.
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__correcttime(uint8_t index, int32_t correction_in, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Get the value of a configuration parameter.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] par_id_in parameter id of the parameter to get
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__getconfigurationparameter(uint8_t index, uint16_t par_id_in, isismepsv2_ivid7_piu__getconfigurationparameter__from_t *response);

/*!
 * Prepare the response buffer with housekeeping data. The housekeeping data is returned in engineering values.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__gethousekeepingeng(uint8_t index, isismepsv2_ivid7_piu__gethousekeepingeng__from_t *response);

/*!
 * Prepare the response buffer with housekeeping data. The housekeeping data is returned in raw form, as received from the hardware, unaltered by the main controller.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__gethousekeepingengincdb(uint8_t index, isismepsv2_ivid7_piu__gethousekeepingengincdb__from_t *response);

/*!
 * Prepare the response buffer with running average housekeeping data. The housekeeping data is returned in engineering values.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__gethousekeepingengrunningavgincdb(uint8_t index, isismepsv2_ivid7_piu__gethousekeepingengrunningavgincdb__from_t *response);

/*!
 * Prepare the response buffer with housekeeping data. The housekeeping data is returned in raw form, as received from the hardware, unaltered by the main controller.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__gethousekeepingraw(uint8_t index, isismepsv2_ivid7_piu__gethousekeepingraw__from_t *response);

/*!
 * Prepare the response buffer with housekeeping data. The housekeeping data is returned in raw form, as received from the hardware, unaltered by the main controller.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__gethousekeepingrawincdb(uint8_t index, isismepsv2_ivid7_piu__gethousekeepingrawincdb__from_t *response);

/*!
 * Prepare the response buffer with running average housekeeping data. The housekeeping data is returned in engineering values.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__gethousekeepingrunningavg(uint8_t index, isismepsv2_ivid7_piu__gethousekeepingrunningavg__from_t *response);

/*!
 * Prepare the response buffer with output bus over current events. Over current fault counters are incremented each time a bus is latched off due to an overcurrent event.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__getovercurrentfaultstate(uint8_t index, isismepsv2_ivid7_piu__getovercurrentfaultstate__from_t *response);

/*!
 * Return system status information
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__getsystemstatus(uint8_t index, isismepsv2_ivid7_piu__getsystemstatus__from_t *response);

/*!
 * Load all configuration parameters from non-volatile memory, discarding any changes made in volatile memory. This is performed automatically at system startup if a valid load configuration is encountered in non-volatile memory. If no (valid) configuration is found, the system will initialize using hard coded defaults.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] conf_key_in Configuration key: 0xA8. Any other value causes the reset command to be rejected with a parameter error. The reset will not be performed in that case.
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__loadconfiguration(uint8_t index, uint8_t conf_key_in, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Performs a no-operation. This is useful to check the availability of the system, without changing anything about the current configuration or operation.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__nop(uint8_t index, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Turn a single output bus channel off using the bus channel index. Index 0 represents channel 0 (OBC0), index 1 represents channel 1 (OBC1), etc.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] obc_idx_in Bus channel index of the channel to turn off. Trying to switch a permanent bus channels will be ignored. An index corresponding to a nonexistent bus channel will be rejected.
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__outputbuschanneloff(uint8_t index, isismepsv2_ivid7_piu__imeps_channel_t obc_idx_in, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Turn a single output bus channel on using the bus channel index. Index 0 represents channel 0 (OBC0), index 1 represents channel 1 (OBC1), etc.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] obc_idx_in Bus channel index of the channel to turn on Trying to switch a permanent bus channels will be ignored. An index corresponding to a nonexistent bus channel will be rejected.
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__outputbuschannelon(uint8_t index, isismepsv2_ivid7_piu__imeps_channel_t obc_idx_in, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Turn-off output bus channels that are marked with a 1-bit, leave bus channels that are not marked unaltered. The least-significant bit corresponds to bus channel 0 (OBC0), the next bit corresponds to channel 1 (OBC1), etc.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__outputbusgroupoff(uint8_t index, const isismepsv2_ivid7_piu__outputbusgroupoff__to_t *params, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Turn-on output bus channels that are marked with a 1-bit, leave bus channels that are not marked unaltered. The least-significant bit corresponds to bus channel 0 (OBC0), the next bit corresponds to channel 1 (OBC1), etc.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__outputbusgroupon(uint8_t index, const isismepsv2_ivid7_piu__outputbusgroupon__to_t *params, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Turn-on bus channels that are marked with a 1-bit, turn-off bus channels that are not marked (i.e. 0-bit). The least-significant bit corresponds to bus channel 0 (OBC00), the next bit corresponds to channel 1 (OBC01), etc.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__outputbusgroupstate(uint8_t index, const isismepsv2_ivid7_piu__outputbusgroupstate__to_t *params, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Perform a software induced reset of the MCU.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__reset(uint8_t index, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Reset all configuration parameters to hard-coded defaults, discarding any changes made, in volatile memory (only!). This is performed automatically at system startup before an attempt to load a configuration is performed. If no (valid) configuration is found that can be loaded, the system will use hard coded defaults.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] conf_key_in Configuration key: 0xA8. Any other value causes the reset command to be rejected with a parameter error. The reset will not be performed in that case.
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__resetconfiguration(uint8_t index, uint8_t conf_key_in, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Reset a parameter to its default hard-coded value. All parameters have this value at system power-up or after the software reset command.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] par_id_in parameter id of the parameter to get
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__resetconfigurationparameter(uint8_t index, uint16_t par_id_in, isismepsv2_ivid7_piu__resetconfigurationparameter__from_t *response);

/*!
 * Resets the watchdog timer keeping the system from performing a reset.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__resetwatchdog(uint8_t index, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Commit all read/write configuration parameters kept in volatile memory to non-volatile memory.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] checksum_in To force save this value can be set to 0. The save will then proceed without performing CRC verification.
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__saveconfiguration(uint8_t index, uint16_t checksum_in, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Change a configuration parameter. The change will take effect immediately and any function using the parameter will use the new value
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__setconfigurationparameter(uint8_t index, const isismepsv2_ivid7_piu__setconfigurationparameter__to_t *params, isismepsv2_ivid7_piu__setconfigurationparameter__from_t *response);

/*!
 * 
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__switchtonominal(uint8_t index, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * 
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__switchtosafety(uint8_t index, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

/*!
 * Write all reset cause counters to zero in persistent memory.
 *
 * @param[in] index Index of ISISMEPSV2_IVID7_PIU in list provided during driver initialization
 * @param[out] reply_header_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isismepsv2_ivid7_piu__zeroresetcausecounters(uint8_t index, isismepsv2_ivid7_piu__replyheader_t *reply_header_out);

#ifdef __cplusplus
}
#endif

#endif /* ISISMEPSV2_IVID7_PIU_H_ */

