/*
 * isis_hstxs.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.0.0
 *
 * Generated ICD version: 1.2
 * Generated from:
 *  - isis_hstxs.yaml
 *  - isis_hstxs_sup.yaml
 */

#ifndef ISIS_HSTXS_H_
#define ISIS_HSTXS_H_

#include "isis_hstxs_types.h"
#include <satellite-subsystems/common_types.h>

/*!
 *	Initialize driver for a number of ISIS_HSTXS instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] isis_hstxs Pointer to array of ISIS_HSTXS instances
 *	@param[in] isis_hstxsCount Number of ISIS_HSTXS instances pointed to by isis_hstxs input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t ISIS_HSTXS_Init(ISIS_HSTXS_t* isis_hstxs, uint8_t isis_hstxsCount);

/*!
 * Clears the I2C WDT
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__clear_i2cswdt(uint8_t index);

/*!
 * Gets current ASM value
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] val_asm_out ASM value 32 bits
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_asm_value(uint8_t index, uint32_t *val_asm_out);

/*!
 * Gets the status of the transmitter engine
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_engine_status(uint8_t index, isis_hstxs__get_engine_status__from_t *response);

/*!
 * Gets lock and frequency error counters.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_error_counters(uint8_t index, isis_hstxs__get_error_counters__from_t *response);

/*!
 * Gets the general status.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_general_status(uint8_t index, isis_hstxs__get_general_status__from_t *response);

/*!
 * Gets Master Channel counter.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] counter_out Master Channel Counter
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_master_channel_counter(uint8_t index, uint8_t *counter_out);

/*!
 * Gets the Modulator CT_CAL register.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] value_out Raw value complete 16 bit range.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_modulator_ct_cal_register(uint8_t index, uint16_t *value_out);

/*!
 * Retrieve the MSS power time
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] mssPwrTime_out Amount of time the MSS has been powered, in seconds
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_mss_pwrtime(uint8_t index, uint32_t *mssPwrTime_out);

/*!
 * Gets SPI FIFO error counter
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] counter_out SPI FIFO error counter
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_spi_fifo_error_counter(uint8_t index, uint32_t *counter_out);

/*!
 * Retrieve the current supervisor status
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] supervisor_status_out Supervisor status flags
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_sup_status(uint8_t index, isis_hstxs__supervisor_status_t *supervisor_status_out);

/*!
 * Retrieve the supervisor uptime
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] uptime_out Uptime of the supervisor, in seconds
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_sup_uptime(uint8_t index, uint32_t *uptime_out);

/*!
 * Retrieve housekeeping telemetry from the supervisor
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_telemetry(uint8_t index, isis_hstxs__get_telemetry__from_t *response);

/*!
 * Gets the transmission frequency.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] freq_out Frequency in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_tx_frequency(uint8_t index, uint32_t *freq_out);

/*!
 * Gets the MSS uptime.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] uptime_out MSS uptime in seconds
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_uptime(uint8_t index, uint32_t *uptime_out);

/*!
 * Gets Virtual Channel counter.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[out] counter_out Virtual Channel Counter
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__get_virtual_channel_counter(uint8_t index, uint8_t *counter_out);

/*!
 * Perform a reset of the entire subsystem, both the MSS and the supervisor
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__reset(uint8_t index);

/*!
 * Send current buffer data block.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__send_buffer_frame(uint8_t index);

/*!
 * Sets the attenautor level to control the output power in the transmission chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] level_in Valid value from 0 to 31.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_attenuator_level(uint8_t index, uint8_t level_in);

/*!
 * Sets the bypass Pseudo-Random block state.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_bypass_pseudo_random_block(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the state of the carrier only mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_carrier_only_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the state of Carrier/Sideband suppression mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_carrier_sideband_suppression_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the contellation direction in the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] value_in 0 - Constellation Direction Left, 1 - Constellation Direction Right.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_constellation_direction(uint8_t index, isis_hstxs__direction_t value_in);

/*!
 * Sets the state of DAC Midrange mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_dac_midrange_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the state of DAC Mute mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_dac_mute_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the state from of section of the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_dac_state(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Enables or disable FECF
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] fecf_in New FECF setting
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_fecf(uint8_t index, isis_hstxs__enabled_t fecf_in);

/*!
 * Sets the ASM value in the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] val_asm_in ASM value. Valid range full 32 bits.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_frame_asm_value(uint8_t index, uint32_t val_asm_in);

/*!
 * Sets the SCID value in the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] scid_in SCID value. Valid range full 16 bits.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_frame_scid(uint8_t index, uint16_t scid_in);

/*!
 * Sets the state of Gaussian Noise mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_gaussian_noise_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the state of General Test mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_general_test_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the idle frame only mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_idle_frame_only_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the Idle Frame Watchdog time
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] time_in Raw value. Valid range is the full 32 bits.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_idle_frame_watchdog_time(uint8_t index, uint32_t time_in);

/*!
 * Sets the time of initial transmission to wait for the receiver demodulator to lock with the transmitter signal.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] lock_time_in RAW value. Valid range is the full 32 bits.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_lock_time(uint8_t index, uint32_t lock_time_in);

/*!
 * Chooses which is the LUT being used by the transmitter.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] lut_in 0 - LUT (0.5), 1 - LUT (0.35), 2 - LUT (adjusted).
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_lut_choice(uint8_t index, isis_hstxs__lut_t lut_in);

/*!
 * Sets the transmitter modulation scheme
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] modscheme_in New modulation scheme to be set, BPSK or OQPSK
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_modulation_scheme(uint8_t index, isis_hstxs__modscheme_t modscheme_in);

/*!
 * Sets modulator CT_CAL register.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] value_in Raw value complete 16 bit range.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_modulator_ct_cal_register(uint8_t index, uint16_t value_in);

/*!
 * Sets the output power level of the modulator device in the transmission chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] power_in Valid value from 1 to 10.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_modulator_output_power(uint8_t index, uint8_t power_in);

/*!
 * Sets the polarization in the RRC I Channel on the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] polarization_in 0 - Polarization negative, 1 - Polarization positive
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_polarization_rrc_i_chanel(uint8_t index, isis_hstxs__polarization_t polarization_in);

/*!
 * Sets the polarization in the RRC Q Channel on the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] polarization_in 0 - Polarization negative, 1 - Polarization positive
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_polarization_rrc_q_chanel(uint8_t index, isis_hstxs__polarization_t polarization_in);

/*!
 * Sets the PRBS Mode
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_prbs_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the state of Pulse Shaping section of the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_pulse_shaping_state(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the puncturing level in the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] level_in 1 - 1:2, 2 - 2:3, 3 - 3:4, 4 - 5:6, 7 - 7:8
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_puncturing_level(uint8_t index, uint8_t level_in);

/*!
 * Sets the state of Ramp DAC Test mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_ramp_dac_test_mode(uint8_t index, isis_hstxs__enabled_t state_in);

/*!
 * Sets the Reed-Solomon interleave level in the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] level_in Values: 1-7
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_reed_solomon_interleave_level(uint8_t index, uint8_t level_in);

/*!
 * Sets the serial DAC output value. The device controls the output power voltage level.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] level_in Raw DAC range value. Valid value from 0 to 4095.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_serial_dac_level(uint8_t index, uint16_t level_in);

/*!
 * Sets the mode of the supervisor to supervisor only [MSS not powered] or standby [MSS powered]
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] sup_mode_in Desired supervisor mode
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_sup_mode(uint8_t index, isis_hstxs__sup_mode_t sup_mode_in);

/*!
 * Sets the transmitter symbolrate.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] symbolrate_in New symbolrate to be set, in discrete steps between 1/8 and maximum
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_symbolrate(uint8_t index, isis_hstxs__symbolrate_t symbolrate_in);

/*!
 * Sets the transmission carrier frequency.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] freq_in Frequency in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_tx_frequency(uint8_t index, uint32_t freq_in);

/*!
 * Sets the transmitter mode. The command should be used to switch between stand-by mode to tx on mode.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] mode_in New MSS mode, stand-by or transmitter on
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__set_tx_mode(uint8_t index, isis_hstxs__mode_t mode_in);

/*!
 * Writes the data to be transmitted into the engine's transmission buffer and asks the engine to transmit it.
 *
 * @param[in] index Index of ISIS_HSTXS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 217
 * @param[out] status_out 0x00 - success, 0xFF - fail
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs__write_and_send_frame(uint8_t index, isis_hstxs__write_and_send_frame__to_t *params, size_t data_length, uint8_t *status_out);

#endif /* ISIS_HSTXS_H_ */

