/*
 * isis_aocs.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated ICD version: 1.6
 * Generated from: isis_aocs_common_v1.6.yaml
 */

#ifndef ISIS_AOCS_H_
#define ISIS_AOCS_H_

#include "isis_aocs_types.h"
#include <satellite-subsystems/common_types.h>

#ifdef __cplusplus
extern "C"
{
#endif

/*!
 *	Initialize driver for a number of ISIS_AOCS instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] isis_aocs Pointer to array of ISIS_AOCS instances
 *	@param[in] isis_aocsCount Number of ISIS_AOCS instances pointed to by isis_aocs input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t ISIS_AOCS_Init(const ISIS_AOCS_t* isis_aocs, uint8_t isis_aocsCount);

/*!
 * Loads the AOCS processing configuration from RAM and immediately apply a configuration change to an AOCS processing submodule
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__apply_aocs_config(uint8_t index, const isis_aocs__apply_aocs_config__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Loads the AOCS processing configuration from RAM and immediately apply all configuration changes to an AOCS processing submodule
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__apply_aocs_config_all(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Change state of the star tracker
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] Mode_in Changes state of the star tracker
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_change_state(uint8_t index, isis_aocs__auriga_str_select_mode_t Mode_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Copy star tracker parameter file from its SD card into FRAM
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_copy_param(uint8_t index, const isis_aocs__auriga_copy_param__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Download a file from the star tracker OBC to the AOCS OBC
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_download_file(uint8_t index, const isis_aocs__auriga_download_file__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get version and boot info from the star tracker OBC
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_get_fw_status(uint8_t index, isis_aocs__auriga_get_fw_status__from_t *response);

/*!
 * Take a photo on the star tracker
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_photo(uint8_t index, const isis_aocs__auriga_photo__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Sets the star tracker firmware slot to use and optionally boots into it
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_set_fw(uint8_t index, const isis_aocs__auriga_set_fw__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Start logging on the star tracker and transfer it to the AOCS OBC
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_start_logging(uint8_t index, const isis_aocs__auriga_start_logging__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Update the star tracker firmware from a file on the star tracker OBC
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_update_fw(uint8_t index, const isis_aocs__auriga_update_fw__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Upload a file from the AOCS OBC to the star tracker OBC
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_upload_file(uint8_t index, const isis_aocs__auriga_upload_file__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Upload a file from the AOCS OBC to star tracker OBC slot 1
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__auriga_upload_firmware(uint8_t index, const isis_aocs__auriga_upload_firmware__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Check the parameter store queue
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__check_params(uint8_t index, isis_aocs__check_params__from_t *response);

/*!
 * Check the result of the last command
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__check_result(uint8_t index, int16_t *error_code_out);

/*!
 * Check the result of the last threaded command
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__check_threaded(uint8_t index, isis_aocs__check_threaded__from_t *response);

/*!
 * Clear the fault log
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__clear_fault_log(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Clear FRAM contents (except firmware updater and any thruster passwords); will force a reboot when finished
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__clear_fram(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Clear the pending parameter store queue
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__clear_pending_params(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Clear internal telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] type_in Telemetry type to clear
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__clear_telemetry(uint8_t index, isis_aocs__tlm_type_t type_in, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Clear all trace logs (file and RAM/FRAM)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__clear_trace_log(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Save the current parameter store queue to non-volatile memory (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] index_in Parameter index
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__commit_params(uint8_t index, isis_aocs__fpdb_index_t index_in, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Copy all operational mode configuration from one mode to another
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__copy_operational_mode_config(uint8_t index, const isis_aocs__copy_operational_mode_config__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the CubeWheel I2C address (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__cubewheel_set_i2c_address(uint8_t index, const isis_aocs__cubewheel_set_i2c_address__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Dump internal telemetry for debug purposes
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_dump_internal_telemetry(uint8_t index, const isis_aocs__dbg_dump_internal_telemetry__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Save and dump the stack info to the debug UART
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_dump_stack_info(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get the saved stack info
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_get_stack_info(uint8_t index, isis_aocs__dbg_get_stack_info__from_t *response);

/*!
 * Set GNSS ENABLE pin state; pin must be configured for output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] state_in State to set
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_gnss_enable_set(uint8_t index, isis_aocs__gpio_state_t state_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Get GNSS /VALID pin state
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_gnss_nvalid_get(uint8_t index, isis_aocs__dbg_gnss_nvalid_get__from_t *response);

/*!
 * Get GNSS PPS pin state
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_gnss_pps_get(uint8_t index, isis_aocs__dbg_gnss_pps_get__from_t *response);

/*!
 * Set GNSS RESET pin state; pin must be configured for output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] state_in State to set
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_gnss_reset_set(uint8_t index, isis_aocs__gpio_state_t state_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Write/read through the GNSS UART bus; bus must have already been initialized
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] write_data_length Length of input struct member 'write_data' in number of elements, maximum value: 256
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_gnss_uart_write_read(uint8_t index, const isis_aocs__dbg_gnss_uart_write_read__to_t *params, size_t write_data_length, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Write/read predefined test string through GNSS UART
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] read_timeout_in Time to wait for a read response
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_gnss_uart_write_read_test_data(uint8_t index, uint16_t read_timeout_in, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get previously read I2C data
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_i2c_get_read_data(uint8_t index, isis_aocs__dbg_i2c_get_read_data__from_t *response);

/*!
 * Write/read through the I2C master
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] write_data_length Length of input struct member 'write_data' in number of elements, maximum value: 256
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_i2c_write_read(uint8_t index, const isis_aocs__dbg_i2c_write_read__to_t *params, size_t write_data_length, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Write/read through the I2C master to the I2C test device
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_i2c_write_read_test_device(uint8_t index, const isis_aocs__dbg_i2c_write_read_test_device__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Set the external MTM CS1 pin state; pin must be configured for output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] state_in State to set
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_mtm_ext_cs1_set(uint8_t index, isis_aocs__gpio_state_t state_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the external MTM CS2 pin state; pin must be configured for output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] state_in State to set
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_mtm_ext_cs2_set(uint8_t index, isis_aocs__gpio_state_t state_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Configure the external MTM SCK pin as output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_mtm_ext_sck_configure_output(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the external MTM SCK pin state; pin must be configured for output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] state_in State to set
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_mtm_ext_sck_set(uint8_t index, isis_aocs__gpio_state_t state_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Write/read to the external MTM over SPI
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] write_data_length Length of input struct member 'write_data' in number of elements, maximum value: 256
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_mtm_ext_spi_write_read(uint8_t index, const isis_aocs__dbg_mtm_ext_spi_write_read__to_t *params, size_t write_data_length, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Write/read a predefined test string to the external MTM over SPI
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_mtm_ext_spi_write_read_test_data(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Configure a PIO pin
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_pio_configure(uint8_t index, const isis_aocs__dbg_pio_configure__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set a PIO state; pin must be configured for output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_pio_get(uint8_t index, const isis_aocs__dbg_pio_get__to_t *params, isis_aocs__dbg_pio_get__from_t *response);

/*!
 * Set a PIO state; pin must be configured for output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_pio_set(uint8_t index, const isis_aocs__dbg_pio_set__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Get previously read RS485 data
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_rs485_get_read_data(uint8_t index, isis_aocs__dbg_rs485_get_read_data__from_t *response);

/*!
 * Write/read through the RS485 bus
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] write_data_length Length of input struct member 'write_data' in number of elements, maximum value: 256
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_rs485_write_read(uint8_t index, const isis_aocs__dbg_rs485_write_read__to_t *params, size_t write_data_length, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get previously read SPI data
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_spi_get_read_data(uint8_t index, isis_aocs__dbg_spi_get_read_data__from_t *response);

/*!
 * Write/read through an SPI master
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] write_data_length Length of input struct member 'write_data' in number of elements, maximum value: 256
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_spi_write_read(uint8_t index, const isis_aocs__dbg_spi_write_read__to_t *params, size_t write_data_length, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get previously read UART data
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_uart_get_read_data(uint8_t index, isis_aocs__dbg_uart_get_read_data__from_t *response);

/*!
 * Write/read through a UART bus; bus must have already been initialized
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] write_data_length Length of input struct member 'write_data' in number of elements, maximum value: 256
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dbg_uart_write_read(uint8_t index, const isis_aocs__dbg_uart_write_read__to_t *params, size_t write_data_length, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get file info of the current download file
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__down_file_info(uint8_t index, isis_aocs__down_file_info__from_t *response);

/*!
 * Transfer large chunk from AOCS
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] offset_in Byte offset of this data block
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__down_large_chunk(uint8_t index, uint32_t offset_in, isis_aocs__down_large_chunk__from_t *response);

/*!
 * Prepare file for download
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response_out Generic file response
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__down_prepare(uint8_t index, const isis_aocs__down_prepare__to_t *params, isis_aocs__file_generic_response_t *response_out);

/*!
 * Transfer small chunk from AOCS
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] offset_in Byte offset of this data block
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__down_small_chunk(uint8_t index, uint32_t offset_in, isis_aocs__down_small_chunk__from_t *response);

/*!
 * Dump entire flight parameter database from FRAM to the debug output and/or file (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dump_params(uint8_t index, const isis_aocs__dump_params__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Dump telemetry to file
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__dump_telemetry(uint8_t index, const isis_aocs__dump_telemetry__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Exit hot standby mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_cooldown(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Put thruster in hot standby mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_hot_standby(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Manually heat up the thruster to hot standby mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] duration_in Time in [s] before switching to hot standby mode
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_manual_heatup(uint8_t index, uint32_t duration_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Ramp a register from a certain value to another value over a time period
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_ramp_register(uint8_t index, const isis_aocs__enp_ramp_register__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Abort the currently running script
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_script_abort(uint8_t index, const isis_aocs__enp_script_abort__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Get information about the current script
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_script_get_info(uint8_t index, isis_aocs__enp_script_get_info__from_t *response);

/*!
 * Load a script from a file
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_script_load(uint8_t index, const isis_aocs__enp_script_load__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Start running the loaded script
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_script_start(uint8_t index, const isis_aocs__enp_script_start__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Load a script from a byte array
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 250
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_script_uplink(uint8_t index, const isis_aocs__enp_script_uplink__to_t *params, size_t data_length, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Start firing thruster
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_start_firing(uint8_t index, const isis_aocs__enp_start_firing__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Stop firing thruster
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_stop_firing(uint8_t index, const isis_aocs__enp_stop_firing__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Write to a thruster register
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] write_data_length Length of input struct member 'write_data' in number of elements, maximum value: 110
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__enp_write_register(uint8_t index, const isis_aocs__enp_write_register__to_t *params, size_t write_data_length, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Force trace log file switch
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__force_trace_log_switch(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Format currently active mass storage device; will force a reboot when finished (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__format(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Erase a slot (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] slot_in Slot to erase
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__fw_erase_slot(uint8_t index, uint8_t slot_in, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get the metadata for all writable slots
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__fw_get_slot_metadata(uint8_t index, isis_aocs__fw_get_slot_metadata__from_t *response);

/*!
 * Configure which slot to use for one shot boot
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__fw_set_one_shot(uint8_t index, const isis_aocs__fw_set_one_shot__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Configure which slot to use as permanent slot
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] slot_in Slot to use
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__fw_set_permanent(uint8_t index, uint8_t slot_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set metadata (CRC and size) for a slot
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__fw_set_slot_metadata(uint8_t index, const isis_aocs__fw_set_slot_metadata__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Write file to a slot (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__fw_write_slot(uint8_t index, const isis_aocs__fw_write_slot__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Query current boot configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_boot_info(uint8_t index, isis_aocs__get_boot_info__from_t *response);

/*!
 * Get the log for the last boot
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_boot_log(uint8_t index, isis_aocs__get_boot_log__from_t *response);

/*!
 * Get the AOCS control target
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_control_target(uint8_t index, isis_aocs__get_control_target__from_t *response);

/*!
 * Get the AOCS control target as an LVLH-offset frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_control_target_lvlh(uint8_t index, isis_aocs__get_control_target_lvlh__from_t *response);

/*!
 * Get the AOCS control target as an inertial quaternion
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_control_target_quat(uint8_t index, isis_aocs__get_control_target_quat__from_t *response);

/*!
 * Get the AOCS control target as a spin around a body axis
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_control_target_spin(uint8_t index, isis_aocs__get_control_target_spin__from_t *response);

/*!
 * Get general housekeeping telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_current_general_telemetry(uint8_t index, isis_aocs__tlm_entry_last_sample_forced_t entry_in, isis_aocs__get_current_general_telemetry__from_t *response);

/*!
 * Retrieve information about a fault
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_fault_log(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__get_fault_log__from_t *response);

/*!
 * Get general housekeeping telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_general_telemetry(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__get_general_telemetry__from_t *response);

/*!
 * Get current operating mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_operating_mode(uint8_t index, isis_aocs__get_operating_mode__from_t *response);

/*!
 * Get flight parameter
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param(uint8_t index, const isis_aocs__get_param__to_t *params, isis_aocs__get_param__from_t *response);

/*!
 * Get flight parameter interpreted as one float
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_1f(uint8_t index, const isis_aocs__get_param_1f__to_t *params, isis_aocs__get_param_1f__from_t *response);

/*!
 * Get flight parameter interpreted as two floats
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_2f(uint8_t index, const isis_aocs__get_param_2f__to_t *params, isis_aocs__get_param_2f__from_t *response);

/*!
 * Get flight parameter interpreted as three floats
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_3f(uint8_t index, const isis_aocs__get_param_3f__to_t *params, isis_aocs__get_param_3f__from_t *response);

/*!
 * Get flight parameter interpreted as four floats
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_4f(uint8_t index, const isis_aocs__get_param_4f__to_t *params, isis_aocs__get_param_4f__from_t *response);

/*!
 * Get flight parameter interpreted as ASCII
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_ascii(uint8_t index, const isis_aocs__get_param_ascii__to_t *params, isis_aocs__get_param_ascii__from_t *response);

/*!
 * Get Auriga configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_auriga(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_auriga__from_t *response);

/*!
 * Get flight parameter interpreted as bias estimator options
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_bias_estimator(uint8_t index, const isis_aocs__get_param_bias_estimator__to_t *params, isis_aocs__get_param_bias_estimator__from_t *response);

/*!
 * Get CubeWheel configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_cubewheel(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_cubewheel__from_t *response);

/*!
 * Get flight parameter interpreted as float
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_f(uint8_t index, const isis_aocs__get_param_f__to_t *params, isis_aocs__get_param_f__from_t *response);

/*!
 * Get flight parameter by index
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_generic(uint8_t index, const isis_aocs__get_param_generic__to_t *params, isis_aocs__get_param_generic__from_t *response);

/*!
 * Get GNSS log configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_gnss_log_config(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_gnss_log_config__from_t *response);

/*!
 * Get flight parameter interpreted as HEX32
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_hex32(uint8_t index, const isis_aocs__get_param_hex32__to_t *params, isis_aocs__get_param_hex32__from_t *response);

/*!
 * Get IMTQ configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_imtq(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_imtq__from_t *response);

/*!
 * Get flight parameter interpreted as INT8
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_int32(uint8_t index, const isis_aocs__get_param_int32__to_t *params, isis_aocs__get_param_int32__from_t *response);

/*!
 * Get Lens R&D FSS configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_lensrnd(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_lensrnd__from_t *response);

/*!
 * Get operating mode subsystem auto power
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_operating_mode_subsys_auto_power(uint8_t index, const isis_aocs__get_param_operating_mode_subsys_auto_power__to_t *params, isis_aocs__get_param_operating_mode_subsys_auto_power__from_t *response);

/*!
 * Get operating mode switch delay from volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_operating_mode_switch_delay(uint8_t index, const isis_aocs__get_param_operating_mode_switch_delay__to_t *params, isis_aocs__get_param_operating_mode_switch_delay__from_t *response);

/*!
 * Get part of a flight parameter
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_partial(uint8_t index, const isis_aocs__get_param_partial__to_t *params, isis_aocs__get_param_partial__from_t *response);

/*!
 * Get part of a flight parameter interpreted as float
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_partial_f(uint8_t index, const isis_aocs__get_param_partial_f__to_t *params, isis_aocs__get_param_partial_f__from_t *response);

/*!
 * Get part of a flight parameter by index
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_partial_generic(uint8_t index, const isis_aocs__get_param_partial_generic__to_t *params, isis_aocs__get_param_partial_generic__from_t *response);

/*!
 * Get flight parameter interpreted as HEX32
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_partial_hex32(uint8_t index, const isis_aocs__get_param_partial_hex32__to_t *params, isis_aocs__get_param_partial_hex32__from_t *response);

/*!
 * Get part of a flight parameter
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_partial_int32(uint8_t index, const isis_aocs__get_param_partial_int32__to_t *params, isis_aocs__get_param_partial_int32__from_t *response);

/*!
 * Get part of a flight parameter interpreted as UINT32
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_partial_uint32(uint8_t index, const isis_aocs__get_param_partial_uint32__to_t *params, isis_aocs__get_param_partial_uint32__from_t *response);

/*!
 * Get Astrofein RW25 configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_rw25(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_rw25__from_t *response);

/*!
 * Get SCG configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_scg(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_scg__from_t *response);

/*!
 * Get SCG temperature coefficients
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_scg_temperature_coefficients(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_scg_temperature_coefficients__from_t *response);

/*!
 * Get flight parameter interpreted as sensors bitfield
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_sensors(uint8_t index, const isis_aocs__get_param_sensors__to_t *params, isis_aocs__get_param_sensors__from_t *response);

/*!
 * Get operating mode required subsystems
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_subsys_required(uint8_t index, const isis_aocs__get_param_subsys_required__to_t *params, isis_aocs__get_param_subsys_required__from_t *response);

/*!
 * Get parameter from paramsDB interpreted as Enpulsion NANO thruster config
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_thr(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_thr__from_t *response);

/*!
 * Get parameter from paramsDB interpreted as Enpulsion NANO thruster config
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_thr_fault(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_thr_fault__from_t *response);

/*!
 * Get parameter from paramsDB interpreted as Enpulsion NANO thruster config
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_thr_state(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__get_param_thr_state__from_t *response);

/*!
 * Get flight parameter interpreted as TLE
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_tle(uint8_t index, const isis_aocs__get_param_tle__to_t *params, isis_aocs__get_param_tle__from_t *response);

/*!
 * Get value of total impulse parameter from volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_total_impulse(uint8_t index, isis_aocs__get_param_total_impulse__from_t *response);

/*!
 * Get flight parameter interpreted as UINT32
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_param_uint32(uint8_t index, const isis_aocs__get_param_uint32__to_t *params, isis_aocs__get_param_uint32__from_t *response);

/*!
 * Get statistics about commands
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_tc_stats(uint8_t index, isis_aocs__get_tc_stats__from_t *response);

/*!
 * Get current clock time
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_time(uint8_t index, isis_aocs__get_time__from_t *response);

/*!
 * Get trace event
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_trace_event(uint8_t index, const isis_aocs__get_trace_event__to_t *params, isis_aocs__get_trace_event__from_t *response);

/*!
 * Retrieve information about trace events
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_trace_log(uint8_t index, const isis_aocs__get_trace_log__to_t *params, isis_aocs__get_trace_log__from_t *response);

/*!
 * Get software version
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__get_version(uint8_t index, isis_aocs__get_version__from_t *response);

/*!
 * Capture a spectrum on the GNSS receiver. Logging is enabled during the capture and other GNSS messages are disabled.
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__gnss_capture_spectrum(uint8_t index, const isis_aocs__gnss_capture_spectrum__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Disable GNSS logging, log to a file and clear log on success
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__gnss_dump_log(uint8_t index, const isis_aocs__gnss_dump_log__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get the latest GNSS raw data response
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__gnss_get_output(uint8_t index, isis_aocs__gnss_get_output__from_t *response);

/*!
 * Get the GNSS PPS status
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__gnss_get_pps_status(uint8_t index, isis_aocs__gnss_get_pps_status__from_t *response);

/*!
 * Send a command to the GNSS
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__gnss_send_command(uint8_t index, const isis_aocs__gnss_send_command__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Turn GNSS logging ON/OFF
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] state_in Whether to turn ON or OFF
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__gnss_set_logging(uint8_t index, isis_aocs__on_off_8bit_t state_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Arm the HDRM deploy mechanism
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] channels_in Channels to arm
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__hdrm_arm(uint8_t index, isis_aocs__hdrm_arming_channels_t channels_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Start the HDRM deployment mechanism burn resistors (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__hdrm_fire(uint8_t index, const isis_aocs__hdrm_fire__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Retrieve the status of the HDRM deployment
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__hdrm_get_status(uint8_t index, isis_aocs__hdrm_get_status__from_t *response);

/*!
 * Stop the burn resistors and un-arms the HDRM deploy mechanism
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__hdrm_stop(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Bypass the controller to set the IMTQ actuation
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] params_length Length of input struct member 'params' in number of elements, maximum value: 4
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__imtq_set_bypass(uint8_t index, const isis_aocs__imtq_set_bypass__to_t *params, size_t params_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Bypass the controller to set the IMTQ to detumbling
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] duration_in Detumbling duration
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__imtq_set_bypass_bdot(uint8_t index, uint16_t duration_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Bypass the controller to set the IMTQ actuation to a specific dipole in BRF
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__imtq_set_bypass_brf(uint8_t index, const isis_aocs__imtq_set_bypass_brf__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Bypass the controller to set the IMTQ actuation to a specific dipole per axis
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__imtq_set_bypass_dipole(uint8_t index, const isis_aocs__imtq_set_bypass_dipole__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Disable the IMTQ actuation bypass and use the controller output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__imtq_set_bypass_off(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Bypass the controller to set the IMTQ actuation to a sine wave
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__imtq_set_bypass_sine(uint8_t index, const isis_aocs__imtq_set_bypass_sine__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Get Lens R&D FSS correction table information
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__lensrnd_get_correction_table_info(uint8_t index, isis_aocs__lensrnd_get_correction_table_info__from_t *response);

/*!
 * Load a correction table into FRAM (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__lensrnd_load_file(uint8_t index, const isis_aocs__lensrnd_load_file__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Lists all available faults and whether they are enabled
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Parameter source
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__list_faults(uint8_t index, isis_aocs__param_source_t source_in, isis_aocs__list_faults__from_t *response);

/*!
 * List directory contents (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__ls(uint8_t index, const isis_aocs__ls__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get the results from the last ls
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__ls_get(uint8_t index, isis_aocs__ls_get__from_t *response);

/*!
 * Read parameters from file and set in RAM (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__read_params_from_file(uint8_t index, const isis_aocs__read_params_from_file__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Reboot AOCS OBC
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__reboot(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Reset everything in the AOCS scope
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] key_in Reset key; what to reset
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__reset_aocs(uint8_t index, isis_aocs__reset_key_t key_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Reset flight parameter to default value in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] index_in Parameter index
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__reset_param(uint8_t index, isis_aocs__fpdb_index_t index_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Reset flight parameter by index
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] index_in Parameter index
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__reset_param_generic(uint8_t index, uint32_t index_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Retrieve the latest actuation output frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_actuation_output(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_actuation_output__from_t *response);

/*!
 * Retrieve actuation state internals
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_actuation_state(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_actuation_state__from_t *response);

/*!
 * Retrieve AOCS internal telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_aocs_int_tlm(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_aocs_int_tlm__from_t *response);

/*!
 * Retrieve full AOCS TLM
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_aocs_tlm(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_aocs_tlm__from_t *response);

/*!
 * Retrieve AOCS bias estimation output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_bias_estimation_output(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_bias_estimation_output__from_t *response);

/*!
 * Retrieve the latest controller output frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_control_output(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_control_output__from_t *response);

/*!
 * Retrieve CubeWheel telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_cubewheel_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_cubewheel_tlm__from_t *response);

/*!
 * Retrieve full AOCS TLM
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_current_aocs_tlm(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_forced_t entry_in, isis_aocs__retrieve_current_aocs_tlm__from_t *response);

/*!
 * Retrieve all subsystem TLM
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_current_subsystem_tlm(uint8_t index, isis_aocs__retrieve_current_subsystem_tlm__from_t *response);

/*!
 * Retrieve TLM from a single subsystem interpreted as thruster HK
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_enp_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_enp_tlm__from_t *response);

/*!
 * Retrieve the latest ephemeris frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_ephemeris(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_ephemeris__from_t *response);

/*!
 * Retrieve AOCS output in roll-pitch-yaw Euler angles
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_euler_angles(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_euler_angles__from_t *response);

/*!
 * Retrieve GNSS telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_gnss_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_gnss_tlm__from_t *response);

/*!
 * Retrieve IMTQ telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_imtq_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_imtq_tlm__from_t *response);

/*!
 * Retrieve the latest measurement frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_measurements(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_measurements__from_t *response);

/*!
 * Retrieve all power TLM
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_power_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_power_tlm__from_t *response);

/*!
 * Retrieve the latest processed sensor data frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_processed_sensor_data(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_processed_sensor_data__from_t *response);

/*!
 * Retrieve Astrofein RW25 telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_rw25_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_rw25_tlm__from_t *response);

/*!
 * Retrieve SCG telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_scg_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_scg_tlm__from_t *response);

/*!
 * Retrieve the latest actuation output frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_single_aocs_tlm(uint8_t index, const isis_aocs__retrieve_single_aocs_tlm__to_t *params, isis_aocs__retrieve_single_aocs_tlm__from_t *response);

/*!
 * Retrieve TLM from a single subsystem
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_single_subsystem_tlm(uint8_t index, const isis_aocs__retrieve_single_subsystem_tlm__to_t *params, isis_aocs__retrieve_single_subsystem_tlm__from_t *response);

/*!
 * Retrieve the latest state estimate frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_state_estimate(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_state_estimate__from_t *response);

/*!
 * Retrieve star tracker telemetry
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_str_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_str_tlm__from_t *response);

/*!
 * Retrieve all subsystem TLM
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_subsystem_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_subsystem_tlm__from_t *response);

/*!
 * Retrieve the current system status
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_system_status(uint8_t index, isis_aocs__tlm_entry_last_pps_sample_t entry_in, isis_aocs__retrieve_system_status__from_t *response);

/*!
 * Retrieve TLM from a single subsystem interpreted as thruster HK
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] entry_in Telemetry entry
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__retrieve_thr_tlm(uint8_t index, isis_aocs__tlm_entry_last_sample_t entry_in, isis_aocs__retrieve_thr_tlm__from_t *response);

/*!
 * Bypass the controller to set the RW actuation
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] speed_length Length of input struct member 'speed' in number of elements, maximum value: 4
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__rw_set_bypass(uint8_t index, const isis_aocs__rw_set_bypass__to_t *params, size_t speed_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Bypass the controller to set the RW actuation to a specific duty cycle
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__rw_set_bypass_duty_cycle(uint8_t index, const isis_aocs__rw_set_bypass_duty_cycle__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Disable the RW actuation bypass and use the controller output
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__rw_set_bypass_off(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Bypass the controller to set the RW actuation to a specific RPM
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__rw_set_bypass_rpm(uint8_t index, const isis_aocs__rw_set_bypass_rpm__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Issue the Config Save command to the SCG
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__scg_config_save(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Get the status of the firmware
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__scg_get_fw_status(uint8_t index, isis_aocs__scg_get_fw_status__from_t *response);

/*!
 * Get the latest SCG raw data response
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__scg_get_system_output(uint8_t index, isis_aocs__scg_get_system_output__from_t *response);

/*!
 * Load SCG config into RAM FP SCG_CONFIG (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__scg_load_config(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Reboot the SCG and recover it into firmware slot 0 (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__scg_recover_fw(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Send a request to the SCG for the raw gyro data (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code (tc dependent)
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__scg_request_system_output(uint8_t index, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Select a firmware to boot (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] fw_index_in Firmware index
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__scg_select_fw(uint8_t index, uint8_t fw_index_in, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Start an SCG firmware update (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__scg_update_fw(uint8_t index, const isis_aocs__scg_update_fw__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Set the AOCS control target
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] target_in Control target
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_control_target(uint8_t index, isis_aocs__control_target_generic_t target_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the AOCS control target for multiple operating modes
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] params_length Length of input struct member 'params' in number of elements, maximum value: 44
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_control_target_for_modes(uint8_t index, const isis_aocs__set_control_target_for_modes__to_t *params, size_t params_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the AOCS control target to a ground-speed reduction manoeuvre
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] target_in Control target
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_control_target_gsr(uint8_t index, isis_aocs__control_target_gsr_t target_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the AOCS control target to an offset-LVLH frame
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] target_in Control target
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_control_target_lvlh(uint8_t index, isis_aocs__control_target_lvlh_t target_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the AOCS control target to an inertial quaternion
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] target_in Control target
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_control_target_quat(uint8_t index, isis_aocs__control_target_quat_t target_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the AOCS control target to a spin around a body axis
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] target_in Control target
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_control_target_spin(uint8_t index, isis_aocs__control_target_spin_t target_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Updates the external magnetometer mounting from one of the preconfigured mappings from the MTM_EXT_MOUNTING_STATES flight parameter. The update is propagated to the AOCS_MTM_EXT_MOUNTING flight parameter, immediately applied to the AOCS processing, and queued for committing to non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] deployment_in IMTM deployment status
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_mtm_deployment(uint8_t index, isis_aocs__deployment_t deployment_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set all AOCS processing flight parameters related to magnetometer selection for all operating modes to the specified magnetometer, apply the change to AOCS processing immediately, and queue the parameter update for committing to non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] source_in Magnetometer source
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_mtm_source(uint8_t index, isis_aocs__mtm_source_t source_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set current operating mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_operating_mode(uint8_t index, const isis_aocs__set_operating_mode__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param(uint8_t index, const isis_aocs__set_param__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as one float in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_1f(uint8_t index, const isis_aocs__set_param_1f__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as two floats in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_2f(uint8_t index, const isis_aocs__set_param_2f__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as three floats in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_3f(uint8_t index, const isis_aocs__set_param_3f__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as four floats in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_4f(uint8_t index, const isis_aocs__set_param_4f__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as ASCII in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_ascii(uint8_t index, const isis_aocs__set_param_ascii__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set Auriga configuration in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] data_in Data to write
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_auriga(uint8_t index, isis_aocs__auriga_config_t data_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as bias estimator options in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_bias_estimator(uint8_t index, const isis_aocs__set_param_bias_estimator__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set AOCS control target for a specific mode in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_control_target(uint8_t index, const isis_aocs__set_param_control_target__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Change AOCS control target axis of primary target for a specific mode in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_control_target_axis(uint8_t index, const isis_aocs__set_param_control_target_axis__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Change AOCS control target WGS84 LLA coordinates of primary target for a specific mode in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_control_target_lla(uint8_t index, const isis_aocs__set_param_control_target_lla__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set AOCS control target to an offset LVLH-frame for a specific mode in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_control_target_lvlh(uint8_t index, const isis_aocs__set_param_control_target_lvlh__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set AOCS control target to an inertial quaternion for a specific mode in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_control_target_quat(uint8_t index, const isis_aocs__set_param_control_target_quat__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set CubeWheel configuration in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_cubewheel(uint8_t index, const isis_aocs__set_param_cubewheel__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as float in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_f(uint8_t index, const isis_aocs__set_param_f__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter by index
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_generic(uint8_t index, const isis_aocs__set_param_generic__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set a single log config in the GNSS_LOG_CONFIG flight parameter
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_gnss_log_config(uint8_t index, const isis_aocs__set_param_gnss_log_config__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as HEX32 in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_hex32(uint8_t index, const isis_aocs__set_param_hex32__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set IMTQ configuration in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] data_in Data to write
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_imtq(uint8_t index, isis_aocs__imtq_config_t data_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as INT8 in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_int32(uint8_t index, const isis_aocs__set_param_int32__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set operating mode subsystem auto power in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_operating_mode_subsys_auto_power(uint8_t index, const isis_aocs__set_param_operating_mode_subsys_auto_power__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set operating mode switch delay in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_operating_mode_switch_delay(uint8_t index, const isis_aocs__set_param_operating_mode_switch_delay__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set part of a flight parameter in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 160
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_partial(uint8_t index, const isis_aocs__set_param_partial__to_t *params, size_t data_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set part of a flight parameter interpreted as float in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 8
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_partial_f(uint8_t index, const isis_aocs__set_param_partial_f__to_t *params, size_t data_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set part of a flight parameter by index in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 160
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_partial_generic(uint8_t index, const isis_aocs__set_param_partial_generic__to_t *params, size_t data_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set part of a flight parameter interpreted as HEX32 in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 8
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_partial_hex32(uint8_t index, const isis_aocs__set_param_partial_hex32__to_t *params, size_t data_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set part of a flight parameter interpreted as INT8 in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 8
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_partial_int32(uint8_t index, const isis_aocs__set_param_partial_int32__to_t *params, size_t data_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set part of a flight parameter interpreted as UINT32 in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 8
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_partial_uint32(uint8_t index, const isis_aocs__set_param_partial_uint32__to_t *params, size_t data_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set Astrofein RW25 configuration
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] data_in Data to write
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_rw25(uint8_t index, isis_aocs__af_rw25_config_t data_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set SCG configuration in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] data_in Data read
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_scg(uint8_t index, isis_aocs__scg_config_t data_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as sensors bitfield in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_sensors(uint8_t index, const isis_aocs__set_param_sensors__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set operating mode required subsystems in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_subsys_required(uint8_t index, const isis_aocs__set_param_subsys_required__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Change value of THR_CONFIG parameter
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] data_in Data to write
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_thr_config(uint8_t index, isis_aocs__enp_config_t data_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Change value of THR_FAULT_CONFIG parameter to disable thruster FDIR
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_thr_disable_fdir(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Change value of heater_mode in THR_CONFIG parameter
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] heater_mode_in Heater mode for last heating plateau and hot standby (manual = open loop, closed loop otherwise)
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_thr_heater_mode(uint8_t index, isis_aocs__enpulsion_heatermode_t heater_mode_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Change value of THR_STATE_CONFIG parameter
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] data_in Data to write
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_thr_state_config(uint8_t index, isis_aocs__enp_state_config_t data_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set flight parameter interpreted as UINT32 in volatile memory and queue it for non-volatile memory
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_param_uint32(uint8_t index, const isis_aocs__set_param_uint32__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set the mode for a subsystem
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_subsystem_mode(uint8_t index, const isis_aocs__set_subsystem_mode__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Switch only the power for a subsystem, bypassing all subsystem handling such as configuration and keeping the subsystem state machine in current state
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_subsystem_power_bypass(uint8_t index, const isis_aocs__set_subsystem_power_bypass__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Set time for the internal clock
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] epoch_in Time since the UNIX epoch
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__set_time(uint8_t index, uint64_t epoch_in, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Access the TDD backend when running in simulation mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 64
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tdd(uint8_t index, const isis_aocs__tdd__to_t *params, size_t data_length, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Delay a task when running in simulation mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tdd_delay_task(uint8_t index, const isis_aocs__tdd_delay_task__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Deploy a deployable when running in simulation mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tdd_deploy(uint8_t index, const isis_aocs__tdd_deploy__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Set subsystem error when running in simulation mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tdd_set_subsys_error(uint8_t index, const isis_aocs__tdd_set_subsys_error__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Spoof ADC measurements when running in simulation mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tdd_spoof_adc(uint8_t index, const isis_aocs__tdd_spoof_adc__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Spoof MTM measurements when running in simulation mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tdd_spoof_mtm(uint8_t index, const isis_aocs__tdd_spoof_mtm__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Spoof MTM_EXT measurements when running in simulation mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tdd_spoof_mtm_ext(uint8_t index, const isis_aocs__tdd_spoof_mtm_ext__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Verify thruster password
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__thr_check_password(uint8_t index, const isis_aocs__thr_check_password__to_t *params, isis_aocs__thr_check_password__from_t *response);

/*!
 * Set thruster password (threaded)
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__thr_set_password(uint8_t index, const isis_aocs__thr_set_password__to_t *params, isis_aocs__threaded_cmd_result_t *error_code_out);

/*!
 * Arm thruster
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tm_arm_firing(uint8_t index, const isis_aocs__tm_arm_firing__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Clear thruster errors
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tm_clear_errors(uint8_t index, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Start thruster commissioning
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tm_start_commissioning(uint8_t index, const isis_aocs__tm_start_commissioning__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Start firing thruster
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tm_start_firing(uint8_t index, const isis_aocs__tm_start_firing__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Start ground test mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tm_start_ground_test(uint8_t index, const isis_aocs__tm_start_ground_test__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Stop thruster commissioning
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tm_stop_commissioning(uint8_t index, const isis_aocs__tm_stop_commissioning__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Stop firing thruster
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tm_stop_firing(uint8_t index, const isis_aocs__tm_stop_firing__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Stop ground test mode
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__tm_stop_ground_test(uint8_t index, const isis_aocs__tm_stop_ground_test__to_t *params, isis_aocs__generic_error_code_t *error_code_out);

/*!
 * Transfer chunk to AOCS
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response_out Generic file response
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__up_chunk(uint8_t index, const isis_aocs__up_chunk__to_t *params, isis_aocs__file_generic_response_t *response_out);

/*!
 * Start file upload
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response_out Generic file response
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__up_start(uint8_t index, const isis_aocs__up_start__to_t *params, isis_aocs__file_generic_response_t *response_out);

/*!
 * Start storing file
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response_out Generic file response
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__up_store(uint8_t index, const isis_aocs__up_store__to_t *params, isis_aocs__file_generic_response_t *response_out);

/*!
 * Verify the result of the file store operation
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__up_verify(uint8_t index, const isis_aocs__up_verify__to_t *params, isis_aocs__up_verify__from_t *response);

/*!
 * Update the TLE used in the AOCS algorithms and store in FRAM
 *
 * @param[in] index Index of ISIS_AOCS in list provided during driver initialization
 * @param[in] tle_in TLE to set
 * @param[out] error_code_out Result code
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_aocs__update_tle(uint8_t index, isis_aocs__tle_t tle_in, isis_aocs__threaded_cmd_result_t *error_code_out);

#ifdef __cplusplus
}
#endif

#endif /* ISIS_AOCS_H_ */

