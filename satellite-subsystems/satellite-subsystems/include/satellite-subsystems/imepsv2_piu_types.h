/*
 * imepsv2_piu_types.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 *
 * Generated from: imepsv2_piu.yaml
 */

#ifndef IMEPSV2_PIU_TYPES_H_
#define IMEPSV2_PIU_TYPES_H_

#include <stddef.h>
#include <stdint.h>

/* DEFINES */

#define IMEPSV2_PIU_CANCEL_ID 0x0004051A
#define IMEPSV2_PIU_SETCONFIGURATIONPARAMETER_ID 0x0084051A
#define IMEPSV2_PIU_SAVECONFIGURATION_ID 0x0094051A
#define IMEPSV2_PIU_RESETWATCHDOG_ID 0x0006051A
#define IMEPSV2_PIU_RESETCONFIGURATIONPARAMETER_ID 0x0086051A
#define IMEPSV2_PIU_RESETCONFIGURATION_ID 0x0090051A
#define IMEPSV2_PIU_RESET_ID 0x00AA051A
#define IMEPSV2_PIU_OUTPUTBUSGROUPSTATE_ID 0x0014051A
#define IMEPSV2_PIU_OUTPUTBUSGROUPON_ID 0x0010051A
#define IMEPSV2_PIU_OUTPUTBUSGROUPOFF_ID 0x0012051A
#define IMEPSV2_PIU_OUTPUTBUSCHANNELON_ID 0x0016051A
#define IMEPSV2_PIU_SWITCHTONOMINAL_ID 0x0030051A
#define IMEPSV2_PIU_OUTPUTBUSCHANNELOFF_ID 0x0018051A
#define IMEPSV2_PIU_LOADCONFIGURATION_ID 0x0092051A
#define IMEPSV2_PIU_GETSYSTEMSTATUS_ID 0x0040051A
#define IMEPSV2_PIU_GETOVERCURRENTFAULTSTATE_ID 0x0042051A
#define IMEPSV2_PIU_GETHOUSEKEEPINGRUNNINGAVG_ID 0x00A4051A
#define IMEPSV2_PIU_GETHOUSEKEEPINGRAWINCDB_ID 0x00A0051A
#define IMEPSV2_PIU_GETHOUSEKEEPINGRAW_ID 0x00A0051A
#define IMEPSV2_PIU_GETHOUSEKEEPINGENGRUNNINGAVGINCDB_ID 0x00A4051A
#define IMEPSV2_PIU_GETHOUSEKEEPINGENGINCDB_ID 0x00A2051A
#define IMEPSV2_PIU_GETHOUSEKEEPINGENG_ID 0x00A2051A
#define IMEPSV2_PIU_GETCONFIGURATIONPARAMETER_ID 0x0082051A
#define IMEPSV2_PIU_NOP_ID 0x0002051A
#define IMEPSV2_PIU_SWITCHTOSAFETY_ID 0x0032051A


/* ENUMS */

/*!
 * Enumeration of all iMEPS channels
 */
typedef enum __attribute__ ((__packed__)) imepsv2_piu__imeps_channel_t
{
    imepsv2_piu__imeps_channel__channel_16v_perm = 0,
    imepsv2_piu__imeps_channel__channel_5v_perm = 1,
    imepsv2_piu__imeps_channel__channel_5v_sw1 = 2,
    imepsv2_piu__imeps_channel__channel_5v_sw2 = 3,
    imepsv2_piu__imeps_channel__channel_5v_sw3 = 4,
    imepsv2_piu__imeps_channel__channel_3v3_perm = 5,
    imepsv2_piu__imeps_channel__channel_3v3_sw1 = 6,
    imepsv2_piu__imeps_channel__channel_3v3_sw2 = 7,
    imepsv2_piu__imeps_channel__channel_3v3_sw3 = 8,
} imepsv2_piu__imeps_channel_t;

/* STRUCTS */

/*!
 *  IMEPSV2_PIU instance structure
 */
typedef struct
{
    uint8_t i2cAddr; /*!< I2C address used for this instance */
} IMEPSV2_PIU_t;

/*!
 * Union for storing the parameters for struct ReplyHeader.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__replyheader_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        uint8_t stid; /*!< See "System Type Identifier (STID)" (page 22) */
        uint8_t ivid; /*!< See "Interface Version Identifier (IVID)" (page 23) */
        uint8_t rc; /*!< See "Board Identifier (BID)" (page 24) */
        uint8_t bid; /*!< Response code as stated in the header (inside parenthesis). */
        uint8_t cmderr : 4; /*!< See "Response Status Information (STAT)" (page 25) */
        uint8_t reserved : 3; /*!< See "Response Status Information (STAT)" (page 25) */
        uint8_t new_flag : 1; /*!< See "Response Status Information (STAT)" (page 25) */
    } fields;
} imepsv2_piu__replyheader_t;

/*!
 * Union for storing the parameters for struct VIPDraw.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__vipdraw_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        int16_t volt; /*!< To be defined */
        int16_t current; /*!< To be defined */
        int16_t power; /*!< To be defined */
    } fields;
} imepsv2_piu__vipdraw_t;

/*!
 * Union for storing the parameters for struct VIPDeng.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__vipdeng_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        int16_t volt; /*!< To be defined */
        int16_t current; /*!< To be defined */
        int16_t power; /*!< To be defined */
    } fields;
} imepsv2_piu__vipdeng_t;

/*!
 * Union for storing the parameters for struct CCSDraw.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__ccsdraw_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint16_t volt_in_mppt; /*!< To be defined */
        uint16_t curr_in_mppt; /*!< To be defined */
        uint16_t volt_out_mppt; /*!< To be defined */
        uint16_t curr_out_mppt; /*!< To be defined */
    } fields;
} imepsv2_piu__ccsdraw_t;

/*!
 * Union for storing the parameters for struct CCSDeng.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__ccsdeng_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        int16_t volt_in_mppt; /*!< To be defined */
        int16_t curr_in_mppt; /*!< To be defined */
        int16_t volt_out_mppt; /*!< To be defined */
        int16_t curr_out_mppt; /*!< To be defined */
    } fields;
} imepsv2_piu__ccsdeng_t;

/*!
 * Union for storing the parameters received by GetConfigurationParameter.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__getconfigurationparameter__from_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< To be defined */
        uint8_t reserved; /*!< To be defined */
        uint16_t par_id; /*!< parameter id of the parameter to get */
        uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
    } fields;
} imepsv2_piu__getconfigurationparameter__from_t;

/*!
 * Union for storing the parameters received by GetHousekeepingEng.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__gethousekeepingeng__from_t
{
    unsigned char raw[116];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
        imepsv2_piu__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        imepsv2_piu__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        uint16_t bat_stat; /*!< Bitflag field indicating BP board */
        int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
        imepsv2_piu__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__ccsdeng_t cc1; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc2; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc3; /*!< Data on conditioning chain */
    } fields;
} imepsv2_piu__gethousekeepingeng__from_t;

/*!
 * Union for storing the parameters received by GetHousekeepingEngIncDB.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__gethousekeepingengincdb__from_t
{
    unsigned char raw[174];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
        imepsv2_piu__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        imepsv2_piu__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        uint16_t bat_stat; /*!< Bitflag field indicating BP board */
        int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
        imepsv2_piu__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__ccsdeng_t cc1; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc2; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc3; /*!< Data on conditioning chain */
        imepsv2_piu__vipdeng_t vip_obc09; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc10; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc11; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc12; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc13; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc14; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc15; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__ccsdeng_t cc4; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc5; /*!< Data on conditioning chain */
    } fields;
} imepsv2_piu__gethousekeepingengincdb__from_t;

/*!
 * Union for storing the parameters received by GetHousekeepingEngRunningAvgIncDB.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__gethousekeepingengrunningavgincdb__from_t
{
    unsigned char raw[174];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
        imepsv2_piu__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        imepsv2_piu__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        uint16_t bat_stat; /*!< Bitflag field indicating BP board */
        int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
        imepsv2_piu__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__ccsdeng_t cc1; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc2; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc3; /*!< Data on conditioning chain */
        imepsv2_piu__vipdeng_t vip_obc09; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc10; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc11; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc12; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc13; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc14; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc15; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__ccsdeng_t cc4; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc5; /*!< Data on conditioning chain */
    } fields;
} imepsv2_piu__gethousekeepingengrunningavgincdb__from_t;

/*!
 * Union for storing the parameters received by GetHousekeepingRaw.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__gethousekeepingraw__from_t
{
    unsigned char raw[116];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        uint16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        uint16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
        imepsv2_piu__vipdraw_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        imepsv2_piu__vipdraw_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        uint16_t bat_stat; /*!< Bitflag field indicating BP board */
        uint16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        uint16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        uint16_t volt_vd0; /*!< Voltage of voltage domain 0 in raw form */
        uint16_t volt_vd1; /*!< Voltage of voltage domain 1 in raw form */
        uint16_t volt_vd2; /*!< Voltage of voltage domain 2 in raw form */
        imepsv2_piu__vipdraw_t vip_obc00; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc01; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc02; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc03; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc04; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc05; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc06; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc07; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc08; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__ccsdraw_t cc1; /*!< Data on conditioning chain in raw form. */
        imepsv2_piu__ccsdraw_t cc2; /*!< Data on conditioning chain in raw form. */
        imepsv2_piu__ccsdraw_t cc3; /*!< Data on conditioning chain in raw form. */
    } fields;
} imepsv2_piu__gethousekeepingraw__from_t;

/*!
 * Union for storing the parameters received by GetHousekeepingRawIncDB.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__gethousekeepingrawincdb__from_t
{
    unsigned char raw[174];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        uint16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        uint16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
        imepsv2_piu__vipdraw_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        imepsv2_piu__vipdraw_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        uint16_t bat_stat; /*!< Bitflag field indicating BP board */
        uint16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        uint16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        uint16_t volt_vd0; /*!< Voltage of voltage domain 0 in raw form */
        uint16_t volt_vd1; /*!< Voltage of voltage domain 1 in raw form */
        uint16_t volt_vd2; /*!< Voltage of voltage domain 2 in raw form */
        imepsv2_piu__vipdraw_t vip_obc00; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc01; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc02; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc03; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc04; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc05; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc06; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc07; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc08; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__ccsdraw_t cc1; /*!< Data on conditioning chain in raw form. */
        imepsv2_piu__ccsdraw_t cc2; /*!< Data on conditioning chain in raw form. */
        imepsv2_piu__ccsdraw_t cc3; /*!< Data on conditioning chain in raw form. */
        imepsv2_piu__vipdraw_t vip_obc09; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc10; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc11; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc12; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc13; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc14; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__vipdraw_t vip_obc15; /*!< Output V, I and P of output bus channel in raw form */
        imepsv2_piu__ccsdraw_t cc4; /*!< Data on conditioning chain in raw form. */
        imepsv2_piu__ccsdraw_t cc5; /*!< Data on conditioning chain in raw form. */
    } fields;
} imepsv2_piu__gethousekeepingrawincdb__from_t;

/*!
 * Union for storing the parameters received by GetHousekeepingRunningAvg.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__gethousekeepingrunningavg__from_t
{
    unsigned char raw[116];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        uint16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
        imepsv2_piu__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        imepsv2_piu__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        uint16_t bat_stat; /*!< Bitflag field indicating BP board */
        int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
        imepsv2_piu__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
        imepsv2_piu__ccsdeng_t cc1; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc2; /*!< Data on conditioning chain */
        imepsv2_piu__ccsdeng_t cc3; /*!< Data on conditioning chain */
    } fields;
} imepsv2_piu__gethousekeepingrunningavg__from_t;

/*!
 * Union for storing the parameters received by GetOvercurrentFaultState.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__getovercurrentfaultstate__from_t
{
    unsigned char raw[42];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< To be defined */
        uint8_t reserved; /*!< To be defined */
        uint16_t stat_ob_on; /*!< To be defined */
        uint16_t stat_ob_ocf; /*!< To be defined */
        uint16_t ocf_cnt_obc00; /*!< To be defined */
        uint16_t ocf_cnt_obc01; /*!< To be defined */
        uint16_t ocf_cnt_obc02; /*!< To be defined */
        uint16_t ocf_cnt_obc03; /*!< To be defined */
        uint16_t ocf_cnt_obc04; /*!< To be defined */
        uint16_t ocf_cnt_obc05; /*!< To be defined */
        uint16_t ocf_cnt_obc06; /*!< To be defined */
        uint16_t ocf_cnt_obc07; /*!< To be defined */
        uint16_t ocf_cnt_obc08; /*!< To be defined */
        uint16_t ocf_cnt_obc09; /*!< To be defined */
        uint16_t ocf_cnt_obc10; /*!< To be defined */
        uint16_t ocf_cnt_obc11; /*!< To be defined */
        uint16_t ocf_cnt_obc12; /*!< To be defined */
        uint16_t ocf_cnt_obc13; /*!< To be defined */
        uint16_t ocf_cnt_obc14; /*!< To be defined */
        uint16_t ocf_cnt_obc15; /*!< To be defined */
    } fields;
} imepsv2_piu__getovercurrentfaultstate__from_t;

/*!
 * Union for storing the parameters received by GetSystemStatus.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__getsystemstatus__from_t
{
    unsigned char raw[26];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< To be defined */
        uint8_t mode; /*!< Indicates the current mode of the system. */
        uint8_t conf; /*!< Read/write configuration parameters have been changed by the EPS master since the last parameters load/save operation */
        uint8_t reset_cause; /*!< Cause of last reset. */
        uint32_t uptime; /*!< To be defined */
        uint16_t error; /*!< To be defined */
        uint16_t rc_cnt_pwron; /*!< To be defined */
        uint16_t rc_cnt_wdg; /*!< To be defined */
        uint16_t rc_cnt_cmd; /*!< To be defined */
        uint16_t rc_cnt_pweron_mcu; /*!< To be defined */
        uint16_t rc_cnt_emlopo; /*!< To be defined */
        uint16_t prevcmd_elapsed; /*!< To be defined */
    } fields;
} imepsv2_piu__getsystemstatus__from_t;

/*!
 * Union for storing the parameters received by ResetConfigurationParameter.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__resetconfigurationparameter__from_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< To be defined */
        uint8_t reserved; /*!< To be defined */
        uint16_t par_id; /*!< parameter id of the parameter to get */
        uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
    } fields;
} imepsv2_piu__resetconfigurationparameter__from_t;

/*!
 * Union for storing the parameters sent by SaveConfiguration.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__saveconfiguration__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        uint16_t checksum; /*!< To force save this value can be set to 0. The save will then proceed without performing CRC verification. */
    } fields;
} imepsv2_piu__saveconfiguration__to_t;

/*!
 * Union for storing the parameters sent by SetConfigurationParameter.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__setconfigurationparameter__to_t
{
    unsigned char raw[10];
    struct __attribute__ ((__packed__))
    {
        uint16_t par_id; /*!< parameter id of the parameter to get */
        uint8_t par_val[8]; /*!< new parameter value encompassing n bytes. The length depends on the parameter type. */
    } fields;
} imepsv2_piu__setconfigurationparameter__to_t;

/*!
 * Union for storing the parameters received by SetConfigurationParameter.
 */
typedef union __attribute__((__packed__)) _imepsv2_piu__setconfigurationparameter__from_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        imepsv2_piu__replyheader_t reply_header; /*!< To be defined */
        uint8_t reserved; /*!< To be defined */
        uint16_t par_id; /*!< parameter id of the parameter to get */
        uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
    } fields;
} imepsv2_piu__setconfigurationparameter__from_t;

#endif /* IMEPSV2_PIU_TYPES_H_ */

