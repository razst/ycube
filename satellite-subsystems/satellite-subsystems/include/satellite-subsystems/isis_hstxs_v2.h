/*
 * isis_hstxs_v2.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated ICD version: 2.0
 * Generated from:
 *  - isis_hstxs_icd_v2.yaml
 *  - isis_hstxs_sup_icd_v2.yaml
 */

#ifndef ISIS_HSTXS_V2_H_
#define ISIS_HSTXS_V2_H_

#include "isis_hstxs_v2_types.h"
#include <satellite-subsystems/common_types.h>

#ifdef __cplusplus
extern "C"
{
#endif

/*!
 *	Initialize driver for a number of ISIS_HSTXS_V2 instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] isis_hstxs_v2 Pointer to array of ISIS_HSTXS_V2 instances
 *	@param[in] isis_hstxs_v2Count Number of ISIS_HSTXS_V2 instances pointed to by isis_hstxs_v2 input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t ISIS_HSTXS_V2_Init(const ISIS_HSTXS_V2_t* isis_hstxs_v2, uint8_t isis_hstxs_v2Count);

/*!
 * Clears the I2C WDT
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__clear_i2cswdt(uint8_t index);

/*!
 * Gets current ASM value
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] val_asm_out ASM value 32 bits
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_asm_value(uint8_t index, uint32_t *val_asm_out);

/*!
 * Gets lock and frequency error counters.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_error_counters(uint8_t index, isis_hstxs_v2__get_error_counters__from_t *response);

/*!
 * Gets Fabric version.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] version_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_fabric_version(uint8_t index, uint32_t *version_out);

/*!
 * Gets the general status.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_general_status(uint8_t index, isis_hstxs_v2__get_general_status__from_t *response);

/*!
 * Gets Master Channel counter.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] counter_out Master Channel Counter
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_master_channel_counter(uint8_t index, uint8_t *counter_out);

/*!
 * Gets the Modulator CT_CAL register.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] value_out Raw value complete 16 bit range.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_modulator_ct_cal_register(uint8_t index, uint16_t *value_out);

/*!
 * Retrieve the MSS power time
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] mssPwrTime_out Amount of time the MSS has been powered, in seconds
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_mss_pwrtime(uint8_t index, uint32_t *mssPwrTime_out);

/*!
 * Get the MSS version.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] version_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_mss_version(uint8_t index, uint32_t *version_out);

/*!
 * Gets the status of the transmitter engine
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_readstatus2(uint8_t index, isis_hstxs_v2__get_readstatus2__from_t *response);

/*!
 * Gets READSTATUS3, value from register READSTATUS3_REG
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] reserved_in 
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_readstatus3(uint8_t index, uint32_t reserved_in);

/*!
 * Gets SPI FIFO error counter
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] counter_out SPI FIFO error counter
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_spi_fifo_error_counter(uint8_t index, uint32_t *counter_out);

/*!
 * Get status of last SET Default Backup settings command.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] command_status_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_status_of_last_set_default_backup_settings_command(uint8_t index, isis_hstxs_v2__command_status_code_t *command_status_out);

/*!
 * Get status of last SET Default settings command
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] command_status_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_status_of_last_set_default_settings_command(uint8_t index, isis_hstxs_v2__command_status_code_t *command_status_out);

/*!
 * Retrieve the current supervisor status
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] supervisor_status_out Supervisor status flags
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_sup_status(uint8_t index, isis_hstxs_v2__supervisor_status_t *supervisor_status_out);

/*!
 * Retrieve the supervisor uptime
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] uptime_out Uptime of the supervisor, in seconds
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_sup_uptime(uint8_t index, uint32_t *uptime_out);

/*!
 * Retrieve the current supervisor status
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] revision_out Supervisor Revision Number
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_sup_version(uint8_t index, uint16_t *revision_out);

/*!
 * Retrieve housekeeping telemetry from the supervisor
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_telemetry(uint8_t index, isis_hstxs_v2__get_telemetry__from_t *response);

/*!
 * Gets the transmission frequency.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] freq_out Frequency in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_tx_frequency(uint8_t index, uint32_t *freq_out);

/*!
 * Gets the MSS uptime.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] uptime_out MSS uptime in seconds
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_uptime(uint8_t index, uint32_t *uptime_out);

/*!
 * Gets Virtual Channel counter.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] counter_out Virtual Channel Counter
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter(uint8_t index, uint8_t *counter_out);

/*!
 * Gets Virtual Channel Counter 0, value from register VIRTUALCH_CONT0_REG.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] count_out Virtual Channel Counter 0.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter_0(uint8_t index, uint32_t *count_out);

/*!
 * Gets Virtual Channel Counter 1, value from register VIRTUALCH_CONT1_REG.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] count_out Virtual Channel Counter 1.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter_1(uint8_t index, uint32_t *count_out);

/*!
 * Gets Virtual Channel Counter 2, value from register VIRTUALCH_CONT2_REG.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] count_out Virtual Channel Counter 2.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter_2(uint8_t index, uint32_t *count_out);

/*!
 * Gets Virtual Channel Counter 3, value from register VIRTUALCH_CONT3_REG.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] count_out Virtual Channel Counter 3.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter_3(uint8_t index, uint32_t *count_out);

/*!
 * Gets Virtual Channel Counter 4, value from register VIRTUALCH_CONT4_REG.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] count_out Virtual Channel Counter 4.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter_4(uint8_t index, uint32_t *count_out);

/*!
 * Gets Virtual Channel Counter 5, value from register VIRTUALCH_CONT5_REG.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] count_out Virtual Channel Counter 5.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter_5(uint8_t index, uint32_t *count_out);

/*!
 * Gets Virtual Channel Counter 6, value from register VIRTUALCH_CONT6_REG.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] count_out Virtual Channel Counter 6.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter_6(uint8_t index, uint32_t *count_out);

/*!
 * Gets Virtual Channel Counter 7, value from register VIRTUALCH_CONT7_REG.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] count_out Virtual Channel Counter 7.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_virtual_channel_counter_7(uint8_t index, uint32_t *count_out);

/*!
 * Retrieve the current supervisor status
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] counter_out WDT Kick Counter
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__get_wdt_kick_counter(uint8_t index, uint16_t *counter_out);

/*!
 * Read Default Backup settings from eNVM.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__read_default_backup_settings_from_envm(uint8_t index, isis_hstxs_v2__read_default_backup_settings_from_envm__from_t *response);

/*!
 * Read Default settings from eNVM.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__read_default_settings_from_envm(uint8_t index, isis_hstxs_v2__read_default_settings_from_envm__from_t *response);

/*!
 * Perform a reset of the entire subsystem, both the MSS and the supervisor
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__reset(uint8_t index);

/*!
 * Sets Direct Carrier state. In Direct Carrier mode, the TXS outputs a single (CW) carrier at the commanded transmit frequency. This can be useful for LEOP / TLE identification purposes
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] value_in Direct Carrier On/Off State.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_direct_carrier_state(uint8_t index, isis_hstxs_v2__enabled_t value_in);

/*!
 * Enables or disable FECF
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] fecf_in FECF setting
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_fecf(uint8_t index, isis_hstxs_v2__enabled_t fecf_in);

/*!
 * Sets the ASM value in the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] val_asm_in ASM value. Valid range full 32 bits.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_frame_asm_value(uint8_t index, uint32_t val_asm_in);

/*!
 * Sets the SCID value used in the TM Frame Primary Header.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] scid_in SCID value. Valid range full 16 bits.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_frame_scid(uint8_t index, uint16_t scid_in);

/*!
 * Sets the idle frame only mode.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] state_in 0 - disable, 1 - enable
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_idle_frame_only_mode(uint8_t index, isis_hstxs_v2__enabled_t state_in);

/*!
 * Sets the time of initial transmission to wait for the receiver demodulator to lock with the transmitter signal.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] lock_time_in RAW value. Valid range is the full 32 bits. (125000 x locktime in seconds)
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_lock_time(uint8_t index, uint32_t lock_time_in);

/*!
 * Chooses which is the LUT being used by the transmitter.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] lut_in 0 - LUT (0.5), 1 - LUT (0.35)
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_lut_choice(uint8_t index, isis_hstxs_v2__lut_t lut_in);

/*!
 * Sets the transmitter modulation scheme
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] modscheme_in New modulation scheme to be set, BPSK or OQPSK
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_modulation_scheme(uint8_t index, isis_hstxs_v2__modscheme_t modscheme_in);

/*!
 * Sets the Power Control Loop setpoint value (raw DAC value).
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] level_in Raw DAC range value. Valid value from 0 to 4095.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_pcl_setpoint(uint8_t index, uint16_t level_in);

/*!
 * Sets the puncturing level in the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] level_in 1 - 1:2, 2 - 2:3, 3 - 3:4, 4 - 5:6, 7 - 7:8
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_puncturing_level(uint8_t index, uint8_t level_in);

/*!
 * Sets the Reed-Solomon interleave level in the transmitter chain.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] level_in Values: 1-7
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_reed_solomon_interleave_level(uint8_t index, uint8_t level_in);

/*!
 * Sets the mode of the supervisor to supervisor only [MSS not powered] or standby [MSS powered]
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] sup_mode_in Desired supervisor mode
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_standby_mode(uint8_t index, isis_hstxs_v2__sup_mode_t sup_mode_in);

/*!
 * Sets the transmitter symbolrate.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] symbolrate_in New symbolrate to be set, in discrete steps between 1/32 and maximum
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_symbolrate(uint8_t index, isis_hstxs_v2__symbolrate_t symbolrate_in);

/*!
 * Sets the transmission carrier frequency. Note. at least 500 msec must be respected between a command to change frequency and the command to turn on the TX, since the on-board PLL must be given sufficient time to lock.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] freq_in Frequency in kHz. Accepted values 2200000-2290000
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_tx_frequency(uint8_t index, uint32_t freq_in);

/*!
 * Sets the transmitter mode. The command should be used to switch between stand-by mode to tx on mode.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] mode_in New MSS mode, stand-by or transmitter on
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__set_tx_mode(uint8_t index, isis_hstxs_v2__mode_t mode_in);

/*!
 * Store Default Backup settings in eNVM. Password1 0x9CF37B5A - customers
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] command_status_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__store_default_backup_settings_in_envm(uint8_t index, const isis_hstxs_v2__store_default_backup_settings_in_envm__to_t *params, isis_hstxs_v2__command_status_code_t *command_status_out);

/*!
 * Store Default settings in eNVM. Password1 0x9CF37B5A - customers
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] command_status_out 
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__store_default_settings_in_envm(uint8_t index, const isis_hstxs_v2__store_default_settings_in_envm__to_t *params, isis_hstxs_v2__command_status_code_t *command_status_out);

/*!
 * Writes the data to be transmitted into the engine's transmission buffer and asks the engine to transmit it.
 *
 * @param[in] index Index of ISIS_HSTXS_V2 in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 217
 * @param[out] status_out 0x00 - SUCCESS, 0xFF - ERROR
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_hstxs_v2__write_and_send_frame(uint8_t index, const isis_hstxs_v2__write_and_send_frame__to_t *params, size_t data_length, uint8_t *status_out);

#ifdef __cplusplus
}
#endif

#endif /* ISIS_HSTXS_V2_H_ */

