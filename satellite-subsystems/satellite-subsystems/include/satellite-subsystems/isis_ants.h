/*
 * isis_ants.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated from: isis_ants.yaml
 */

#ifndef ISIS_ANTS_H_
#define ISIS_ANTS_H_

#include "isis_ants_types.h"
#include <satellite-subsystems/common_types.h>

#ifdef __cplusplus
extern "C"
{
#endif

/*!
 *	Initialize driver for a number of ISIS_ANTS instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] isis_ants Pointer to array of ISIS_ANTS instances
 *	@param[in] isis_antsCount Number of ISIS_ANTS instances pointed to by isis_ants input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t ISIS_ANTS_Init(const ISIS_ANTS_t* isis_ants, uint8_t isis_antsCount);

/*!
 * Arm the antenna system
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__arm(uint8_t index);

/*!
 * Cancel deployment activation
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__cancel_deploy(uint8_t index);

/*!
 * Cancel independent burn mode
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__cancel_id(uint8_t index);

/*!
 * Performs a reset of the I2C watchdog without performing any other operation
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__clear_wdg(uint8_t index);

/*!
 * Deploy antenna 1
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__deploy1(uint8_t index, uint8_t max_time_in);

/*!
 * Deploy antenna 1 with override
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__deploy1_override(uint8_t index, uint8_t max_time_in);

/*!
 * Deploy antenna 2
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__deploy2(uint8_t index, uint8_t max_time_in);

/*!
 * Deploy antenna 2 with override
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__deploy2_override(uint8_t index, uint8_t max_time_in);

/*!
 * Deploy antenna 3
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__deploy3(uint8_t index, uint8_t max_time_in);

/*!
 * Deploy antenna 3 with override
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__deploy3_override(uint8_t index, uint8_t max_time_in);

/*!
 * Deploy antenna 4
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__deploy4(uint8_t index, uint8_t max_time_in);

/*!
 * Deploy antenna 4 with override
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__deploy4_override(uint8_t index, uint8_t max_time_in);

/*!
 * Disarm the antenna system
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__disarm(uint8_t index);

/*!
 * Obtain ISIS Antenna Systems all telemetry structure.
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_all_telemetry(uint8_t index, isis_ants__get_all_telemetry__from_t *response);

/*!
 * Report antenna 1 deployment system activation count
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] deploy_count_out antenna deployment activation count
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_deploy1_count(uint8_t index, uint8_t *deploy_count_out);

/*!
 * Report antenna 1 deployment activation time
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] deploy_time_out
 * @parblock
 * antenna activation time
 *
 * conversion: eng. value = 0.05 * raw 
 * @endparblock
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_deploy1_time(uint8_t index, uint16_t *deploy_time_out);

/*!
 * Report antenna 2 deployment system activation count
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] deploy_count_out antenna deployment activation count
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_deploy2_count(uint8_t index, uint8_t *deploy_count_out);

/*!
 * Report antenna 2 deployment activation time
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] deploy_time_out
 * @parblock
 * antenna activation time
 *
 * conversion: eng. value = 0.05 * raw 
 * @endparblock
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_deploy2_time(uint8_t index, uint16_t *deploy_time_out);

/*!
 * Report antenna 3 deployment system activation count
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] deploy_count_out antenna deployment activation count
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_deploy3_count(uint8_t index, uint8_t *deploy_count_out);

/*!
 * Report antenna 3 deployment activation time
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] deploy_time_out
 * @parblock
 * antenna activation time
 *
 * conversion: eng. value = 0.05 * raw 
 * @endparblock
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_deploy3_time(uint8_t index, uint16_t *deploy_time_out);

/*!
 * Report antenna 4 deployment system activation count
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] deploy_count_out antenna deployment activation count
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_deploy4_count(uint8_t index, uint8_t *deploy_count_out);

/*!
 * Report antenna 4 deployment activation time
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] deploy_time_out
 * @parblock
 * antenna activation time
 *
 * conversion: eng. value = 0.05 * raw 
 * @endparblock
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_deploy4_time(uint8_t index, uint16_t *deploy_time_out);

/*!
 * Get independent burn time left
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] uptime_out Independent burn time left
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_idtimeleft(uint8_t index, uint16_t *uptime_out);

/*!
 * Report deployment status
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_status(uint8_t index, isis_ants__get_status__from_t *response);

/*!
 * Measure antenna system temperature
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_temperature(uint8_t index, isis_ants__get_temperature__from_t *response);

/*!
 * Obtain ISIS Antenna Systems uptime value.
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[out] uptime_out ISIS Antenna Systems uptime value in seconds
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__get_uptime(uint8_t index, uint32_t *uptime_out);

/*!
 * Reset the board
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__reset(uint8_t index);

/*!
 * Start automated sequential antenna deployment
 *
 * @param[in] index Index of ISIS_ANTS in list provided during driver initialization
 * @param[in] max_time_in maximum antenna deployment activation time
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_ants__start_auto_deploy(uint8_t index, uint8_t max_time_in);

#ifdef __cplusplus
}
#endif

#endif /* ISIS_ANTS_H_ */

