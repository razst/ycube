/*
 * isis_hstxs_types.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.0.0
 *
 * Generated ICD version: 1.2
 * Generated from:
 *  - isis_hstxs.yaml
 *  - isis_hstxs_sup.yaml
 */

#ifndef ISIS_HSTXS_TYPES_H_
#define ISIS_HSTXS_TYPES_H_

#include <stddef.h>
#include <stdint.h>

/* DEFINES */

#define ISIS_HSTXS_SET_TX_FREQUENCY_ID 0xA0
#define ISIS_HSTXS_SET_SUP_MODE_ID 0xA0
#define ISIS_HSTXS_SET_ATTENUATOR_LEVEL_ID 0xA1
#define ISIS_HSTXS_SET_MODULATOR_OUTPUT_POWER_ID 0xA2
#define ISIS_HSTXS_SET_SYMBOLRATE_ID 0xA4
#define ISIS_HSTXS_SET_MODULATION_SCHEME_ID 0xA5
#define ISIS_HSTXS_SET_FRAME_ASM_VALUE_ID 0xA7
#define ISIS_HSTXS_SET_SERIAL_DAC_LEVEL_ID 0xA8
#define ISIS_HSTXS_SET_MODULATOR_CT_CAL_REGISTER_ID 0xA9
#define ISIS_HSTXS_RESET_ID 0xAA
#define ISIS_HSTXS_GET_TELEMETRY_ID 0xB0
#define ISIS_HSTXS_SET_TX_MODE_ID 0xB0
#define ISIS_HSTXS_SET_LOCK_TIME_ID 0xB1
#define ISIS_HSTXS_GET_SUP_UPTIME_ID 0xB1
#define ISIS_HSTXS_SET_CONSTELLATION_DIRECTION_ID 0xB2
#define ISIS_HSTXS_GET_MSS_PWRTIME_ID 0xB2
#define ISIS_HSTXS_SET_POLARIZATION_RRC_I_CHANEL_ID 0xB3
#define ISIS_HSTXS_GET_SUP_STATUS_ID 0xB4
#define ISIS_HSTXS_SET_POLARIZATION_RRC_Q_CHANEL_ID 0xB4
#define ISIS_HSTXS_SET_LUT_CHOICE_ID 0xB5
#define ISIS_HSTXS_SET_PUNCTURING_LEVEL_ID 0xB6
#define ISIS_HSTXS_SET_REED_SOLOMON_INTERLEAVE_LEVEL_ID 0xB7
#define ISIS_HSTXS_SET_IDLE_FRAME_ONLY_MODE_ID 0xB8
#define ISIS_HSTXS_SET_BYPASS_PSEUDO_RANDOM_BLOCK_ID 0xB9
#define ISIS_HSTXS_SET_IDLE_FRAME_WATCHDOG_TIME_ID 0xBB
#define ISIS_HSTXS_SET_FRAME_SCID_ID 0xC0
#define ISIS_HSTXS_CLEAR_I2CSWDT_ID 0xC0
#define ISIS_HSTXS_GET_MASTER_CHANNEL_COUNTER_ID 0xC1
#define ISIS_HSTXS_GET_VIRTUAL_CHANNEL_COUNTER_ID 0xC2
#define ISIS_HSTXS_GET_SPI_FIFO_ERROR_COUNTER_ID 0xC3
#define ISIS_HSTXS_SET_PRBS_MODE_ID 0xC4
#define ISIS_HSTXS_SET_CARRIER_ONLY_MODE_ID 0xC5
#define ISIS_HSTXS_SET_CARRIER_SIDEBAND_SUPPRESSION_MODE_ID 0xC6
#define ISIS_HSTXS_GET_ASM_VALUE_ID 0xC7
#define ISIS_HSTXS_GET_ENGINE_STATUS_ID 0xC8
#define ISIS_HSTXS_SET_DAC_MUTE_MODE_ID 0xC9
#define ISIS_HSTXS_SET_DAC_MIDRANGE_MODE_ID 0xCA
#define ISIS_HSTXS_SET_PULSE_SHAPING_STATE_ID 0xCB
#define ISIS_HSTXS_SET_GAUSSIAN_NOISE_MODE_ID 0xCC
#define ISIS_HSTXS_SET_RAMP_DAC_TEST_MODE_ID 0xCD
#define ISIS_HSTXS_SET_DAC_STATE_ID 0xCE
#define ISIS_HSTXS_SET_GENERAL_TEST_MODE_ID 0xCF
#define ISIS_HSTXS_WRITE_AND_SEND_FRAME_ID 0xD0
#define ISIS_HSTXS_SEND_BUFFER_FRAME_ID 0xD1
#define ISIS_HSTXS_SET_FECF_ID 0xDC
#define ISIS_HSTXS_GET_TX_FREQUENCY_ID 0xE0
#define ISIS_HSTXS_GET_GENERAL_STATUS_ID 0xE1
#define ISIS_HSTXS_GET_UPTIME_ID 0xE2
#define ISIS_HSTXS_GET_ERROR_COUNTERS_ID 0xE3
#define ISIS_HSTXS_GET_MODULATOR_CT_CAL_REGISTER_ID 0xE4

#define ISIS_HSTXS_WRITE_AND_SEND_FRAME_MAX_DATA_LENGTH 217

/* ENUMS */

/*!
 * Constellation Direction
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs__direction_t
{
    isis_hstxs__direction__left = 0,
    isis_hstxs__direction__right = 1,
} isis_hstxs__direction_t;

/*!
 * Enabled/disabled enum
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs__enabled_t
{
    isis_hstxs__enabled__disabled = 0,
    isis_hstxs__enabled__enabled = 1,
} isis_hstxs__enabled_t;

/*!
 * Roll-off factor LUT
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs__lut_t
{
    isis_hstxs__lut___0_5 = 0,
    isis_hstxs__lut___0_35 = 1,
    isis_hstxs__lut___adjusted = 2,
} isis_hstxs__lut_t;

/*!
 * Transmitter mode
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs__mode_t
{
    isis_hstxs__mode__standby = 0, /*!< MSS powered, but transmitter not powered */
    isis_hstxs__mode__on = 1, /*!< MSS and transmitter powered */
} isis_hstxs__mode_t;

/*!
 * Modulation scheme
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs__modscheme_t
{
    isis_hstxs__modscheme__bpsk = 0,
    isis_hstxs__modscheme__oqpsk = 1,
} isis_hstxs__modscheme_t;

/*!
 * "To be defined"
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs__polarization_t
{
    isis_hstxs__polarization__negative = 0,
    isis_hstxs__polarization__positive = 1,
} isis_hstxs__polarization_t;

/*!
 * Supervisor mode
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs__sup_mode_t
{
    isis_hstxs__sup_mode__sup_only = 0, /*!< only the supervisor is powered */
    isis_hstxs__sup_mode__standby = 1, /*!< the supervisor and MSS are powered, but the transmitter is off */
} isis_hstxs__sup_mode_t;

/*!
 * Transmitter symbol rate
 */
typedef enum __attribute__ ((__packed__)) isis_hstxs__symbolrate_t
{
    isis_hstxs__symbolrate__eighth = 0, /*!< one eight of the maximum symbol rate - 625 ksps */
    isis_hstxs__symbolrate__quarter = 1, /*!< one quarter of the maximum symbol rate - 1250 ksps */
    isis_hstxs__symbolrate__half = 2, /*!< one half of the maximum symbol rate - 2500 ksps */
    isis_hstxs__symbolrate__full = 3, /*!< maximum symbol rate - 5000 ksps */
} isis_hstxs__symbolrate_t;

/* STRUCTS */

/*!
 *  ISIS_HSTXS instance structure
 */
typedef struct
{
    uint8_t mssAddr; /*!< I2C address used for mss part of the subsystem */
    uint8_t supAddr; /*!< I2C address used for sup part of the subsystem */
} ISIS_HSTXS_t;

/*!
 * Union for storing the parameters for struct ccsds_frameheader.
 */
typedef union __attribute__((__packed__)) _isis_hstxs__ccsds_frameheader_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        uint8_t spacecraft_id_high : 6; /*!< High bits of spacecraft ID (overwritten by TXS) */
        uint8_t version_number : 2; /*!< Transfer frame version number (forced to 0 by TXS) */
        uint8_t flag_ocf : 1; /*!< Operational control field flag */
        uint8_t virtual_channel : 3; /*!< Virtual channel identifier (virtual channel 0 will be used by the TXS for its idle frames) */
        uint8_t spacecraft_id_low : 4; /*!< Low bits of the spacecraft ID (overwritten by TXS) */
        uint8_t framecount_mc; /*!< Master channel frame count (overwritten by TXS) */
        uint8_t framecount_vc; /*!< Virtual channel frame count, sequential counter for number of frames sent within a virtual channel (modulo 256) */
        uint8_t firstheader_ptr_high : 3; /*!< High bits of the first header pointer */
        uint8_t seglength_id : 2; /*!< Segment length identifier */
        uint8_t flag_packetorder : 1; /*!< Packet order flag */
        uint8_t flag_sync : 1; /*!< Synchronization flag */
        uint8_t flag_secheader : 1; /*!< Transfer frame secondary header flag */
        uint8_t firstheader_ptr_low; /*!< Low bits of the first header pointer */
    } fields;
} isis_hstxs__ccsds_frameheader_t;

/*!
 * Union for storing the parameters for struct supervisor_status.
 */
typedef union __attribute__((__packed__)) _isis_hstxs__supervisor_status_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        uint8_t currmode : 1; /*!< Current supervisor mode */
        uint8_t good3v3Sw : 1; /*!< Flag to indicate whether the switched 3v3 line has a good voltage level */
        uint8_t good5vSw : 1; /*!< Flag to indicate whether the switched 5v line has a good voltage level */
        uint8_t paOverTemp : 1; /*!< Flag to indicate whether a PA overtemperature event has occurred */
        uint8_t tcxoOverTemp : 1; /*!< Flag to indicate whether a TCXO overtemperature event has occurred */
        uint8_t oc5v : 1; /*!< Flag to indicate whether an overcurrent event has occurred on the 5v input line */
    } fields;
} isis_hstxs__supervisor_status_t;

/*!
 * Union for storing the parameters received by get_engine_status.
 */
typedef union __attribute__((__packed__)) _isis_hstxs__get_engine_status__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint32_t PuncturingMode : 3; /*!< "To be defined" */
        uint32_t RS_InterleaveNr : 3; /*!< "To be defined" */
        uint32_t DataSpeed : 2; /*!< "To be defined" */
        uint32_t BypassPseudoRandom : 1; /*!< "To be defined" */
        uint32_t LUT_Switch : 2; /*!< "To be defined" */
        uint32_t Disable_Pulseshaping : 1; /*!< "To be defined" */
        uint32_t BPSK_OQPSK : 1; /*!< "To be defined" */
        uint32_t RAMP_DAC_TEST : 1; /*!< "To be defined" */
        uint32_t reservered1 : 1; /*!< "To be defined" */
        uint32_t I_CHAN_POL : 1; /*!< "To be defined" */
        uint32_t Q_CHAN_POL : 1; /*!< "To be defined" */
        uint32_t STANDBY_TX_On : 1; /*!< "To be defined" */
        uint32_t IdleFrameOnly : 1; /*!< "To be defined" */
        uint32_t TEST_MODE_OnOff_Dly : 1; /*!< "To be defined" */
        uint32_t Carrier_Suppression : 1; /*!< "To be defined" */
        uint32_t Carrier_Only : 1; /*!< "To be defined" */
        uint32_t PRBS : 1; /*!< "To be defined" */
        uint32_t DAC_DATA_OnOff : 1; /*!< "To be defined" */
        uint32_t DAC_DATA_MIDRANGE : 1; /*!< "To be defined" */
        uint32_t DAC_OnOff : 1; /*!< "To be defined" */
        uint32_t GAUS_NOISE : 1; /*!< "To be defined" */
        uint32_t DacClipError_Dly : 1; /*!< "To be defined" */
        uint32_t TcUpdateValid_Dly : 1; /*!< "To be defined" */
        uint32_t IdleFrameTmrOverflow_Dly : 1; /*!< "To be defined" */
        uint32_t FECF_OnOff : 1; /*!< "To be defined" */
        uint32_t reservered2 : 1; /*!< "To be defined" */
    } fields;
} isis_hstxs__get_engine_status__from_t;

/*!
 * Union for storing the parameters received by get_error_counters.
 */
typedef union __attribute__((__packed__)) _isis_hstxs__get_error_counters__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint16_t lock_err_cnt; /*!< Lock error counter */
        uint16_t freq_err_cnt; /*!< Frequency error counter */
    } fields;
} isis_hstxs__get_error_counters__from_t;

/*!
 * Union for storing the parameters received by get_general_status.
 */
typedef union __attribute__((__packed__)) _isis_hstxs__get_general_status__from_t
{
    unsigned char raw[26];
    struct __attribute__ ((__packed__))
    {
        isis_hstxs__modscheme_t modulation; /*!< Current Modulation Scheme */
        isis_hstxs__mode_t tx_on; /*!< Transmitter status */
        isis_hstxs__symbolrate_t symbolrate; /*!< Current Symbolrate */
        uint8_t attenuator; /*!< Attenuator Value */
        uint8_t mod_out_power; /*!< Modulation output power */
        isis_hstxs__lut_t lut_choice; /*!< LUT choice */
        uint16_t scid; /*!< Spacecraft ID */
        uint16_t volt_serial_DAC; /*!< Serial DAC voltage */
        uint32_t engine_stat; /*!< Engine Status */
        uint32_t uptime; /*!< MSS uptime, in seconds */
        uint16_t locked_err_cnt; /*!< Modulator PLL Lock error counter */
        uint16_t freq_err_cnt; /*!< Modulator frequency error counter */
        uint32_t spi_err_cnt; /*!< SPI error counter */
    } fields;
} isis_hstxs__get_general_status__from_t;

/*!
 * Union for storing the parameters received by get_telemetry.
 */
typedef union __attribute__((__packed__)) _isis_hstxs__get_telemetry__from_t
{
    unsigned char raw[40];
    struct __attribute__ ((__packed__))
    {
        uint16_t reflPower; /*!< Reflected RF Transmission Power \note conversion: eng. value = 0.6105 * raw */
        uint16_t forwPower; /*!< Forward RF Transmission Power \note conversion: eng. value = 0.6105 * raw */
        uint16_t volt3v3; /*!< Voltage of the 3v3 input line \note conversion: eng. value [in V] = 0.004884005 * raw */
        uint16_t volt3v3sw; /*!< Voltage of the 3v3 switched line \note conversion: eng. value [in V] = 0.004884005 * raw */
        uint16_t volt5v; /*!< Voltage of the 5v input line \note conversion: eng. value [in V] = 0.004884005 * raw */
        uint16_t voltBat; /*!< Voltage of the battery voltage input line \note conversion: eng. value [in V] = 0.004884005 * raw */
        uint16_t cur3v3; /*!< 3V3 Line Current Monitor (2 bytes) \note conversion: eng. value = 0.1221 * raw */
        uint16_t cur3v3sw; /*!< Current consumed on the 3v3 input line \note conversion: eng. value [in mA] = 0.40700040 * raw */
        uint16_t cur5v; /*!< Current consumed on the 5v input line \note conversion: eng. value [in mA] = 0.61050061 * raw */
        uint16_t curBat; /*!< Current consumed on the battery voltage input line \note conversion: eng. value [in mA] = 0.61050061 * raw */
        uint16_t voltCtl; /*!< Voltage of the control line \note conversion: eng. value [in mA] = 0.61050061 * raw */
        uint16_t tempDriver; /*!< Temperature of the driver \note conversion: eng. value [in °C] = -0.07669 * raw + 195.6037*/
        uint16_t tempPD; /*!< Temperature of the Power Dectector \note conversion: eng. value [in °C] = 0.1221 * raw + -255*/
        uint16_t tempPA; /*!< Temperature of the Power Amplifier \note conversion: eng. value [in °C] = -0.07669 * raw + 195.6037*/
        uint16_t tempTXCO; /*!< Temperature of the TCXO \note conversion: eng. value [in °C] = -0.07669 * raw + 195.6037*/
        uint32_t uptime; /*!< Uptime of the supervisor, in seconds */
        uint32_t mssPwrTime; /*!< Amount of time the MSS has been powered, in seconds */
        isis_hstxs__supervisor_status_t StatusFlags; /*!< Supervisor status flags */
        uint8_t WDTResetCount; /*!< Amount of times the supervisor has power cycled the MSS due to a watchdog trigger */
    } fields;
} isis_hstxs__get_telemetry__from_t;

/*!
 * Union for storing the parameters sent by write_and_send_frame.
 */
typedef union __attribute__((__packed__)) _isis_hstxs__write_and_send_frame__to_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        isis_hstxs__ccsds_frameheader_t header; /*!< Header to be transmitted */
        uint8_t* data; /*!< Data to be transmitted (maximum length: 217 elements) */
    } fields;
} isis_hstxs__write_and_send_frame__to_t;

#endif /* ISIS_HSTXS_TYPES_H_ */

