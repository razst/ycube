/*
 * isis_rxs_c.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated ICD version: 1.0
 * Generated from: isis_rxs_revc.yaml
 */

#ifndef ISIS_RXS_C_H_
#define ISIS_RXS_C_H_

#include "isis_rxs_c_types.h"
#include <satellite-subsystems/common_types.h>

#ifdef __cplusplus
extern "C"
{
#endif

/*!
 *	Initialize driver for a number of ISIS_RXS_C instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] isis_rxs_c Pointer to array of ISIS_RXS_C instances
 *	@param[in] isis_rxs_cCount Number of ISIS_RXS_C instances pointed to by isis_rxs_c input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t ISIS_RXS_C_Init(const ISIS_RXS_C_t* isis_rxs_c, uint8_t isis_rxs_cCount);

/*!
 * Get bitrate (0: 9600 bps, 1: 19200 bps, 2: 38400 bps, 3: 76800 bps)
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] bitrate_out Bitrate  (0: 9600 bps, 1: 19200 bps, 2: 38400 bps, 3: 76800 bps)
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_bitrate(uint8_t index, isis_rxs_c__rxs_bitrate_t *bitrate_out);

/*!
 * Get frame from receive buffer
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] data_out Pointer to buffer for the response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_frame(uint8_t index, isis_rxs_c__get_frame__from_t *response);

/*!
 * Get frame from receive buffer
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] data_out Pointer to buffer for the response from subsystem
 * @param[in] data_length Number of elements to read for output struct member 'data' in bytes
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_frame_variable(uint8_t index, isis_rxs_c__get_frame__from_t *response, size_t data_length);

/*!
 * Retrieves the number of frames that are currently stored in the receiver buffer.
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] frame_count_out Number of frames in receive buffer
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_frame_count(uint8_t index, uint16_t *frame_count_out);

/*!
 * Retrieves the length of frames that are currently stored in the receiver buffer.
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] p_frame_length_out Pointer to buffer for the response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_frame_count_length(uint8_t index, isis_rxs_c__get_frame_count_length__from_t *response);

/*!
 * Retrieves the length of frames that are currently stored in the receiver buffer.
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] p_frame_length_out Pointer to buffer for the response from subsystem
 * @param[in] p_frame_length_length Number of elements to read for output struct member 'p_frame_length' in bytes
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_frame_count_length_variable(uint8_t index, isis_rxs_c__get_frame_count_length__from_t *response, size_t p_frame_length_length);

/*!
 * Get full frame from receive buffer
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] data_out Pointer to buffer for the response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_full_frame(uint8_t index, isis_rxs_c__get_full_frame__from_t *response);

/*!
 * Get full frame from receive buffer
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] data_out Pointer to buffer for the response from subsystem
 * @param[in] data_length Number of elements to read for output struct member 'data' in bytes
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_full_frame_variable(uint8_t index, isis_rxs_c__get_full_frame__from_t *response, size_t data_length);

/*!
 * Get last reset cause
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] last_reset_cause_out Last reset cause
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_rx_last_reset_cause(uint8_t index, uint8_t *last_reset_cause_out);

/*!
 * Get receiver RF frequency
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] freq_out Current RF frequency of receiver in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_rx_rf_freq(uint8_t index, uint32_t *freq_out);

/*!
 * Get PLL RF error
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_rx_rf_pll_error(uint8_t index, isis_rxs_c__get_rx_rf_pll_error__from_t *response);

/*!
 * Get firmware information
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_rx_swinfo(uint8_t index, isis_rxs_c__get_rx_swinfo__from_t *response);

/*!
 * Measure all telemetry channels
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__get_rx_telemetry(uint8_t index, isis_rxs_c__get_rx_telemetry__from_t *response);

/*!
 * Removes the oldest frame from the receive buffer. This is the same frame that can be retrieved from the receiver buffer command. If there are 0 frames in the receive buffer this command has no effect.
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__remove_frame(uint8_t index);

/*!
 * Removes all frames from the receive buffer. If there are 0 frames in the receive buffer this command has no effect.
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__remove_frame_all(uint8_t index);

/*!
 * Power cycles the full board (receiver will be reset).
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__reset_hw_rx(uint8_t index);

/*!
 * Performs a reset of the I2C watchdog without performing any other operation.
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__reset_wdg_rx(uint8_t index);

/*!
 * Report receiver uptime
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[out] uptime_out Reports the amount of time the transmitter MCU has been active since the last reset, also known as up- time.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__rx_uptime(uint8_t index, uint32_t *uptime_out);

/*!
 * Set bitrate (0: 9600 bps, 1: 19200 bps, 2: 38400 bps, 3: 76800 bps)
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[in] bitrate_in Bitrate code (0: 9600 bps, 1: 19200 bps, 2: 38400 bps, 3: 76800 bps)
 * @param[out] status_out Operation status (0: OK, 253: busy, 254: invalid bitrate code, 255: internal error)
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__set_bitrate(uint8_t index, isis_rxs_c__rxs_bitrate_t bitrate_in, uint8_t *status_out);

/*!
 * Set receiver RF frequency
 *
 * @param[in] index Index of ISIS_RXS_C in list provided during driver initialization
 * @param[in] freq_in Desired frequency RF for receiver in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_rxs_c__set_rx_rf_freq(uint8_t index, uint32_t freq_in);

#ifdef __cplusplus
}
#endif

#endif /* ISIS_RXS_C_H_ */

