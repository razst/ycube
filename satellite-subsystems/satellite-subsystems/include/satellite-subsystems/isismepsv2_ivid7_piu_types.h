/*
 * isismepsv2_ivid7_piu_types.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated from:
 *  - imepsv2_structs.yaml
 *  - imepsv2_ivid7_piu.yaml
 */

#ifndef ISISMEPSV2_IVID7_PIU_TYPES_H_
#define ISISMEPSV2_IVID7_PIU_TYPES_H_

#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C"
{
#endif

/* DEFINES */

#define ISISMEPSV2_IVID7_PIU_NOP_ID {0x1A, 0x07, 0x02, 0x00}
#define ISISMEPSV2_IVID7_PIU_CANCEL_ID {0x1A, 0x07, 0x04, 0x00}
#define ISISMEPSV2_IVID7_PIU_RESETWATCHDOG_ID {0x1A, 0x07, 0x06, 0x00}
#define ISISMEPSV2_IVID7_PIU_OUTPUTBUSGROUPON_ID {0x1A, 0x07, 0x10, 0x00}
#define ISISMEPSV2_IVID7_PIU_OUTPUTBUSGROUPOFF_ID {0x1A, 0x07, 0x12, 0x00}
#define ISISMEPSV2_IVID7_PIU_OUTPUTBUSGROUPSTATE_ID {0x1A, 0x07, 0x14, 0x00}
#define ISISMEPSV2_IVID7_PIU_OUTPUTBUSCHANNELON_ID {0x1A, 0x07, 0x16, 0x00}
#define ISISMEPSV2_IVID7_PIU_OUTPUTBUSCHANNELOFF_ID {0x1A, 0x07, 0x18, 0x00}
#define ISISMEPSV2_IVID7_PIU_SWITCHTONOMINAL_ID {0x1A, 0x07, 0x30, 0x00}
#define ISISMEPSV2_IVID7_PIU_SWITCHTOSAFETY_ID {0x1A, 0x07, 0x32, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETSYSTEMSTATUS_ID {0x1A, 0x07, 0x40, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETOVERCURRENTFAULTSTATE_ID {0x1A, 0x07, 0x42, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETCONFIGURATIONPARAMETER_ID {0x1A, 0x07, 0x82, 0x00}
#define ISISMEPSV2_IVID7_PIU_SETCONFIGURATIONPARAMETER_ID {0x1A, 0x07, 0x84, 0x00}
#define ISISMEPSV2_IVID7_PIU_RESETCONFIGURATIONPARAMETER_ID {0x1A, 0x07, 0x86, 0x00}
#define ISISMEPSV2_IVID7_PIU_RESETCONFIGURATION_ID {0x1A, 0x07, 0x90, 0x00}
#define ISISMEPSV2_IVID7_PIU_LOADCONFIGURATION_ID {0x1A, 0x07, 0x92, 0x00}
#define ISISMEPSV2_IVID7_PIU_SAVECONFIGURATION_ID {0x1A, 0x07, 0x94, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETHOUSEKEEPINGRAW_ID {0x1A, 0x07, 0xA0, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETHOUSEKEEPINGRAWINCDB_ID {0x1A, 0x07, 0xA0, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETHOUSEKEEPINGENG_ID {0x1A, 0x07, 0xA2, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETHOUSEKEEPINGENGINCDB_ID {0x1A, 0x07, 0xA2, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETHOUSEKEEPINGENGRUNNINGAVGINCDB_ID {0x1A, 0x07, 0xA4, 0x00}
#define ISISMEPSV2_IVID7_PIU_GETHOUSEKEEPINGRUNNINGAVG_ID {0x1A, 0x07, 0xA4, 0x00}
#define ISISMEPSV2_IVID7_PIU_RESET_ID {0x1A, 0x07, 0xAA, 0x00}
#define ISISMEPSV2_IVID7_PIU_CORRECTTIME_ID {0x1A, 0x07, 0xC4, 0x00}
#define ISISMEPSV2_IVID7_PIU_ZERORESETCAUSECOUNTERS_ID {0x1A, 0x07, 0xC6, 0x00}


/* ENUMS */

/*!
 * Enumeration of all iMEPS channels
 */
typedef enum __attribute__ ((__packed__)) isismepsv2_ivid7_piu__imeps_channel_t
{
    isismepsv2_ivid7_piu__imeps_channel__channel_16v_perm = 0u,
    isismepsv2_ivid7_piu__imeps_channel__channel_5v_perm = 1u,
    isismepsv2_ivid7_piu__imeps_channel__channel_5v_sw1 = 2u,
    isismepsv2_ivid7_piu__imeps_channel__channel_5v_sw2 = 3u,
    isismepsv2_ivid7_piu__imeps_channel__channel_5v_sw3 = 4u,
    isismepsv2_ivid7_piu__imeps_channel__channel_3v3_perm = 5u,
    isismepsv2_ivid7_piu__imeps_channel__channel_3v3_sw1 = 6u,
    isismepsv2_ivid7_piu__imeps_channel__channel_3v3_sw2 = 7u,
    isismepsv2_ivid7_piu__imeps_channel__channel_3v3_sw3 = 8u,
} isismepsv2_ivid7_piu__imeps_channel_t;

/* STRUCTS */

/*!
 *  ISISMEPSV2_IVID7_PIU instance structure
 */
typedef struct
{
    uint8_t i2cAddr; /*!< I2C address used for this instance */
} ISISMEPSV2_IVID7_PIU_t;

/*!
 * Union for storing the parameters for struct ReplyHeader.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__replyheader_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        uint8_t stid; /*!< See "System Type Identifier (STID)" (page 22) */
        uint8_t ivid; /*!< See "Interface Version Identifier (IVID)" (page 23) */
        uint8_t rc; /*!< See "Board Identifier (BID)" (page 24) */
        uint8_t bid; /*!< Response code as stated in the header (inside parenthesis). */
        uint8_t cmderr : 4; /*!< See "Response Status Information (STAT)" (page 25) */
        uint8_t reserved : 3; /*!< See "Response Status Information (STAT)" (page 25) */
        uint8_t new_flag : 1; /*!< See "Response Status Information (STAT)" (page 25) */
    } fields;
} isismepsv2_ivid7_piu__replyheader_t;

/*!
 * Union for storing the parameters for struct VIPDch.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__vipdch_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        int16_t volt; /*!<  \note conversion: eng. value [in mV] = 0.9765625 * raw + 0*/
        int16_t current; /*!<  \note conversion: eng. value [in mA] = 0.1525879 * raw + 0*/
        int16_t power; /*!<  \note conversion: eng. value [in mW] = 4.8828125 * raw + 0*/
    } fields;
} isismepsv2_ivid7_piu__vipdch_t;

/*!
 * Union for storing the parameters for struct VIPDvd.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__vipdvd_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        int16_t volt; /*!<  \note conversion: eng. value [in mV] = 0.9765625 * raw + 0*/
        int16_t current; /*!<  \note conversion: eng. value [in mA] = 0.30517578 * raw + 0*/
        int16_t power; /*!<  \note conversion: eng. value [in mW] = 9.765625 * raw + 0*/
    } fields;
} isismepsv2_ivid7_piu__vipdvd_t;

/*!
 * Union for storing the parameters for struct VIPDeng.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__vipdeng_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        int16_t volt; /*!<  */
        int16_t current; /*!<  */
        int16_t power; /*!<  \note conversion: eng. value [in mW] = 10 * raw */
    } fields;
} isismepsv2_ivid7_piu__vipdeng_t;

/*!
 * Union for storing the parameters for struct BatteryPackStatus.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__batterypackstatus_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        uint16_t under_voltage_cell_1 : 1; /*!< Battery cell 1 under voltage */
        uint16_t under_voltage_cell_2 : 1; /*!< Battery cell 2 under voltage */
        uint16_t under_voltage_cell_3 : 1; /*!< Battery cell 3 under voltage */
        uint16_t under_voltage_cell_4 : 1; /*!< Battery cell 4 under voltage */
        uint16_t over_voltage_cell_1 : 1; /*!< Battery cell 1 over voltage */
        uint16_t over_voltage_cell_2 : 1; /*!< Battery cell 2 over voltage */
        uint16_t over_voltage_cell_3 : 1; /*!< Battery cell 3 over voltage */
        uint16_t over_voltage_cell_4 : 1; /*!< Battery cell 4 over voltage */
        uint16_t balancing_cell_1 : 1; /*!< Battery cell 1 balancing */
        uint16_t balancing_cell_2 : 1; /*!< Battery cell 2 balancing */
        uint16_t balancing_cell_3 : 1; /*!< Battery cell 3 balancing */
        uint16_t balancing_cell_4 : 1; /*!< Battery cell 4 balancing */
        uint16_t heater_active : 1; /*!< Battery pack heater status */
        uint16_t reserved : 2; /*!< Battery pack heater status */
        uint16_t pack_enabled : 1; /*!< Battery pack enabled. Bitflag is set when the battery is connected to the output bus. */
    } fields;
} isismepsv2_ivid7_piu__batterypackstatus_t;

/*!
 * Union for storing the parameters for struct CCSDraw.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__ccsdraw_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint16_t volt_in_mppt; /*!<  \note conversion: eng. value [in mV] = 20.5078125 * raw + 0*/
        uint16_t curr_in_mppt; /*!<  \note conversion: eng. value [in mA] = 3.255208333 * raw + -41*/
        uint16_t volt_out_mppt; /*!<  \note conversion: eng. value [in mV] = 20.5078125 * raw + 0*/
        uint16_t curr_out_mppt; /*!<  \note conversion: eng. value [in mA] = 3.255208333 * raw + -41*/
    } fields;
} isismepsv2_ivid7_piu__ccsdraw_t;

/*!
 * Union for storing the parameters for struct CCSDeng.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__ccsdeng_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        int16_t volt_in_mppt; /*!<  */
        int16_t curr_in_mppt; /*!<  */
        int16_t volt_out_mppt; /*!<  */
        int16_t curr_out_mppt; /*!<  */
    } fields;
} isismepsv2_ivid7_piu__ccsdeng_t;

/*!
 * Union for storing the parameters received by getconfigurationparameter.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__getconfigurationparameter__from_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!<  */
        uint8_t reserved; /*!<  */
        uint16_t par_id; /*!< parameter id of the parameter to get */
        uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
    } fields;
} isismepsv2_ivid7_piu__getconfigurationparameter__from_t;

/*!
 * Union for storing the parameters received by gethousekeepingeng.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__gethousekeepingeng__from_t
{
    unsigned char raw[116];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form \note conversion: eng. value [in Â°C] = 0.01 * raw */
        isismepsv2_ivid7_piu__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        isismepsv2_ivid7_piu__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        isismepsv2_ivid7_piu__batterypackstatus_t bat_stat; /*!< Bitflag field indicating BP board */
        int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. \note conversion: eng. value [in Â°C] = 0.01 * raw */
        int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. \note conversion: eng. value [in Â°C] = 0.01 * raw */
        int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__ccsdeng_t cc1; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc2; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc3; /*!< Data on conditioning chain */
    } fields;
} isismepsv2_ivid7_piu__gethousekeepingeng__from_t;

/*!
 * Union for storing the parameters received by gethousekeepingengincdb.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__gethousekeepingengincdb__from_t
{
    unsigned char raw[274];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form \note conversion: eng. value [in Â°C] = 0.01 * raw */
        isismepsv2_ivid7_piu__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        isismepsv2_ivid7_piu__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        isismepsv2_ivid7_piu__batterypackstatus_t bat_stat; /*!< Bitflag field indicating BP board */
        int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__ccsdeng_t cc1; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc2; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc3; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc09; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc10; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc11; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc12; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc13; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc14; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc15; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__ccsdeng_t cc4; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc5; /*!< Data on conditioning chain */
        uint16_t stat_ob_ex_on; /*!< Bitflag field indicating channel-on status for theextended output bus channels 16 through 31. */
        uint16_t stat_ob_ex_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the extended output bus channels 16 through 31. */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc16; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc17; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc18; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc19; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc20; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc21; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc22; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc23; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc24; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc25; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc26; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc27; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc28; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc29; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc30; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc31; /*!< Output V, I and P of output bus channel */
    } fields;
} isismepsv2_ivid7_piu__gethousekeepingengincdb__from_t;

/*!
 * Union for storing the parameters received by gethousekeepingengrunningavgincdb.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__gethousekeepingengrunningavgincdb__from_t
{
    unsigned char raw[274];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form \note conversion: eng. value = 0.01 * raw */
        isismepsv2_ivid7_piu__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        isismepsv2_ivid7_piu__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        isismepsv2_ivid7_piu__batterypackstatus_t bat_stat; /*!< Bitflag field indicating BP board */
        int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__ccsdeng_t cc1; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc2; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc3; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc09; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc10; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc11; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc12; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc13; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc14; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc15; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__ccsdeng_t cc4; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc5; /*!< Data on conditioning chain */
        uint16_t stat_ob_ex_on; /*!< Bitflag field indicating channel-on status for theextended output bus channels 16 through 31. */
        uint16_t stat_ob_ex_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the extended output bus channels 16 through 31. */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc16; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc17; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc18; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc19; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc20; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc21; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc22; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc23; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc24; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc25; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc26; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc27; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc28; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc29; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc30; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc31; /*!< Output V, I and P of output bus channel */
    } fields;
} isismepsv2_ivid7_piu__gethousekeepingengrunningavgincdb__from_t;

/*!
 * Union for storing the parameters received by gethousekeepingraw.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__gethousekeepingraw__from_t
{
    unsigned char raw[174];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        uint16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        uint16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form \note conversion: eng. value [in C] = 0.32234 * raw + -280*/
        isismepsv2_ivid7_piu__vipdvd_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        isismepsv2_ivid7_piu__vipdvd_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_ob_on; /*!< Bitflag field indicating channel-on status for output bus channels 0 through 15. */
        uint16_t stat_ob_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for output bus channels 0 through 15. */
        isismepsv2_ivid7_piu__batterypackstatus_t bat_stat; /*!< Bitflag field indicating BP board */
        uint16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. \note conversion: eng. value = -0.00000000334856 * raw<sup>3</sup> + 0.0000221414 * raw<sup>2</sup> + -0.066728 * raw + 93.3244*/
        uint16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. \note conversion: eng. value = -0.00000000334856 * raw<sup>3</sup> + 0.0000221414 * raw<sup>2</sup> + -0.066728 * raw + 93.3244*/
        uint16_t volt_vd0; /*!< Voltage of voltage domain 0 in raw form */
        uint16_t volt_vd1; /*!< Voltage of voltage domain 1 in raw form */
        uint16_t volt_vd2; /*!< Voltage of voltage domain 2 in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc00; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc01; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc02; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc03; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc04; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc05; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc06; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc07; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc08; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__ccsdraw_t cc1; /*!< Data on conditioning chain in raw form. */
        isismepsv2_ivid7_piu__ccsdraw_t cc2; /*!< Data on conditioning chain in raw form. */
        isismepsv2_ivid7_piu__ccsdraw_t cc3; /*!< Data on conditioning chain in raw form. */
        isismepsv2_ivid7_piu__vipdch_t vip_obc09; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc10; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc11; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc12; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc13; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc14; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc15; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__ccsdraw_t cc4; /*!< Data on conditioning chain in raw form. */
        isismepsv2_ivid7_piu__ccsdraw_t cc5; /*!< Data on conditioning chain in raw form. */
    } fields;
} isismepsv2_ivid7_piu__gethousekeepingraw__from_t;

/*!
 * Union for storing the parameters received by gethousekeepingrawincdb.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__gethousekeepingrawincdb__from_t
{
    unsigned char raw[274];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        uint16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        uint16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form \note conversion: eng. value [in C] = 0.244444 * raw + -1168*/
        isismepsv2_ivid7_piu__vipdvd_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        isismepsv2_ivid7_piu__vipdvd_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        isismepsv2_ivid7_piu__batterypackstatus_t bat_stat; /*!< Bitflag field indicating BP board */
        uint16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        uint16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        uint16_t volt_vd0; /*!< Voltage of voltage domain 0 in raw form */
        uint16_t volt_vd1; /*!< Voltage of voltage domain 1 in raw form */
        uint16_t volt_vd2; /*!< Voltage of voltage domain 2 in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc00; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc01; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc02; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc03; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc04; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc05; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc06; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc07; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc08; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__ccsdraw_t cc1; /*!< Data on conditioning chain in raw form. */
        isismepsv2_ivid7_piu__ccsdraw_t cc2; /*!< Data on conditioning chain in raw form. */
        isismepsv2_ivid7_piu__ccsdraw_t cc3; /*!< Data on conditioning chain in raw form. */
        isismepsv2_ivid7_piu__vipdch_t vip_obc09; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc10; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc11; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc12; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc13; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc14; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc15; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__ccsdraw_t cc4; /*!< Data on conditioning chain in raw form. */
        isismepsv2_ivid7_piu__ccsdraw_t cc5; /*!< Data on conditioning chain in raw form. */
        uint16_t stat_ob_ex_on; /*!< Bitflag field indicating channel-on status for theextended output bus channels 16 through 31. */
        uint16_t stat_ob_ex_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the extended output bus channels 16 through 31. */
        isismepsv2_ivid7_piu__vipdch_t vip_obc16; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc17; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc18; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc19; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc20; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc21; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc22; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc23; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc24; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc25; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc26; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc27; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc28; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc29; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc30; /*!< Output V, I and P of output bus channel in raw form */
        isismepsv2_ivid7_piu__vipdch_t vip_obc31; /*!< Output V, I and P of output bus channel in raw form */
    } fields;
} isismepsv2_ivid7_piu__gethousekeepingrawincdb__from_t;

/*!
 * Union for storing the parameters received by gethousekeepingrunningavg.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__gethousekeepingrunningavg__from_t
{
    unsigned char raw[116];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
        uint8_t reserved; /*!< reserved */
        int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
        uint16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form \note conversion: eng. value [in C] = 0.244444 * raw + -1168*/
        isismepsv2_ivid7_piu__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
        isismepsv2_ivid7_piu__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
        uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
        uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
        isismepsv2_ivid7_piu__batterypackstatus_t bat_stat; /*!< Bitflag field indicating BP board */
        int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
        int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
        int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
        int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
        isismepsv2_ivid7_piu__ccsdeng_t cc1; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc2; /*!< Data on conditioning chain */
        isismepsv2_ivid7_piu__ccsdeng_t cc3; /*!< Data on conditioning chain */
    } fields;
} isismepsv2_ivid7_piu__gethousekeepingrunningavg__from_t;

/*!
 * Union for storing the parameters received by getovercurrentfaultstate.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__getovercurrentfaultstate__from_t
{
    unsigned char raw[46];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!<  */
        uint8_t reserved; /*!<  */
        uint16_t stat_ob_on; /*!<  */
        uint16_t stat_ob_ext_on; /*!<  */
        uint16_t stat_ob_ocf; /*!<  */
        uint16_t stat_ob_ext_ocf; /*!<  */
        uint16_t ocf_cnt_obc00; /*!<  */
        uint16_t ocf_cnt_obc01; /*!<  */
        uint16_t ocf_cnt_obc02; /*!<  */
        uint16_t ocf_cnt_obc03; /*!<  */
        uint16_t ocf_cnt_obc04; /*!<  */
        uint16_t ocf_cnt_obc05; /*!<  */
        uint16_t ocf_cnt_obc06; /*!<  */
        uint16_t ocf_cnt_obc07; /*!<  */
        uint16_t ocf_cnt_obc08; /*!<  */
        uint16_t ocf_cnt_obc09; /*!<  */
        uint16_t ocf_cnt_obc10; /*!<  */
        uint16_t ocf_cnt_obc11; /*!<  */
        uint16_t ocf_cnt_obc12; /*!<  */
        uint16_t ocf_cnt_obc13; /*!<  */
        uint16_t ocf_cnt_obc14; /*!<  */
        uint16_t ocf_cnt_obc15; /*!<  */
    } fields;
} isismepsv2_ivid7_piu__getovercurrentfaultstate__from_t;

/*!
 * Union for storing the parameters received by getsystemstatus.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__getsystemstatus__from_t
{
    unsigned char raw[36];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!<  */
        uint8_t mode; /*!< Indicates the current mode of the system. */
        uint8_t conf; /*!< Read/write configuration parameters have been changed by the EPS master since the last parameters load/save operation */
        uint8_t reset_cause; /*!< Cause of last reset. */
        uint32_t uptime; /*!<  */
        uint16_t error; /*!<  */
        uint16_t rc_cnt_pwron; /*!<  */
        uint16_t rc_cnt_wdg; /*!<  */
        uint16_t rc_cnt_cmd; /*!<  */
        uint16_t rc_cnt_pweron_mcu; /*!<  */
        uint16_t rc_cnt_emlopo; /*!<  */
        uint16_t prevcmd_elapsed; /*!<  */
        uint32_t unix_time; /*!<  */
        uint8_t unix_year; /*!<  \note conversion: eng. value = raw+ 2000*/
        uint8_t unix_month; /*!<  */
        uint8_t unix_day; /*!<  */
        uint8_t unix_hour; /*!<  */
        uint8_t unix_minute; /*!<  */
        uint8_t unix_second; /*!<  */
    } fields;
} isismepsv2_ivid7_piu__getsystemstatus__from_t;

/*!
 * Union for storing the parameters sent by outputbusgroupoff.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__outputbusgroupoff__to_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint16_t obc_bf; /*!< Bitflag field indicating which output bus channels to turn-off. */
        uint16_t obc_ext_bf; /*!< Optional. Bitflag field indicating which extended output bus channels to turn-on. These are channels 16 through 31. Similar to CH_BF in operation. */
    } fields;
} isismepsv2_ivid7_piu__outputbusgroupoff__to_t;

/*!
 * Union for storing the parameters sent by outputbusgroupon.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__outputbusgroupon__to_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint16_t obc_bf; /*!< Bitflag field indicating which output bus channels to turn-on. */
        uint16_t obc_ext_bf; /*!< Optional. Bitflag field indicating which extended output bus channels to turn-on. These are channels 16 through 31. Similar to CH_BF in operation. */
    } fields;
} isismepsv2_ivid7_piu__outputbusgroupon__to_t;

/*!
 * Union for storing the parameters sent by outputbusgroupstate.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__outputbusgroupstate__to_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint16_t obc_bf; /*!< Bitflag field indicating the required output bus channel on-state. */
        uint16_t obc_ext_bf; /*!< Optional. Bitflag field indicating which extended output bus channels to turn-on. These are channels 16 through 31. Similar to CH_BF in operation. */
    } fields;
} isismepsv2_ivid7_piu__outputbusgroupstate__to_t;

/*!
 * Union for storing the parameters received by resetconfigurationparameter.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__resetconfigurationparameter__from_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!<  */
        uint8_t reserved; /*!<  */
        uint16_t par_id; /*!< parameter id of the parameter to get */
        uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
    } fields;
} isismepsv2_ivid7_piu__resetconfigurationparameter__from_t;

/*!
 * Union for storing the parameters sent by setconfigurationparameter.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__setconfigurationparameter__to_t
{
    unsigned char raw[10];
    struct __attribute__ ((__packed__))
    {
        uint16_t par_id; /*!< parameter id of the parameter to get */
        uint8_t par_val[8]; /*!< new parameter value encompassing n bytes. The length depends on the parameter type. */
    } fields;
} isismepsv2_ivid7_piu__setconfigurationparameter__to_t;

/*!
 * Union for storing the parameters received by setconfigurationparameter.
 */
typedef union __attribute__((__packed__)) _isismepsv2_ivid7_piu__setconfigurationparameter__from_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        isismepsv2_ivid7_piu__replyheader_t reply_header; /*!<  */
        uint8_t reserved; /*!<  */
        uint16_t par_id; /*!< parameter id of the parameter to get */
        uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
    } fields;
} isismepsv2_ivid7_piu__setconfigurationparameter__from_t;

#ifdef __cplusplus
}
#endif

#endif /* ISISMEPSV2_IVID7_PIU_TYPES_H_ */

