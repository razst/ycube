/*
 * isis_aocs_types.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated ICD version: 1.6
 * Generated from: isis_aocs_common_v1.6.yaml
 */

#ifndef ISIS_AOCS_TYPES_H_
#define ISIS_AOCS_TYPES_H_

#include <stddef.h>
#include <stdint.h>

#ifdef _WIN32
    #if __STDC_VERSION__ < 201112L && __cplusplus < 201103L
        #error This code must be compiled with C11 or newer on Windows!
    #else
        #include <assert.h>
        typedef struct __attribute__((__packed__)) __attribute__((gcc_struct)) _isis_aocs_test
        {
            uint16_t isis_aocs_test_a: 4;
            uint8_t isis_aocs_test_b: 4;
        } isis_aocs_test;
        static_assert(sizeof(isis_aocs_test)==1, "Incompatible compiler settings. "
            "Please make sure -mno-ms-bitfields (for GCC) or similar is used to avoid cross-platform issues");
    #endif
#endif

#ifdef __cplusplus
extern "C"
{
#endif

/* DEFINES */

#define ISIS_AOCS_CHECK_RESULT_ID {0x00}
#define ISIS_AOCS_CHECK_THREADED_ID {0x01}
#define ISIS_AOCS_GET_TC_STATS_ID {0x02}
#define ISIS_AOCS_SET_PARAM_ID {0x03}
#define ISIS_AOCS_SET_PARAM_ASCII_ID {0x03}
#define ISIS_AOCS_SET_PARAM_F_ID {0x03}
#define ISIS_AOCS_SET_PARAM_GENERIC_ID {0x03}
#define ISIS_AOCS_SET_PARAM_HEX32_ID {0x03}
#define ISIS_AOCS_SET_PARAM_INT32_ID {0x03}
#define ISIS_AOCS_SET_PARAM_UINT32_ID {0x03}
#define ISIS_AOCS_AURIGA_GET_FW_STATUS_ID {0x04}
#define ISIS_AOCS_GET_PARAM_ID {0x04}
#define ISIS_AOCS_GET_PARAM_ASCII_ID {0x04}
#define ISIS_AOCS_GET_PARAM_AURIGA_ID {0x04}
#define ISIS_AOCS_GET_PARAM_CUBEWHEEL_ID {0x04}
#define ISIS_AOCS_GET_PARAM_F_ID {0x04}
#define ISIS_AOCS_GET_PARAM_GENERIC_ID {0x04}
#define ISIS_AOCS_GET_PARAM_GNSS_LOG_CONFIG_ID {0x04}
#define ISIS_AOCS_GET_PARAM_HEX32_ID {0x04}
#define ISIS_AOCS_GET_PARAM_IMTQ_ID {0x04}
#define ISIS_AOCS_GET_PARAM_INT32_ID {0x04}
#define ISIS_AOCS_GET_PARAM_LENSRND_ID {0x04}
#define ISIS_AOCS_GET_PARAM_RW25_ID {0x04}
#define ISIS_AOCS_GET_PARAM_SCG_ID {0x04}
#define ISIS_AOCS_GET_PARAM_SCG_TEMPERATURE_COEFFICIENTS_ID {0x04}
#define ISIS_AOCS_GET_PARAM_THR_ID {0x04}
#define ISIS_AOCS_GET_PARAM_THR_FAULT_ID {0x04}
#define ISIS_AOCS_GET_PARAM_THR_STATE_ID {0x04}
#define ISIS_AOCS_GET_PARAM_UINT32_ID {0x04}
#define ISIS_AOCS_LENSRND_GET_CORRECTION_TABLE_INFO_ID {0x04}
#define ISIS_AOCS_SCG_GET_FW_STATUS_ID {0x04}
#define ISIS_AOCS_RESET_PARAM_ID {0x05}
#define ISIS_AOCS_RESET_PARAM_GENERIC_ID {0x05}
#define ISIS_AOCS_CLEAR_PENDING_PARAMS_ID {0x06}
#define ISIS_AOCS_CHECK_PARAMS_ID {0x07}
#define ISIS_AOCS_SET_TIME_ID {0x08}
#define ISIS_AOCS_GET_TIME_ID {0x09}
#define ISIS_AOCS_CLEAR_TRACE_LOG_ID {0x0A}
#define ISIS_AOCS_FORCE_TRACE_LOG_SWITCH_ID {0x0B}
#define ISIS_AOCS_CLEAR_FAULT_LOG_ID {0x0C}
#define ISIS_AOCS_SET_PARAM_1F_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_2F_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_3F_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_4F_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_AURIGA_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_BIAS_ESTIMATOR_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_CONTROL_TARGET_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_CONTROL_TARGET_AXIS_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_CONTROL_TARGET_LLA_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_CONTROL_TARGET_LVLH_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_CONTROL_TARGET_QUAT_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_CUBEWHEEL_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_GNSS_LOG_CONFIG_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_IMTQ_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_OPERATING_MODE_SUBSYS_AUTO_POWER_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_OPERATING_MODE_SWITCH_DELAY_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_PARTIAL_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_PARTIAL_F_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_PARTIAL_GENERIC_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_PARTIAL_HEX32_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_PARTIAL_INT32_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_PARTIAL_UINT32_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_RW25_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_SCG_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_SENSORS_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_SUBSYS_REQUIRED_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_THR_CONFIG_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_THR_DISABLE_FDIR_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_THR_HEATER_MODE_ID {0x0D}
#define ISIS_AOCS_SET_PARAM_THR_STATE_CONFIG_ID {0x0D}
#define ISIS_AOCS_GET_PARAM_1F_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_2F_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_3F_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_4F_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_BIAS_ESTIMATOR_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_OPERATING_MODE_SUBSYS_AUTO_POWER_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_OPERATING_MODE_SWITCH_DELAY_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_PARTIAL_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_PARTIAL_F_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_PARTIAL_GENERIC_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_PARTIAL_HEX32_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_PARTIAL_INT32_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_PARTIAL_UINT32_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_SENSORS_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_SUBSYS_REQUIRED_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_TLE_ID {0x0E}
#define ISIS_AOCS_GET_PARAM_TOTAL_IMPULSE_ID {0x0E}
#define ISIS_AOCS_LIST_FAULTS_ID {0x0E}
#define ISIS_AOCS_DBG_GET_STACK_INFO_ID {0x0F}
#define ISIS_AOCS_FW_SET_ONE_SHOT_ID {0x10}
#define ISIS_AOCS_FW_SET_PERMANENT_ID {0x11}
#define ISIS_AOCS_GET_BOOT_INFO_ID {0x12}
#define ISIS_AOCS_FW_SET_SLOT_METADATA_ID {0x13}
#define ISIS_AOCS_FW_GET_SLOT_METADATA_ID {0x14}
#define ISIS_AOCS_GET_BOOT_LOG_ID {0x15}
#define ISIS_AOCS_LS_GET_ID {0x17}
#define ISIS_AOCS_UP_START_ID {0x18}
#define ISIS_AOCS_UP_CHUNK_ID {0x19}
#define ISIS_AOCS_UP_STORE_ID {0x1A}
#define ISIS_AOCS_UP_VERIFY_ID {0x1B}
#define ISIS_AOCS_DOWN_PREPARE_ID {0x1C}
#define ISIS_AOCS_DOWN_SMALL_CHUNK_ID {0x1D}
#define ISIS_AOCS_DOWN_LARGE_CHUNK_ID {0x1E}
#define ISIS_AOCS_DOWN_FILE_INFO_ID {0x1F}
#define ISIS_AOCS_APPLY_AOCS_CONFIG_ID {0x20}
#define ISIS_AOCS_APPLY_AOCS_CONFIG_ALL_ID {0x20}
#define ISIS_AOCS_SET_OPERATING_MODE_ID {0x22}
#define ISIS_AOCS_GET_OPERATING_MODE_ID {0x23}
#define ISIS_AOCS_SET_CONTROL_TARGET_ID {0x24}
#define ISIS_AOCS_SET_CONTROL_TARGET_GSR_ID {0x24}
#define ISIS_AOCS_SET_CONTROL_TARGET_LVLH_ID {0x24}
#define ISIS_AOCS_SET_CONTROL_TARGET_QUAT_ID {0x24}
#define ISIS_AOCS_SET_CONTROL_TARGET_SPIN_ID {0x24}
#define ISIS_AOCS_GET_CONTROL_TARGET_ID {0x25}
#define ISIS_AOCS_GET_CONTROL_TARGET_LVLH_ID {0x25}
#define ISIS_AOCS_GET_CONTROL_TARGET_QUAT_ID {0x25}
#define ISIS_AOCS_GET_CONTROL_TARGET_SPIN_ID {0x25}
#define ISIS_AOCS_SET_CONTROL_TARGET_FOR_MODES_ID {0x26}
#define ISIS_AOCS_SET_MTM_SOURCE_ID {0x29}
#define ISIS_AOCS_SET_MTM_DEPLOYMENT_ID {0x2A}
#define ISIS_AOCS_COPY_OPERATIONAL_MODE_CONFIG_ID {0x2D}
#define ISIS_AOCS_RESET_AOCS_ID {0x2F}
#define ISIS_AOCS_GET_CURRENT_GENERAL_TELEMETRY_ID {0x30}
#define ISIS_AOCS_GET_GENERAL_TELEMETRY_ID {0x30}
#define ISIS_AOCS_GET_VERSION_ID {0x31}
#define ISIS_AOCS_GET_TRACE_EVENT_ID {0x32}
#define ISIS_AOCS_GET_FAULT_LOG_ID {0x33}
#define ISIS_AOCS_RETRIEVE_POWER_TLM_ID {0x34}
#define ISIS_AOCS_RETRIEVE_SINGLE_SUBSYSTEM_TLM_ID {0x35}
#define ISIS_AOCS_RETRIEVE_IMTQ_TLM_ID {0x35, 0x03}
#define ISIS_AOCS_RETRIEVE_SCG_TLM_ID {0x35, 0x05}
#define ISIS_AOCS_RETRIEVE_CUBEWHEEL_TLM_ID {0x35, 0x06}
#define ISIS_AOCS_RETRIEVE_RW25_TLM_ID {0x35, 0x06}
#define ISIS_AOCS_RETRIEVE_GNSS_TLM_ID {0x35, 0x0C}
#define ISIS_AOCS_RETRIEVE_STR_TLM_ID {0x35, 0x0D}
#define ISIS_AOCS_RETRIEVE_ENP_TLM_ID {0x35, 0x0E}
#define ISIS_AOCS_RETRIEVE_THR_TLM_ID {0x35, 0x0E}
#define ISIS_AOCS_RETRIEVE_CURRENT_SUBSYSTEM_TLM_ID {0x36}
#define ISIS_AOCS_RETRIEVE_SUBSYSTEM_TLM_ID {0x36}
#define ISIS_AOCS_RETRIEVE_SINGLE_AOCS_TLM_ID {0x37}
#define ISIS_AOCS_RETRIEVE_SYSTEM_STATUS_ID {0x37, 0x00}
#define ISIS_AOCS_RETRIEVE_MEASUREMENTS_ID {0x37, 0x01}
#define ISIS_AOCS_RETRIEVE_PROCESSED_SENSOR_DATA_ID {0x37, 0x02}
#define ISIS_AOCS_RETRIEVE_EPHEMERIS_ID {0x37, 0x03}
#define ISIS_AOCS_RETRIEVE_STATE_ESTIMATE_ID {0x37, 0x04}
#define ISIS_AOCS_RETRIEVE_CONTROL_OUTPUT_ID {0x37, 0x06}
#define ISIS_AOCS_RETRIEVE_ACTUATION_OUTPUT_ID {0x37, 0x07}
#define ISIS_AOCS_RETRIEVE_EULER_ANGLES_ID {0x37, 0x08}
#define ISIS_AOCS_RETRIEVE_BIAS_ESTIMATION_OUTPUT_ID {0x37, 0x09}
#define ISIS_AOCS_RETRIEVE_AOCS_TLM_ID {0x38}
#define ISIS_AOCS_RETRIEVE_CURRENT_AOCS_TLM_ID {0x38}
#define ISIS_AOCS_RETRIEVE_ACTUATION_STATE_ID {0x3D}
#define ISIS_AOCS_RETRIEVE_AOCS_INT_TLM_ID {0x3E}
#define ISIS_AOCS_GET_TRACE_LOG_ID {0x3F}
#define ISIS_AOCS_DBG_UART_GET_READ_DATA_ID {0x40}
#define ISIS_AOCS_DBG_I2C_GET_READ_DATA_ID {0x41}
#define ISIS_AOCS_DBG_SPI_GET_READ_DATA_ID {0x42}
#define ISIS_AOCS_DBG_RS485_GET_READ_DATA_ID {0x43}
#define ISIS_AOCS_DBG_MTM_EXT_SCK_CONFIGURE_OUTPUT_ID {0x45}
#define ISIS_AOCS_DBG_PIO_CONFIGURE_ID {0x45}
#define ISIS_AOCS_DBG_GNSS_ENABLE_SET_ID {0x46}
#define ISIS_AOCS_DBG_GNSS_RESET_SET_ID {0x46}
#define ISIS_AOCS_DBG_MTM_EXT_CS1_SET_ID {0x46}
#define ISIS_AOCS_DBG_MTM_EXT_CS2_SET_ID {0x46}
#define ISIS_AOCS_DBG_MTM_EXT_SCK_SET_ID {0x46}
#define ISIS_AOCS_DBG_PIO_SET_ID {0x46}
#define ISIS_AOCS_DBG_GNSS_NVALID_GET_ID {0x47}
#define ISIS_AOCS_DBG_GNSS_PPS_GET_ID {0x47}
#define ISIS_AOCS_DBG_PIO_GET_ID {0x47}
#define ISIS_AOCS_SET_SUBSYSTEM_MODE_ID {0x50}
#define ISIS_AOCS_RW_SET_BYPASS_ID {0x52}
#define ISIS_AOCS_RW_SET_BYPASS_OFF_ID {0x52, 0x00}
#define ISIS_AOCS_RW_SET_BYPASS_RPM_ID {0x52, 0x01}
#define ISIS_AOCS_RW_SET_BYPASS_DUTY_CYCLE_ID {0x52, 0x04}
#define ISIS_AOCS_IMTQ_SET_BYPASS_ID {0x54}
#define ISIS_AOCS_IMTQ_SET_BYPASS_OFF_ID {0x54, 0x00}
#define ISIS_AOCS_IMTQ_SET_BYPASS_DIPOLE_ID {0x54, 0x01}
#define ISIS_AOCS_IMTQ_SET_BYPASS_BDOT_ID {0x54, 0x02}
#define ISIS_AOCS_IMTQ_SET_BYPASS_BRF_ID {0x54, 0x03}
#define ISIS_AOCS_IMTQ_SET_BYPASS_SINE_ID {0x54, 0x04}
#define ISIS_AOCS_HDRM_ARM_ID {0x58}
#define ISIS_AOCS_HDRM_STOP_ID {0x59}
#define ISIS_AOCS_HDRM_GET_STATUS_ID {0x5A}
#define ISIS_AOCS_THR_CHECK_PASSWORD_ID {0x60}
#define ISIS_AOCS_ENP_HOT_STANDBY_ID {0x61}
#define ISIS_AOCS_TM_ARM_FIRING_ID {0x61}
#define ISIS_AOCS_ENP_START_FIRING_ID {0x62}
#define ISIS_AOCS_TM_START_FIRING_ID {0x62}
#define ISIS_AOCS_ENP_STOP_FIRING_ID {0x63}
#define ISIS_AOCS_TM_STOP_FIRING_ID {0x63}
#define ISIS_AOCS_ENP_COOLDOWN_ID {0x64}
#define ISIS_AOCS_TM_START_COMMISSIONING_ID {0x64}
#define ISIS_AOCS_ENP_MANUAL_HEATUP_ID {0x65}
#define ISIS_AOCS_TM_STOP_COMMISSIONING_ID {0x65}
#define ISIS_AOCS_TM_START_GROUND_TEST_ID {0x66}
#define ISIS_AOCS_ENP_SCRIPT_GET_INFO_ID {0x67}
#define ISIS_AOCS_TM_STOP_GROUND_TEST_ID {0x67}
#define ISIS_AOCS_ENP_SCRIPT_START_ID {0x68}
#define ISIS_AOCS_TM_CLEAR_ERRORS_ID {0x68}
#define ISIS_AOCS_ENP_SCRIPT_ABORT_ID {0x69}
#define ISIS_AOCS_GNSS_GET_OUTPUT_ID {0x6C}
#define ISIS_AOCS_GNSS_GET_PPS_STATUS_ID {0x6D}
#define ISIS_AOCS_GNSS_SET_LOGGING_ID {0x6E}
#define ISIS_AOCS_SCG_GET_SYSTEM_OUTPUT_ID {0x70}
#define ISIS_AOCS_AURIGA_CHANGE_STATE_ID {0x79}
#define ISIS_AOCS_TDD_ID {0x7F}
#define ISIS_AOCS_TDD_DELAY_TASK_ID {0x7F}
#define ISIS_AOCS_TDD_DEPLOY_ID {0x7F}
#define ISIS_AOCS_TDD_SET_SUBSYS_ERROR_ID {0x7F}
#define ISIS_AOCS_TDD_SPOOF_ADC_ID {0x7F}
#define ISIS_AOCS_TDD_SPOOF_MTM_ID {0x7F}
#define ISIS_AOCS_TDD_SPOOF_MTM_EXT_ID {0x7F}
#define ISIS_AOCS_REBOOT_ID {0x80}
#define ISIS_AOCS_READ_PARAMS_FROM_FILE_ID {0x82}
#define ISIS_AOCS_COMMIT_PARAMS_ID {0x83}
#define ISIS_AOCS_DUMP_PARAMS_ID {0x84}
#define ISIS_AOCS_CLEAR_FRAM_ID {0x85}
#define ISIS_AOCS_DBG_DUMP_STACK_INFO_ID {0x8F}
#define ISIS_AOCS_FW_ERASE_SLOT_ID {0x90}
#define ISIS_AOCS_FW_WRITE_SLOT_ID {0x91}
#define ISIS_AOCS_LS_ID {0x97}
#define ISIS_AOCS_FORMAT_ID {0x98}
#define ISIS_AOCS_UPDATE_TLE_ID {0xA0}
#define ISIS_AOCS_CLEAR_TELEMETRY_ID {0xBD}
#define ISIS_AOCS_DBG_DUMP_INTERNAL_TELEMETRY_ID {0xBE}
#define ISIS_AOCS_DUMP_TELEMETRY_ID {0xBF}
#define ISIS_AOCS_DBG_GNSS_UART_WRITE_READ_ID {0xC0}
#define ISIS_AOCS_DBG_GNSS_UART_WRITE_READ_TEST_DATA_ID {0xC0}
#define ISIS_AOCS_DBG_UART_WRITE_READ_ID {0xC0}
#define ISIS_AOCS_DBG_I2C_WRITE_READ_ID {0xC1}
#define ISIS_AOCS_DBG_I2C_WRITE_READ_TEST_DEVICE_ID {0xC1}
#define ISIS_AOCS_DBG_MTM_EXT_SPI_WRITE_READ_ID {0xC2}
#define ISIS_AOCS_DBG_MTM_EXT_SPI_WRITE_READ_TEST_DATA_ID {0xC2}
#define ISIS_AOCS_DBG_SPI_WRITE_READ_ID {0xC2}
#define ISIS_AOCS_DBG_RS485_WRITE_READ_ID {0xC3}
#define ISIS_AOCS_SET_SUBSYSTEM_POWER_BYPASS_ID {0xD0}
#define ISIS_AOCS_CUBEWHEEL_SET_I2C_ADDRESS_ID {0xD4}
#define ISIS_AOCS_HDRM_FIRE_ID {0xD8}
#define ISIS_AOCS_LENSRND_LOAD_FILE_ID {0xDC}
#define ISIS_AOCS_THR_SET_PASSWORD_ID {0xE0}
#define ISIS_AOCS_ENP_WRITE_REGISTER_ID {0xE2}
#define ISIS_AOCS_ENP_RAMP_REGISTER_ID {0xE3}
#define ISIS_AOCS_ENP_SCRIPT_LOAD_ID {0xE4}
#define ISIS_AOCS_ENP_SCRIPT_UPLINK_ID {0xE5}
#define ISIS_AOCS_GNSS_SEND_COMMAND_ID {0xEC}
#define ISIS_AOCS_GNSS_CAPTURE_SPECTRUM_ID {0xED}
#define ISIS_AOCS_GNSS_DUMP_LOG_ID {0xEE}
#define ISIS_AOCS_SCG_REQUEST_SYSTEM_OUTPUT_ID {0xF0}
#define ISIS_AOCS_SCG_LOAD_CONFIG_ID {0xF1}
#define ISIS_AOCS_SCG_UPDATE_FW_ID {0xF3}
#define ISIS_AOCS_SCG_SELECT_FW_ID {0xF4}
#define ISIS_AOCS_SCG_RECOVER_FW_ID {0xF5}
#define ISIS_AOCS_SCG_CONFIG_SAVE_ID {0xF6}
#define ISIS_AOCS_AURIGA_SET_FW_ID {0xF8}
#define ISIS_AOCS_AURIGA_PHOTO_ID {0xF9}
#define ISIS_AOCS_AURIGA_START_LOGGING_ID {0xFA}
#define ISIS_AOCS_AURIGA_UPDATE_FW_ID {0xFB}
#define ISIS_AOCS_AURIGA_DOWNLOAD_FILE_ID {0xFC}
#define ISIS_AOCS_AURIGA_UPLOAD_FILE_ID {0xFD}
#define ISIS_AOCS_AURIGA_UPLOAD_FIRMWARE_ID {0xFD}
#define ISIS_AOCS_AURIGA_COPY_PARAM_ID {0xFE}

#define ISIS_AOCS_SET_PARAM_PARTIAL_MAX_DATA_LENGTH 160
#define ISIS_AOCS_SET_PARAM_PARTIAL_F_MAX_DATA_LENGTH 8
#define ISIS_AOCS_SET_PARAM_PARTIAL_GENERIC_MAX_DATA_LENGTH 160
#define ISIS_AOCS_SET_PARAM_PARTIAL_HEX32_MAX_DATA_LENGTH 8
#define ISIS_AOCS_SET_PARAM_PARTIAL_INT32_MAX_DATA_LENGTH 8
#define ISIS_AOCS_SET_PARAM_PARTIAL_UINT32_MAX_DATA_LENGTH 8
#define ISIS_AOCS_SET_CONTROL_TARGET_FOR_MODES_MAX_PARAMS_LENGTH 44
#define ISIS_AOCS_RW_SET_BYPASS_MAX_SPEED_LENGTH 4
#define ISIS_AOCS_IMTQ_SET_BYPASS_MAX_PARAMS_LENGTH 4
#define ISIS_AOCS_TDD_MAX_DATA_LENGTH 64
#define ISIS_AOCS_DBG_GNSS_UART_WRITE_READ_MAX_WRITE_DATA_LENGTH 256
#define ISIS_AOCS_DBG_UART_WRITE_READ_MAX_WRITE_DATA_LENGTH 256
#define ISIS_AOCS_DBG_I2C_WRITE_READ_MAX_WRITE_DATA_LENGTH 256
#define ISIS_AOCS_DBG_MTM_EXT_SPI_WRITE_READ_MAX_WRITE_DATA_LENGTH 256
#define ISIS_AOCS_DBG_SPI_WRITE_READ_MAX_WRITE_DATA_LENGTH 256
#define ISIS_AOCS_DBG_RS485_WRITE_READ_MAX_WRITE_DATA_LENGTH 256
#define ISIS_AOCS_ENP_WRITE_REGISTER_MAX_WRITE_DATA_LENGTH 110
#define ISIS_AOCS_ENP_SCRIPT_UPLINK_MAX_DATA_LENGTH 250

/* ENUMS */

/*!
 * AOCS processing status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__aocs_status_t
{
    isis_aocs__aocs_status__ok = 0,
    isis_aocs__aocs_status__invalid_tle = 1,
    isis_aocs__aocs_status__invalid_mode = 2,
    isis_aocs__aocs_status__time_config_error = 3,
    isis_aocs__aocs_status__sensorhandling_config_error = 4,
    isis_aocs__aocs_status__ephemeris_config_error = 5,
    isis_aocs__aocs_status__determination_config_error = 6,
    isis_aocs__aocs_status__targeting_config_error = 7,
    isis_aocs__aocs_status__control_config_error = 8,
    isis_aocs__aocs_status__actuatorhandling_config_error = 9,
    isis_aocs__aocs_status__sensorhandling_error = 10,
    isis_aocs__aocs_status__ephemeris_error = 11,
    isis_aocs__aocs_status__determination_error = 12,
    isis_aocs__aocs_status__targeting_error = 13,
    isis_aocs__aocs_status__control_error = 14,
    isis_aocs__aocs_status__actuatorhandling_error = 15,
    isis_aocs__aocs_status__sensor_postprocessing_error = 16,
    isis_aocs__aocs_status__not_implemented = 99,
} isis_aocs__aocs_status_t;

/*!
 * AOCS telemetry type to fetch
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__aocs_tlm_type_t
{
    isis_aocs__aocs_tlm_type__system_status = 0u,
    isis_aocs__aocs_tlm_type__measurements = 1u,
    isis_aocs__aocs_tlm_type__processed_sensor_data = 2u,
    isis_aocs__aocs_tlm_type__ephemeris = 3u,
    isis_aocs__aocs_tlm_type__state_estimate = 4u,
    isis_aocs__aocs_tlm_type__targeting = 5u,
    isis_aocs__aocs_tlm_type__control_output = 6u,
    isis_aocs__aocs_tlm_type__actuation_output = 7u,
    isis_aocs__aocs_tlm_type__euler_angles = 8u,
    isis_aocs__aocs_tlm_type__bias_estimation_output = 9u,
} isis_aocs__aocs_tlm_type_t;

/*!
 * Which parameter file copy from SD card into FRAM
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_copy_param_type_t
{
    isis_aocs__auriga_copy_param_type__oh1 = 1u,
    isis_aocs__auriga_copy_param_type__oh2 = 2u,
    isis_aocs__auriga_copy_param_type__customer_oh1 = 3u,
    isis_aocs__auriga_copy_param_type__customer_oh2 = 4u,
    isis_aocs__auriga_copy_param_type__customer = 5u,
} isis_aocs__auriga_copy_param_type_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_log_aam_t
{
    isis_aocs__auriga_log_aam__none = 0u,
    isis_aocs__auriga_log_aam__aam = 1u,
} isis_aocs__auriga_log_aam_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_log_arm_t
{
    isis_aocs__auriga_log_arm__none = 0u,
    isis_aocs__auriga_log_arm__arm = 1u,
} isis_aocs__auriga_log_arm_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_log_atm_t
{
    isis_aocs__auriga_log_atm__none = 0u,
    isis_aocs__auriga_log_atm__atm = 1u,
} isis_aocs__auriga_log_atm_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_log_diag_t
{
    isis_aocs__auriga_log_diag__none = 0u,
    isis_aocs__auriga_log_diag__diag = 1u,
} isis_aocs__auriga_log_diag_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_log_status_t
{
    isis_aocs__auriga_log_status__none = 0u,
    isis_aocs__auriga_log_status__status = 1u,
} isis_aocs__auriga_log_status_t;

/*!
 * Optical head opcode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_oh_opcode_t
{
    isis_aocs__auriga_oh_opcode__switch_off = 0u,
    isis_aocs__auriga_oh_opcode__switch_on = 1u,
} isis_aocs__auriga_oh_opcode_t;

/*!
 * Optical head mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_oh_state_t
{
    isis_aocs__auriga_oh_state__oh_state_off = 0u,
    isis_aocs__auriga_oh_state__oh_state_wait_on = 1u,
    isis_aocs__auriga_oh_state__oh_state_init_tempo = 2u,
    isis_aocs__auriga_oh_state__oh_state_check = 3u,
    isis_aocs__auriga_oh_state__oh_state_config = 4u,
    isis_aocs__auriga_oh_state__oh_state_standby = 5u,
    isis_aocs__auriga_oh_state__oh_state_acqff = 6u,
    isis_aocs__auriga_oh_state__oh_state_acqhw = 7u,
    isis_aocs__auriga_oh_state__oh_state_first_trk = 8u,
    isis_aocs__auriga_oh_state__oh_state_tracking = 9u,
    isis_aocs__auriga_oh_state__oh_state_photo = 10u,
    isis_aocs__auriga_oh_state__oh_state_sensortest = 11u,
    isis_aocs__auriga_oh_state__oh_state_wait_acq = 12u,
    isis_aocs__auriga_oh_state__oh_state_off_request = 16u,
    isis_aocs__auriga_oh_state__oh_state_wait_off = 17u,
    isis_aocs__auriga_oh_state__oh_state_irq_err = 18u,
    isis_aocs__auriga_oh_state__oh_state_raz = 19u,
    isis_aocs__auriga_oh_state__oh_state_off_err = 20u,
    isis_aocs__auriga_oh_state__oh_state_timeout = 21u,
} isis_aocs__auriga_oh_state_t;

/*!
 * Optical head temperature alarm status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_oh_temp_alarm_t
{
    isis_aocs__auriga_oh_temp_alarm__no_alarm = 0u,
    isis_aocs__auriga_oh_temp_alarm__alarm = 1u,
} isis_aocs__auriga_oh_temp_alarm_t;

/*!
 * Auriga state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_state_t
{
    isis_aocs__auriga_state__off = 0u,
    isis_aocs__auriga_state__init = 1u,
    isis_aocs__auriga_state__ready = 2u,
    isis_aocs__auriga_state__error = 3u,
    isis_aocs__auriga_state__uploading = 4u,
    isis_aocs__auriga_state__downloading = 5u,
    isis_aocs__auriga_state__firmware_update = 6u,
    isis_aocs__auriga_state__photo = 7u,
    isis_aocs__auriga_state__logging = 8u,
} isis_aocs__auriga_state_t;

/*!
 * Startracker mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_str_select_mode_t
{
    isis_aocs__auriga_str_select_mode__standby = 0u,
    isis_aocs__auriga_str_select_mode__aam = 1u,
    isis_aocs__auriga_str_select_mode__atm = 2u,
    isis_aocs__auriga_str_select_mode__arm = 3u,
} isis_aocs__auriga_str_select_mode_t;

/*!
 * Startracker mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__auriga_str_state_t
{
    isis_aocs__auriga_str_state__initialization = 0u,
    isis_aocs__auriga_str_state__standby = 1u,
    isis_aocs__auriga_str_state__selftest = 2u,
    isis_aocs__auriga_str_state__photo = 3u,
    isis_aocs__auriga_str_state__tracking = 4u,
    isis_aocs__auriga_str_state__aom_arm = 5u,
    isis_aocs__auriga_str_state__aom_aam = 6u,
    isis_aocs__auriga_str_state__aom_atm = 7u,
} isis_aocs__auriga_str_state_t;

/*!
 * Boot reason
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__boot_reason_t
{
    isis_aocs__boot_reason__unknown_reason = 0u,
    isis_aocs__boot_reason__normal = 1u,
    isis_aocs__boot_reason__abort = 2u,
    isis_aocs__boot_reason__out_of_memory = 3u,
    isis_aocs__boot_reason__stack_overflow = 4u,
    isis_aocs__boot_reason__unexpected = 5u,
} isis_aocs__boot_reason_t;

/*!
 * Bootloader type
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__boot_stage_t
{
    isis_aocs__boot_stage__one_shot = 0u,
    isis_aocs__boot_stage__permanent = 1u,
    isis_aocs__boot_stage__fallback = 2u,
} isis_aocs__boot_stage_t;

/*!
 * Command identifier (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__cmd_id_t
{
    isis_aocs__cmd_id__check_result = 0u,
    isis_aocs__cmd_id__check_threaded = 1u,
    isis_aocs__cmd_id__get_tc_stats = 2u,
    isis_aocs__cmd_id__set_param = 3u,
    isis_aocs__cmd_id__get_param = 4u,
    isis_aocs__cmd_id__reset_param = 5u,
    isis_aocs__cmd_id__clear_pending_params = 6u,
    isis_aocs__cmd_id__check_params = 7u,
    isis_aocs__cmd_id__set_time = 8u,
    isis_aocs__cmd_id__get_time = 9u,
    isis_aocs__cmd_id__clear_trace_log = 10u,
    isis_aocs__cmd_id__force_trace_log_switch = 11u,
    isis_aocs__cmd_id__clear_fault_log = 12u,
    isis_aocs__cmd_id__set_param_partial = 13u,
    isis_aocs__cmd_id__get_param_partial = 14u,
    isis_aocs__cmd_id__dbg_get_stack_info = 15u,
    isis_aocs__cmd_id__fw_set_one_shot = 16u,
    isis_aocs__cmd_id__fw_set_permanent = 17u,
    isis_aocs__cmd_id__get_boot_info = 18u,
    isis_aocs__cmd_id__fw_set_slot_metadata = 19u,
    isis_aocs__cmd_id__fw_get_slot_metadata = 20u,
    isis_aocs__cmd_id__get_boot_log = 21u,
    isis_aocs__cmd_id__ls_get = 23u,
    isis_aocs__cmd_id__up_start = 24u,
    isis_aocs__cmd_id__up_chunk = 25u,
    isis_aocs__cmd_id__up_store = 26u,
    isis_aocs__cmd_id__up_verify = 27u,
    isis_aocs__cmd_id__down_prepare = 28u,
    isis_aocs__cmd_id__down_small_chunk = 29u,
    isis_aocs__cmd_id__down_large_chunk = 30u,
    isis_aocs__cmd_id__down_file_info = 31u,
    isis_aocs__cmd_id__apply_aocs_config = 32u,
    isis_aocs__cmd_id__set_operating_mode = 34u,
    isis_aocs__cmd_id__get_operating_mode = 35u,
    isis_aocs__cmd_id__set_control_target = 36u,
    isis_aocs__cmd_id__get_control_target = 37u,
    isis_aocs__cmd_id__set_control_target_for_modes = 38u,
    isis_aocs__cmd_id__set_mtm_source = 41u,
    isis_aocs__cmd_id__set_mtm_deployment = 42u,
    isis_aocs__cmd_id__copy_operational_mode_config = 45u,
    isis_aocs__cmd_id__reset_aocs = 47u,
    isis_aocs__cmd_id__get_general_telemetry = 48u,
    isis_aocs__cmd_id__get_version = 49u,
    isis_aocs__cmd_id__get_trace_event = 50u,
    isis_aocs__cmd_id__get_fault_log = 51u,
    isis_aocs__cmd_id__retrieve_power_tlm = 52u,
    isis_aocs__cmd_id__retrieve_single_subsystem_tlm = 53u,
    isis_aocs__cmd_id__retrieve_subsystem_tlm = 54u,
    isis_aocs__cmd_id__retrieve_single_aocs_tlm = 55u,
    isis_aocs__cmd_id__retrieve_aocs_tlm = 56u,
    isis_aocs__cmd_id__retrieve_actuation_state = 61u,
    isis_aocs__cmd_id__retrieve_aocs_int_tlm = 62u,
    isis_aocs__cmd_id__get_trace_log = 63u,
    isis_aocs__cmd_id__dbg_uart_get_read_data = 64u,
    isis_aocs__cmd_id__dbg_i2c_get_read_data = 65u,
    isis_aocs__cmd_id__dbg_spi_get_read_data = 66u,
    isis_aocs__cmd_id__dbg_rs485_get_read_data = 67u,
    isis_aocs__cmd_id__dbg_pio_configure = 69u,
    isis_aocs__cmd_id__dbg_pio_set = 70u,
    isis_aocs__cmd_id__dbg_pio_get = 71u,
    isis_aocs__cmd_id__set_subsystem_mode = 80u,
    isis_aocs__cmd_id__rw_set_bypass = 82u,
    isis_aocs__cmd_id__imtq_set_bypass = 84u,
    isis_aocs__cmd_id__hdrm_arm = 88u,
    isis_aocs__cmd_id__hdrm_stop = 89u,
    isis_aocs__cmd_id__hdrm_get_status = 90u,
    isis_aocs__cmd_id__thr_check_password = 96u,
    isis_aocs__cmd_id__enp_hot_standby = 97u,
    isis_aocs__cmd_id__enp_start_firing = 98u,
    isis_aocs__cmd_id__enp_stop_firing = 99u,
    isis_aocs__cmd_id__enp_cooldown = 100u,
    isis_aocs__cmd_id__enp_manual_heatup = 101u,
    isis_aocs__cmd_id__tm_start_ground_test = 102u,
    isis_aocs__cmd_id__enp_script_get_info = 103u,
    isis_aocs__cmd_id__enp_script_start = 104u,
    isis_aocs__cmd_id__enp_script_abort = 105u,
    isis_aocs__cmd_id__gnss_get_output = 108u,
    isis_aocs__cmd_id__gnss_get_pps_status = 109u,
    isis_aocs__cmd_id__gnss_set_logging = 110u,
    isis_aocs__cmd_id__scg_get_system_output = 112u,
    isis_aocs__cmd_id__auriga_change_state = 121u,
    isis_aocs__cmd_id__tdd = 127u,
    isis_aocs__cmd_id__reboot = 128u,
    isis_aocs__cmd_id__read_params_from_file = 130u,
    isis_aocs__cmd_id__commit_params = 131u,
    isis_aocs__cmd_id__dump_params = 132u,
    isis_aocs__cmd_id__clear_fram = 133u,
    isis_aocs__cmd_id__dbg_dump_stack_info = 143u,
    isis_aocs__cmd_id__fw_erase_slot = 144u,
    isis_aocs__cmd_id__fw_write_slot = 145u,
    isis_aocs__cmd_id__ls = 151u,
    isis_aocs__cmd_id__format = 152u,
    isis_aocs__cmd_id__update_tle = 160u,
    isis_aocs__cmd_id__clear_telemetry = 189u,
    isis_aocs__cmd_id__dbg_dump_internal_telemetry = 190u,
    isis_aocs__cmd_id__dump_telemetry = 191u,
    isis_aocs__cmd_id__dbg_uart_write_read = 192u,
    isis_aocs__cmd_id__dbg_i2c_write_read = 193u,
    isis_aocs__cmd_id__dbg_spi_write_read = 194u,
    isis_aocs__cmd_id__dbg_rs485_write_read = 195u,
    isis_aocs__cmd_id__set_subsystem_power_bypass = 208u,
    isis_aocs__cmd_id__cubewheel_set_i2c_address = 212u,
    isis_aocs__cmd_id__hdrm_fire = 216u,
    isis_aocs__cmd_id__lensrnd_load_file = 220u,
    isis_aocs__cmd_id__thr_set_password = 224u,
    isis_aocs__cmd_id__enp_write_register = 226u,
    isis_aocs__cmd_id__enp_ramp_register = 227u,
    isis_aocs__cmd_id__enp_script_load = 228u,
    isis_aocs__cmd_id__enp_script_uplink = 229u,
    isis_aocs__cmd_id__gnss_send_command = 236u,
    isis_aocs__cmd_id__gnss_capture_spectrum = 237u,
    isis_aocs__cmd_id__gnss_dump_log = 238u,
    isis_aocs__cmd_id__scg_request_system_output = 240u,
    isis_aocs__cmd_id__scg_load_config = 241u,
    isis_aocs__cmd_id__scg_update_fw = 243u,
    isis_aocs__cmd_id__scg_select_fw = 244u,
    isis_aocs__cmd_id__scg_recover_fw = 245u,
    isis_aocs__cmd_id__scg_config_save = 246u,
    isis_aocs__cmd_id__auriga_set_fw = 248u,
    isis_aocs__cmd_id__auriga_photo = 249u,
    isis_aocs__cmd_id__auriga_start_logging = 250u,
    isis_aocs__cmd_id__auriga_update_fw = 251u,
    isis_aocs__cmd_id__auriga_download_file = 252u,
    isis_aocs__cmd_id__auriga_upload_file = 253u,
    isis_aocs__cmd_id__auriga_copy_param = 254u,
} isis_aocs__cmd_id_t;

/*!
 * Control output type
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__ctrl_output_type_t
{
    isis_aocs__ctrl_output_type__none = 0u,
    isis_aocs__ctrl_output_type__dipole = 1u,
    isis_aocs__ctrl_output_type__torque = 2u,
} isis_aocs__ctrl_output_type_t;

/*!
 * Whether to correct for the Earth's rotation in the GSR target
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__ctrl_target_gsr_rotation_correction_t
{
    isis_aocs__ctrl_target_gsr_rotation_correction__no_correction = 0u,
    isis_aocs__ctrl_target_gsr_rotation_correction__earth_rotation_correction = 1u,
} isis_aocs__ctrl_target_gsr_rotation_correction_t;

/*!
 * Control target type
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__ctrl_target_type_t
{
    isis_aocs__ctrl_target_type__inertial_quaternion = 0u,
    isis_aocs__ctrl_target_type__lvlh_euler = 1u,
    isis_aocs__ctrl_target_type__inertial_axis = 2u,
    isis_aocs__ctrl_target_type__lvlh_axis = 3u,
    isis_aocs__ctrl_target_type__ecef_axis = 4u,
    isis_aocs__ctrl_target_type__wgs84_point = 5u,
    isis_aocs__ctrl_target_type__sun_direction = 6u,
    isis_aocs__ctrl_target_type__magnetic_field_direction = 7u,
    isis_aocs__ctrl_target_type__relative_velocity_direction = 8u,
    isis_aocs__ctrl_target_type__body_spin_rate = 9u,
    isis_aocs__ctrl_target_type__wgs84_ground_speed_reduction = 10u,
    isis_aocs__ctrl_target_type__none = 255u,
} isis_aocs__ctrl_target_type_t;

/*!
 * Deployable deployment status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__deployment_t
{
    isis_aocs__deployment__stowed = 0u,
    isis_aocs__deployment__deployed = 1u,
} isis_aocs__deployment_t;

/*!
 * Eclipse status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__eclipse_t
{
    isis_aocs__eclipse__in_light = 0u,
    isis_aocs__eclipse__in_eclipse = 1u,
} isis_aocs__eclipse_t;

/*!
 * Critical fuse state (fault requires manufacturer assessment)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_criticalfuse_t
{
    isis_aocs__enpulsion_criticalfuse__nominal = 0u,
    isis_aocs__enpulsion_criticalfuse__critical_error = 1u,
} isis_aocs__enpulsion_criticalfuse_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_emittermode_t
{
    isis_aocs__enpulsion_emittermode__automatic = 0u,
    isis_aocs__enpulsion_emittermode__manual = 1u,
    isis_aocs__enpulsion_emittermode__debug = 2u,
} isis_aocs__enpulsion_emittermode_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_extractormode_t
{
    isis_aocs__enpulsion_extractormode__automatic = 0u,
    isis_aocs__enpulsion_extractormode__manual = 1u,
    isis_aocs__enpulsion_extractormode__debug = 2u,
} isis_aocs__enpulsion_extractormode_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_heatermode_t
{
    isis_aocs__enpulsion_heatermode__automatic = 0u,
    isis_aocs__enpulsion_heatermode__manual = 1u,
    isis_aocs__enpulsion_heatermode__debug = 2u,
} isis_aocs__enpulsion_heatermode_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_neutralizerbias_t
{
    isis_aocs__enpulsion_neutralizerbias__disabled = 0u,
    isis_aocs__enpulsion_neutralizerbias__enabled = 1u,
} isis_aocs__enpulsion_neutralizerbias_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_neutralizerfilament_t
{
    isis_aocs__enpulsion_neutralizerfilament__first = 1u,
    isis_aocs__enpulsion_neutralizerfilament__second = 2u,
} isis_aocs__enpulsion_neutralizerfilament_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_neutralizermode_t
{
    isis_aocs__enpulsion_neutralizermode__automatic = 0u,
    isis_aocs__enpulsion_neutralizermode__manual = 1u,
    isis_aocs__enpulsion_neutralizermode__debug = 2u,
} isis_aocs__enpulsion_neutralizermode_t;

/*!
 * Operational Mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_opmode_t
{
    isis_aocs__enpulsion_opmode__disabled = 0u,
    isis_aocs__enpulsion_opmode__enabled = 1u,
} isis_aocs__enpulsion_opmode_t;

/*!
 * Recoverable fuse state (fault can be recovered by operator)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_recoverablefuse_t
{
    isis_aocs__enpulsion_recoverablefuse__nominal = 0u,
    isis_aocs__enpulsion_recoverablefuse__recoverable_error = 1u,
} isis_aocs__enpulsion_recoverablefuse_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_status_t
{
    isis_aocs__enpulsion_status__idle = 0u,
    isis_aocs__enpulsion_status__heating = 1u,
    isis_aocs__enpulsion_status__standby = 2u,
    isis_aocs__enpulsion_status__operation = 3u,
} isis_aocs__enpulsion_status_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__enpulsion_temperaturemode_t
{
    isis_aocs__enpulsion_temperaturemode__automatic = 0u,
    isis_aocs__enpulsion_temperaturemode__manual = 1u,
} isis_aocs__enpulsion_temperaturemode_t;

/*!
 * Fatal error type if encountered
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fatal_error_t
{
    isis_aocs__fatal_error__no_error = 0u,
    isis_aocs__fatal_error__power_system_error = 1u,
    isis_aocs__fatal_error__tick_counter_almost_overflowing = 2u,
    isis_aocs__fatal_error__tick_counter_overflow = 3u,
    isis_aocs__fatal_error__system_voltage_low = 4u,
    isis_aocs__fatal_error__thruster_communication_error = 5u,
} isis_aocs__fatal_error_t;

/*!
 * FPDB Index (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fpdb_bias_est_options_index_t
{
    isis_aocs__fpdb_bias_est_options_index__aocs_mtm_int_bias_est_options = 261u,
    isis_aocs__fpdb_bias_est_options_index__aocs_mtm_ext_bias_est_options = 268u,
    isis_aocs__fpdb_bias_est_options_index__aocs_scg_raw_bias_est_options = 285u,
    isis_aocs__fpdb_bias_est_options_index__aocs_scg_filt_bias_est_options = 292u,
    isis_aocs__fpdb_bias_est_options_index__all = 2147483647u,
} isis_aocs__fpdb_bias_est_options_index_t;

/*!
 * FPDB Index (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fpdb_ctrl_target_index_t
{
    isis_aocs__fpdb_ctrl_target_index__control_target_0 = 704u,
    isis_aocs__fpdb_ctrl_target_index__control_target_1 = 705u,
    isis_aocs__fpdb_ctrl_target_index__control_target_2 = 706u,
    isis_aocs__fpdb_ctrl_target_index__control_target_3 = 707u,
    isis_aocs__fpdb_ctrl_target_index__control_target_4 = 708u,
    isis_aocs__fpdb_ctrl_target_index__control_target_5 = 709u,
    isis_aocs__fpdb_ctrl_target_index__control_target_6 = 710u,
    isis_aocs__fpdb_ctrl_target_index__control_target_7 = 711u,
    isis_aocs__fpdb_ctrl_target_index__control_target_8 = 712u,
    isis_aocs__fpdb_ctrl_target_index__control_target_9 = 713u,
    isis_aocs__fpdb_ctrl_target_index__control_target_10 = 714u,
    isis_aocs__fpdb_ctrl_target_index__control_target_11 = 715u,
    isis_aocs__fpdb_ctrl_target_index__control_target_12 = 716u,
    isis_aocs__fpdb_ctrl_target_index__control_target_13 = 717u,
    isis_aocs__fpdb_ctrl_target_index__control_target_14 = 718u,
    isis_aocs__fpdb_ctrl_target_index__control_target_15 = 719u,
    isis_aocs__fpdb_ctrl_target_index__all = 2147483647u,
} isis_aocs__fpdb_ctrl_target_index_t;

/*!
 * FPDB Index (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fpdb_index_t
{
    isis_aocs__fpdb_index__mission_name = 0u,
    isis_aocs__fpdb_index__misc_mass_storage_device = 1u,
    isis_aocs__fpdb_index__misc_boot_count = 2u,
    isis_aocs__fpdb_index__misc_software_version = 3u,
    isis_aocs__fpdb_index__misc_expected_reboot = 4u,
    isis_aocs__fpdb_index__misc_command_watchdog_timeout = 5u,
    isis_aocs__fpdb_index__misc_i2c_master_speed = 6u,
    isis_aocs__fpdb_index__log_directory = 16u,
    isis_aocs__fpdb_index__log_file_entries = 19u,
    isis_aocs__fpdb_index__log_current_level = 20u,
    isis_aocs__fpdb_index__log_current_file = 21u,
    isis_aocs__fpdb_index__tlm_genhk_period_ms = 23u,
    isis_aocs__fpdb_index__tlm_genhk_file_entries = 25u,
    isis_aocs__fpdb_index__tlm_genhk_file_path = 26u,
    isis_aocs__fpdb_index__tlm_subsys_period_ms = 27u,
    isis_aocs__fpdb_index__tlm_subsys_file_entries = 29u,
    isis_aocs__fpdb_index__tlm_subsys_file_path = 30u,
    isis_aocs__fpdb_index__tlm_aocs_file_entries = 32u,
    isis_aocs__fpdb_index__tlm_aocs_file_path = 33u,
    isis_aocs__fpdb_index__tlm_aocs_ex_file_entries = 35u,
    isis_aocs__fpdb_index__tlm_aocs_ex_file_path = 36u,
    isis_aocs__fpdb_index__time_source = 48u,
    isis_aocs__fpdb_index__time_sync_interval_ms = 49u,
    isis_aocs__fpdb_index__time_gnss_update_subsystems = 50u,
    isis_aocs__fpdb_index__time_gnss_max_age_ms = 51u,
    isis_aocs__fpdb_index__time_pps_polarity = 52u,
    isis_aocs__fpdb_index__time_sync_timestamp = 53u,
    isis_aocs__fpdb_index__imtq_config = 64u,
    isis_aocs__fpdb_index__mtm_ext_config = 65u,
    isis_aocs__fpdb_index__scg_config = 66u,
    isis_aocs__fpdb_index__scg_temperature_coefficients = 67u,
    isis_aocs__fpdb_index__scg_version = 68u,
    isis_aocs__fpdb_index__lensrnd_fss_config = 69u,
    isis_aocs__fpdb_index__hdrm_config = 70u,
    isis_aocs__fpdb_index__rw_config = 71u,
    isis_aocs__fpdb_index__gnss_config = 72u,
    isis_aocs__fpdb_index__gnss_log_config = 73u,
    isis_aocs__fpdb_index__str_config = 74u,
    isis_aocs__fpdb_index__str_version = 75u,
    isis_aocs__fpdb_index__thr_config = 76u,
    isis_aocs__fpdb_index__lensrnd_fss_correction_table_status = 77u,
    isis_aocs__fpdb_index__mtm_ext_mounting_states = 86u,
    isis_aocs__fpdb_index__tle = 104u,
    isis_aocs__fpdb_index__tle_generated = 105u,
    isis_aocs__fpdb_index__high_resolution_feedback_frequency = 106u,
    isis_aocs__fpdb_index__operating_mode = 107u,
    isis_aocs__fpdb_index__total_impulse = 108u,
    isis_aocs__fpdb_index__operating_mode_switch_config_0 = 112u,
    isis_aocs__fpdb_index__operating_mode_switch_config_1 = 113u,
    isis_aocs__fpdb_index__operating_mode_switch_config_2 = 114u,
    isis_aocs__fpdb_index__operating_mode_switch_config_3 = 115u,
    isis_aocs__fpdb_index__operating_mode_switch_config_4 = 116u,
    isis_aocs__fpdb_index__operating_mode_switch_config_5 = 117u,
    isis_aocs__fpdb_index__operating_mode_switch_config_6 = 118u,
    isis_aocs__fpdb_index__operating_mode_switch_config_7 = 119u,
    isis_aocs__fpdb_index__operating_mode_switch_config_8 = 120u,
    isis_aocs__fpdb_index__operating_mode_switch_config_9 = 121u,
    isis_aocs__fpdb_index__operating_mode_switch_config_10 = 122u,
    isis_aocs__fpdb_index__operating_mode_switch_config_11 = 123u,
    isis_aocs__fpdb_index__operating_mode_switch_config_12 = 124u,
    isis_aocs__fpdb_index__operating_mode_switch_config_13 = 125u,
    isis_aocs__fpdb_index__operating_mode_switch_config_14 = 126u,
    isis_aocs__fpdb_index__operating_mode_switch_config_15 = 127u,
    isis_aocs__fpdb_index__aocs_moi = 128u,
    isis_aocs__fpdb_index__aocs_loop_duration = 129u,
    isis_aocs__fpdb_index__aocs_residual_dipole = 130u,
    isis_aocs__fpdb_index__aocs_eph_igrf_max_age = 134u,
    isis_aocs__fpdb_index__aocs_eph_pos_vel_source = 135u,
    isis_aocs__fpdb_index__aocs_eph_gnss_max_age = 136u,
    isis_aocs__fpdb_index__aocs_eph_tle_generation = 137u,
    isis_aocs__fpdb_index__aocs_sun_sensor_selection = 140u,
    isis_aocs__fpdb_index__aocs_det_thrust_vector = 141u,
    isis_aocs__fpdb_index__aocs_det_thrust_arm = 142u,
    isis_aocs__fpdb_index__aocs_gsr_ip_time = 146u,
    isis_aocs__fpdb_index__aocs_angular_rate_limit = 150u,
    isis_aocs__fpdb_index__aocs_mtq_actuation_duration = 152u,
    isis_aocs__fpdb_index__aocs_mtq_mounting = 153u,
    isis_aocs__fpdb_index__aocs_mtq_saturation_limit = 154u,
    isis_aocs__fpdb_index__aocs_rw_i = 157u,
    isis_aocs__fpdb_index__aocs_rw_omega_max = 159u,
    isis_aocs__fpdb_index__aocs_rw_max_acceleration = 160u,
    isis_aocs__fpdb_index__aocs_rw1_mounting = 161u,
    isis_aocs__fpdb_index__aocs_rw1_disabled = 162u,
    isis_aocs__fpdb_index__aocs_rw1_omega_deadband = 163u,
    isis_aocs__fpdb_index__aocs_rw1_omega_threshold = 165u,
    isis_aocs__fpdb_index__aocs_rw2_mounting = 166u,
    isis_aocs__fpdb_index__aocs_rw2_disabled = 167u,
    isis_aocs__fpdb_index__aocs_rw2_omega_deadband = 168u,
    isis_aocs__fpdb_index__aocs_rw2_omega_threshold = 170u,
    isis_aocs__fpdb_index__aocs_rw3_mounting = 171u,
    isis_aocs__fpdb_index__aocs_rw3_disabled = 172u,
    isis_aocs__fpdb_index__aocs_rw3_omega_deadband = 173u,
    isis_aocs__fpdb_index__aocs_rw3_omega_threshold = 175u,
    isis_aocs__fpdb_index__aocs_rw4_mounting = 176u,
    isis_aocs__fpdb_index__aocs_rw4_disabled = 177u,
    isis_aocs__fpdb_index__aocs_rw4_omega_deadband = 178u,
    isis_aocs__fpdb_index__aocs_rw4_omega_threshold = 180u,
    isis_aocs__fpdb_index__aocs_mtm_int_bias = 256u,
    isis_aocs__fpdb_index__aocs_mtm_int_scale_factor = 257u,
    isis_aocs__fpdb_index__aocs_mtm_int_non_orthogonality = 258u,
    isis_aocs__fpdb_index__aocs_mtm_int_mounting = 259u,
    isis_aocs__fpdb_index__aocs_mtm_int_noise = 260u,
    isis_aocs__fpdb_index__aocs_mtm_int_bias_est_options = 261u,
    isis_aocs__fpdb_index__aocs_mtm_int_filter_coefficient = 262u,
    isis_aocs__fpdb_index__aocs_mtm_ext_bias = 263u,
    isis_aocs__fpdb_index__aocs_mtm_ext_scale_factor = 264u,
    isis_aocs__fpdb_index__aocs_mtm_ext_non_orthogonality = 265u,
    isis_aocs__fpdb_index__aocs_mtm_ext_mounting = 266u,
    isis_aocs__fpdb_index__aocs_mtm_ext_noise = 267u,
    isis_aocs__fpdb_index__aocs_mtm_ext_bias_est_options = 268u,
    isis_aocs__fpdb_index__aocs_mtm_ext_filter_coefficient = 269u,
    isis_aocs__fpdb_index__aocs_pda_count = 272u,
    isis_aocs__fpdb_index__aocs_pda_mounting = 273u,
    isis_aocs__fpdb_index__aocs_pda_bias = 274u,
    isis_aocs__fpdb_index__aocs_pda_albedo_threshold = 275u,
    isis_aocs__fpdb_index__aocs_pda_noise = 276u,
    isis_aocs__fpdb_index__aocs_scg_raw_bias = 280u,
    isis_aocs__fpdb_index__aocs_scg_raw_scale_factor = 281u,
    isis_aocs__fpdb_index__aocs_scg_raw_non_orthogonality = 282u,
    isis_aocs__fpdb_index__aocs_scg_raw_mounting = 283u,
    isis_aocs__fpdb_index__aocs_scg_raw_noise = 284u,
    isis_aocs__fpdb_index__aocs_scg_raw_bias_est_options = 285u,
    isis_aocs__fpdb_index__aocs_scg_raw_filter_coefficient = 286u,
    isis_aocs__fpdb_index__aocs_scg_filt_bias = 287u,
    isis_aocs__fpdb_index__aocs_scg_filt_scale_factor = 288u,
    isis_aocs__fpdb_index__aocs_scg_filt_non_orthogonality = 289u,
    isis_aocs__fpdb_index__aocs_scg_filt_mounting = 290u,
    isis_aocs__fpdb_index__aocs_scg_filt_noise = 291u,
    isis_aocs__fpdb_index__aocs_scg_filt_bias_est_options = 292u,
    isis_aocs__fpdb_index__aocs_scg_filt_filter_coefficient = 293u,
    isis_aocs__fpdb_index__aocs_fss_1_bias = 296u,
    isis_aocs__fpdb_index__aocs_fss_1_mounting = 297u,
    isis_aocs__fpdb_index__aocs_fss_1_noise = 298u,
    isis_aocs__fpdb_index__aocs_fss_1_min_intensity = 299u,
    isis_aocs__fpdb_index__aocs_fss_1_alpha_max = 300u,
    isis_aocs__fpdb_index__aocs_fss_1_beta_max = 301u,
    isis_aocs__fpdb_index__aocs_fss_1_correction_table_enabled = 302u,
    isis_aocs__fpdb_index__aocs_fss_1_alpha_offset = 303u,
    isis_aocs__fpdb_index__aocs_fss_1_beta_offset = 304u,
    isis_aocs__fpdb_index__aocs_fss_1_quadrant_min_intensity = 305u,
    isis_aocs__fpdb_index__aocs_fss_2_bias = 312u,
    isis_aocs__fpdb_index__aocs_fss_2_mounting = 313u,
    isis_aocs__fpdb_index__aocs_fss_2_noise = 314u,
    isis_aocs__fpdb_index__aocs_fss_2_min_intensity = 315u,
    isis_aocs__fpdb_index__aocs_fss_2_alpha_max = 316u,
    isis_aocs__fpdb_index__aocs_fss_2_beta_max = 317u,
    isis_aocs__fpdb_index__aocs_fss_2_correction_table_enabled = 318u,
    isis_aocs__fpdb_index__aocs_fss_2_alpha_offset = 319u,
    isis_aocs__fpdb_index__aocs_fss_2_beta_offset = 320u,
    isis_aocs__fpdb_index__aocs_fss_2_quadrant_min_intensity = 321u,
    isis_aocs__fpdb_index__aocs_fss_3_bias = 328u,
    isis_aocs__fpdb_index__aocs_fss_3_mounting = 329u,
    isis_aocs__fpdb_index__aocs_fss_3_noise = 330u,
    isis_aocs__fpdb_index__aocs_fss_3_min_intensity = 331u,
    isis_aocs__fpdb_index__aocs_fss_3_alpha_max = 332u,
    isis_aocs__fpdb_index__aocs_fss_3_beta_max = 333u,
    isis_aocs__fpdb_index__aocs_fss_3_correction_table_enabled = 334u,
    isis_aocs__fpdb_index__aocs_fss_3_alpha_offset = 335u,
    isis_aocs__fpdb_index__aocs_fss_3_beta_offset = 336u,
    isis_aocs__fpdb_index__aocs_fss_3_quadrant_min_intensity = 337u,
    isis_aocs__fpdb_index__aocs_fss_4_bias = 344u,
    isis_aocs__fpdb_index__aocs_fss_4_mounting = 345u,
    isis_aocs__fpdb_index__aocs_fss_4_noise = 346u,
    isis_aocs__fpdb_index__aocs_fss_4_min_intensity = 347u,
    isis_aocs__fpdb_index__aocs_fss_4_alpha_max = 348u,
    isis_aocs__fpdb_index__aocs_fss_4_beta_max = 349u,
    isis_aocs__fpdb_index__aocs_fss_4_correction_table_enabled = 350u,
    isis_aocs__fpdb_index__aocs_fss_4_alpha_offset = 351u,
    isis_aocs__fpdb_index__aocs_fss_4_beta_offset = 352u,
    isis_aocs__fpdb_index__aocs_fss_4_quadrant_min_intensity = 353u,
    isis_aocs__fpdb_index__aocs_str_1_mounting = 368u,
    isis_aocs__fpdb_index__aocs_str_1_att_noise = 369u,
    isis_aocs__fpdb_index__aocs_str_1_rate_noise = 370u,
    isis_aocs__fpdb_index__aocs_str_1_reference_frame = 371u,
    isis_aocs__fpdb_index__aocs_str_2_mounting = 376u,
    isis_aocs__fpdb_index__aocs_str_2_att_noise = 377u,
    isis_aocs__fpdb_index__aocs_str_2_rate_noise = 378u,
    isis_aocs__fpdb_index__aocs_str_2_reference_frame = 379u,
    isis_aocs__fpdb_index__aocs_mode_state_est_0 = 384u,
    isis_aocs__fpdb_index__aocs_mode_state_est_1 = 385u,
    isis_aocs__fpdb_index__aocs_mode_state_est_2 = 386u,
    isis_aocs__fpdb_index__aocs_mode_state_est_3 = 387u,
    isis_aocs__fpdb_index__aocs_mode_state_est_4 = 388u,
    isis_aocs__fpdb_index__aocs_mode_state_est_5 = 389u,
    isis_aocs__fpdb_index__aocs_mode_state_est_6 = 390u,
    isis_aocs__fpdb_index__aocs_mode_state_est_7 = 391u,
    isis_aocs__fpdb_index__aocs_mode_state_est_8 = 392u,
    isis_aocs__fpdb_index__aocs_mode_state_est_9 = 393u,
    isis_aocs__fpdb_index__aocs_mode_state_est_10 = 394u,
    isis_aocs__fpdb_index__aocs_mode_state_est_11 = 395u,
    isis_aocs__fpdb_index__aocs_mode_state_est_12 = 396u,
    isis_aocs__fpdb_index__aocs_mode_state_est_13 = 397u,
    isis_aocs__fpdb_index__aocs_mode_state_est_14 = 398u,
    isis_aocs__fpdb_index__aocs_mode_state_est_15 = 399u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_0 = 400u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_1 = 401u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_2 = 402u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_3 = 403u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_4 = 404u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_5 = 405u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_6 = 406u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_7 = 407u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_8 = 408u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_9 = 409u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_10 = 410u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_11 = 411u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_12 = 412u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_13 = 413u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_14 = 414u,
    isis_aocs__fpdb_index__aocs_mode_state_est_sensors_15 = 415u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_0 = 416u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_1 = 417u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_2 = 418u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_3 = 419u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_4 = 420u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_5 = 421u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_6 = 422u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_7 = 423u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_8 = 424u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_9 = 425u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_10 = 426u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_11 = 427u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_12 = 428u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_13 = 429u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_14 = 430u,
    isis_aocs__fpdb_index__aocs_mode_state_est_params_15 = 431u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_0 = 432u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_1 = 433u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_2 = 434u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_3 = 435u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_4 = 436u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_5 = 437u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_6 = 438u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_7 = 439u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_8 = 440u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_9 = 441u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_10 = 442u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_11 = 443u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_12 = 444u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_13 = 445u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_14 = 446u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_15 = 447u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_0 = 448u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_1 = 449u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_2 = 450u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_3 = 451u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_4 = 452u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_5 = 453u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_6 = 454u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_7 = 455u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_8 = 456u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_9 = 457u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_10 = 458u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_11 = 459u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_12 = 460u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_13 = 461u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_14 = 462u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_sensors_15 = 463u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_0 = 464u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_1 = 465u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_2 = 466u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_3 = 467u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_4 = 468u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_5 = 469u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_6 = 470u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_7 = 471u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_8 = 472u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_9 = 473u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_10 = 474u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_11 = 475u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_12 = 476u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_13 = 477u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_14 = 478u,
    isis_aocs__fpdb_index__aocs_mode_rawrate_est_params_15 = 479u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_0 = 480u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_1 = 481u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_2 = 482u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_3 = 483u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_4 = 484u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_5 = 485u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_6 = 486u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_7 = 487u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_8 = 488u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_9 = 489u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_10 = 490u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_11 = 491u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_12 = 492u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_13 = 493u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_14 = 494u,
    isis_aocs__fpdb_index__aocs_mode_mag_sensor_15 = 495u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_0 = 496u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_1 = 497u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_2 = 498u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_3 = 499u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_4 = 500u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_5 = 501u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_6 = 502u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_7 = 503u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_8 = 504u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_9 = 505u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_10 = 506u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_11 = 507u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_12 = 508u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_13 = 509u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_14 = 510u,
    isis_aocs__fpdb_index__aocs_mode_target_predict_15 = 511u,
    isis_aocs__fpdb_index__aocs_mode_controller_0 = 512u,
    isis_aocs__fpdb_index__aocs_mode_controller_1 = 513u,
    isis_aocs__fpdb_index__aocs_mode_controller_2 = 514u,
    isis_aocs__fpdb_index__aocs_mode_controller_3 = 515u,
    isis_aocs__fpdb_index__aocs_mode_controller_4 = 516u,
    isis_aocs__fpdb_index__aocs_mode_controller_5 = 517u,
    isis_aocs__fpdb_index__aocs_mode_controller_6 = 518u,
    isis_aocs__fpdb_index__aocs_mode_controller_7 = 519u,
    isis_aocs__fpdb_index__aocs_mode_controller_8 = 520u,
    isis_aocs__fpdb_index__aocs_mode_controller_9 = 521u,
    isis_aocs__fpdb_index__aocs_mode_controller_10 = 522u,
    isis_aocs__fpdb_index__aocs_mode_controller_11 = 523u,
    isis_aocs__fpdb_index__aocs_mode_controller_12 = 524u,
    isis_aocs__fpdb_index__aocs_mode_controller_13 = 525u,
    isis_aocs__fpdb_index__aocs_mode_controller_14 = 526u,
    isis_aocs__fpdb_index__aocs_mode_controller_15 = 527u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_0 = 528u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_1 = 529u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_2 = 530u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_3 = 531u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_4 = 532u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_5 = 533u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_6 = 534u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_7 = 535u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_8 = 536u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_9 = 537u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_10 = 538u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_11 = 539u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_12 = 540u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_13 = 541u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_14 = 542u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_law_15 = 543u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_0 = 544u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_1 = 545u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_2 = 546u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_3 = 547u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_4 = 548u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_5 = 549u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_6 = 550u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_7 = 551u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_8 = 552u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_9 = 553u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_10 = 554u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_11 = 555u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_12 = 556u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_13 = 557u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_14 = 558u,
    isis_aocs__fpdb_index__aocs_mode_ctrl_params_15 = 559u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_0 = 560u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_1 = 561u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_2 = 562u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_3 = 563u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_4 = 564u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_5 = 565u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_6 = 566u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_7 = 567u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_8 = 568u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_9 = 569u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_10 = 570u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_11 = 571u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_12 = 572u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_13 = 573u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_14 = 574u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_15 = 575u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_0 = 576u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_1 = 577u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_2 = 578u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_3 = 579u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_4 = 580u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_5 = 581u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_6 = 582u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_7 = 583u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_8 = 584u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_9 = 585u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_10 = 586u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_11 = 587u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_12 = 588u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_13 = 589u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_14 = 590u,
    isis_aocs__fpdb_index__aocs_mode_momentum_management_params_15 = 591u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_0 = 592u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_1 = 593u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_2 = 594u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_3 = 595u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_4 = 596u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_5 = 597u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_6 = 598u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_7 = 599u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_8 = 600u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_9 = 601u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_10 = 602u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_11 = 603u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_12 = 604u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_13 = 605u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_14 = 606u,
    isis_aocs__fpdb_index__aocs_mode_rw_ref_speed_15 = 607u,
    isis_aocs__fpdb_index__control_target_0 = 704u,
    isis_aocs__fpdb_index__control_target_1 = 705u,
    isis_aocs__fpdb_index__control_target_2 = 706u,
    isis_aocs__fpdb_index__control_target_3 = 707u,
    isis_aocs__fpdb_index__control_target_4 = 708u,
    isis_aocs__fpdb_index__control_target_5 = 709u,
    isis_aocs__fpdb_index__control_target_6 = 710u,
    isis_aocs__fpdb_index__control_target_7 = 711u,
    isis_aocs__fpdb_index__control_target_8 = 712u,
    isis_aocs__fpdb_index__control_target_9 = 713u,
    isis_aocs__fpdb_index__control_target_10 = 714u,
    isis_aocs__fpdb_index__control_target_11 = 715u,
    isis_aocs__fpdb_index__control_target_12 = 716u,
    isis_aocs__fpdb_index__control_target_13 = 717u,
    isis_aocs__fpdb_index__control_target_14 = 718u,
    isis_aocs__fpdb_index__control_target_15 = 719u,
    isis_aocs__fpdb_index__fdir_disabled_faults = 768u,
    isis_aocs__fpdb_index__fdir_rate_limit_time_window = 770u,
    isis_aocs__fpdb_index__fdir_imtq_invalid_samples_allowed = 771u,
    isis_aocs__fpdb_index__fdir_mtm_ext_invalid_samples_allowed = 772u,
    isis_aocs__fpdb_index__fdir_scg_invalid_samples_allowed = 773u,
    isis_aocs__fpdb_index__fdir_rw_invalid_samples_allowed = 776u,
    isis_aocs__fpdb_index__fdir_thr_invalid_samples_allowed = 777u,
    isis_aocs__fpdb_index__fdir_control_error_limit_time_window = 778u,
    isis_aocs__fpdb_index__fdir_thr_control_error_limit = 779u,
    isis_aocs__fpdb_index__fdir_rate_limit_0 = 800u,
    isis_aocs__fpdb_index__fdir_rate_limit_1 = 801u,
    isis_aocs__fpdb_index__fdir_rate_limit_2 = 802u,
    isis_aocs__fpdb_index__fdir_rate_limit_3 = 803u,
    isis_aocs__fpdb_index__fdir_rate_limit_4 = 804u,
    isis_aocs__fpdb_index__fdir_rate_limit_5 = 805u,
    isis_aocs__fpdb_index__fdir_rate_limit_6 = 806u,
    isis_aocs__fpdb_index__fdir_rate_limit_7 = 807u,
    isis_aocs__fpdb_index__fdir_rate_limit_8 = 808u,
    isis_aocs__fpdb_index__fdir_rate_limit_9 = 809u,
    isis_aocs__fpdb_index__fdir_rate_limit_10 = 810u,
    isis_aocs__fpdb_index__fdir_rate_limit_11 = 811u,
    isis_aocs__fpdb_index__fdir_rate_limit_12 = 812u,
    isis_aocs__fpdb_index__fdir_rate_limit_13 = 813u,
    isis_aocs__fpdb_index__fdir_rate_limit_14 = 814u,
    isis_aocs__fpdb_index__fdir_rate_limit_15 = 815u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_0 = 816u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_1 = 817u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_2 = 818u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_3 = 819u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_4 = 820u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_5 = 821u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_6 = 822u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_7 = 823u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_8 = 824u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_9 = 825u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_10 = 826u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_11 = 827u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_12 = 828u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_13 = 829u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_14 = 830u,
    isis_aocs__fpdb_index__fdir_rate_limit_mode_fallback_15 = 831u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_0 = 832u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_1 = 833u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_2 = 834u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_3 = 835u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_4 = 836u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_5 = 837u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_6 = 838u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_7 = 839u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_8 = 840u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_9 = 841u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_10 = 842u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_11 = 843u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_12 = 844u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_13 = 845u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_14 = 846u,
    isis_aocs__fpdb_index__fdir_aocs_processing_errors_left_15 = 847u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_0 = 848u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_1 = 849u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_2 = 850u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_3 = 851u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_4 = 852u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_5 = 853u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_6 = 854u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_7 = 855u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_8 = 856u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_9 = 857u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_10 = 858u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_11 = 859u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_12 = 860u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_13 = 861u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_14 = 862u,
    isis_aocs__fpdb_index__fdir_state_est_var_limit_15 = 863u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_0 = 864u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_1 = 865u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_2 = 866u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_3 = 867u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_4 = 868u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_5 = 869u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_6 = 870u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_7 = 871u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_8 = 872u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_9 = 873u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_10 = 874u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_11 = 875u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_12 = 876u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_13 = 877u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_14 = 878u,
    isis_aocs__fpdb_index__fdir_rate_est_var_limit_15 = 879u,
    isis_aocs__fpdb_index__fdir_subsys_required_0 = 880u,
    isis_aocs__fpdb_index__fdir_subsys_required_1 = 881u,
    isis_aocs__fpdb_index__fdir_subsys_required_2 = 882u,
    isis_aocs__fpdb_index__fdir_subsys_required_3 = 883u,
    isis_aocs__fpdb_index__fdir_subsys_required_4 = 884u,
    isis_aocs__fpdb_index__fdir_subsys_required_5 = 885u,
    isis_aocs__fpdb_index__fdir_subsys_required_6 = 886u,
    isis_aocs__fpdb_index__fdir_subsys_required_7 = 887u,
    isis_aocs__fpdb_index__fdir_subsys_required_8 = 888u,
    isis_aocs__fpdb_index__fdir_subsys_required_9 = 889u,
    isis_aocs__fpdb_index__fdir_subsys_required_10 = 890u,
    isis_aocs__fpdb_index__fdir_subsys_required_11 = 891u,
    isis_aocs__fpdb_index__fdir_subsys_required_12 = 892u,
    isis_aocs__fpdb_index__fdir_subsys_required_13 = 893u,
    isis_aocs__fpdb_index__fdir_subsys_required_14 = 894u,
    isis_aocs__fpdb_index__fdir_subsys_required_15 = 895u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_0 = 896u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_1 = 897u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_2 = 898u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_3 = 899u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_4 = 900u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_5 = 901u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_6 = 902u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_7 = 903u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_8 = 904u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_9 = 905u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_10 = 906u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_11 = 907u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_12 = 908u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_13 = 909u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_14 = 910u,
    isis_aocs__fpdb_index__fdir_subsys_required_mode_fallback_15 = 911u,
    isis_aocs__fpdb_index__fdir_subsys_retries_0 = 912u,
    isis_aocs__fpdb_index__fdir_subsys_retries_1 = 913u,
    isis_aocs__fpdb_index__fdir_subsys_retries_2 = 914u,
    isis_aocs__fpdb_index__fdir_subsys_retries_3 = 915u,
    isis_aocs__fpdb_index__fdir_subsys_retries_4 = 916u,
    isis_aocs__fpdb_index__fdir_subsys_retries_5 = 917u,
    isis_aocs__fpdb_index__fdir_subsys_retries_6 = 918u,
    isis_aocs__fpdb_index__fdir_subsys_retries_7 = 919u,
    isis_aocs__fpdb_index__fdir_subsys_retries_8 = 920u,
    isis_aocs__fpdb_index__fdir_subsys_retries_9 = 921u,
    isis_aocs__fpdb_index__fdir_subsys_retries_10 = 922u,
    isis_aocs__fpdb_index__fdir_subsys_retries_11 = 923u,
    isis_aocs__fpdb_index__fdir_subsys_retries_12 = 924u,
    isis_aocs__fpdb_index__fdir_subsys_retries_13 = 925u,
    isis_aocs__fpdb_index__fdir_subsys_retries_14 = 926u,
    isis_aocs__fpdb_index__fdir_subsys_retries_15 = 927u,
    isis_aocs__fpdb_index__fdir_current_limit_0 = 928u,
    isis_aocs__fpdb_index__fdir_current_limit_1 = 929u,
    isis_aocs__fpdb_index__fdir_current_limit_2 = 930u,
    isis_aocs__fpdb_index__fdir_current_limit_3 = 931u,
    isis_aocs__fpdb_index__fdir_current_limit_4 = 932u,
    isis_aocs__fpdb_index__fdir_current_limit_5 = 933u,
    isis_aocs__fpdb_index__fdir_current_limit_6 = 934u,
    isis_aocs__fpdb_index__fdir_current_limit_7 = 935u,
    isis_aocs__fpdb_index__fdir_current_limit_8 = 936u,
    isis_aocs__fpdb_index__fdir_current_limit_9 = 937u,
    isis_aocs__fpdb_index__fdir_current_limit_10 = 938u,
    isis_aocs__fpdb_index__fdir_current_limit_11 = 939u,
    isis_aocs__fpdb_index__fdir_current_limit_12 = 940u,
    isis_aocs__fpdb_index__fdir_current_limit_13 = 941u,
    isis_aocs__fpdb_index__fdir_current_limit_14 = 942u,
    isis_aocs__fpdb_index__fdir_current_limit_15 = 943u,
    isis_aocs__fpdb_index__fdir_current_limit_16 = 944u,
    isis_aocs__fpdb_index__fdir_current_limit_17 = 945u,
    isis_aocs__fpdb_index__fdir_current_limit_18 = 946u,
    isis_aocs__fpdb_index__fdir_current_limit_19 = 947u,
    isis_aocs__fpdb_index__fdir_current_limit_20 = 948u,
    isis_aocs__fpdb_index__fdir_current_limit_21 = 949u,
    isis_aocs__fpdb_index__fdir_current_limit_22 = 950u,
    isis_aocs__fpdb_index__fdir_current_limit_23 = 951u,
    isis_aocs__fpdb_index__fdir_current_limit_24 = 952u,
    isis_aocs__fpdb_index__fdir_current_limit_25 = 953u,
    isis_aocs__fpdb_index__fdir_current_limit_26 = 954u,
    isis_aocs__fpdb_index__fdir_current_limit_27 = 955u,
    isis_aocs__fpdb_index__fdir_current_limit_28 = 956u,
    isis_aocs__fpdb_index__fdir_current_limit_29 = 957u,
    isis_aocs__fpdb_index__fdir_current_limit_30 = 958u,
    isis_aocs__fpdb_index__fdir_current_limit_31 = 959u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_0 = 960u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_1 = 961u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_2 = 962u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_3 = 963u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_4 = 964u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_5 = 965u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_6 = 966u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_7 = 967u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_8 = 968u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_9 = 969u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_10 = 970u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_11 = 971u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_12 = 972u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_13 = 973u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_14 = 974u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_15 = 975u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_16 = 976u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_17 = 977u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_18 = 978u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_19 = 979u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_20 = 980u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_21 = 981u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_22 = 982u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_23 = 983u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_24 = 984u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_25 = 985u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_26 = 986u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_27 = 987u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_28 = 988u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_29 = 989u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_30 = 990u,
    isis_aocs__fpdb_index__fdir_current_limit_time_window_31 = 991u,
    isis_aocs__fpdb_index__num = 1024u,
    isis_aocs__fpdb_index__all = 2147483647u,
} isis_aocs__fpdb_index_t;

/*!
 * FPDB Index (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fpdb_mode_sensors_index_t
{
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_0 = 400u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_1 = 401u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_2 = 402u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_3 = 403u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_4 = 404u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_5 = 405u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_6 = 406u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_7 = 407u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_8 = 408u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_9 = 409u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_10 = 410u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_11 = 411u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_12 = 412u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_13 = 413u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_14 = 414u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_state_est_sensors_15 = 415u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_0 = 448u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_1 = 449u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_2 = 450u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_3 = 451u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_4 = 452u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_5 = 453u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_6 = 454u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_7 = 455u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_8 = 456u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_9 = 457u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_10 = 458u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_11 = 459u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_12 = 460u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_13 = 461u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_14 = 462u,
    isis_aocs__fpdb_mode_sensors_index__aocs_mode_rawrate_est_sensors_15 = 463u,
    isis_aocs__fpdb_mode_sensors_index__all = 2147483647u,
} isis_aocs__fpdb_mode_sensors_index_t;

/*!
 * FPDB Index (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fpdb_operating_mode_switch_config_t
{
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_0 = 112u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_1 = 113u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_2 = 114u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_3 = 115u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_4 = 116u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_5 = 117u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_6 = 118u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_7 = 119u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_8 = 120u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_9 = 121u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_10 = 122u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_11 = 123u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_12 = 124u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_13 = 125u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_14 = 126u,
    isis_aocs__fpdb_operating_mode_switch_config__operating_mode_switch_config_15 = 127u,
    isis_aocs__fpdb_operating_mode_switch_config__all = 2147483647u,
} isis_aocs__fpdb_operating_mode_switch_config_t;

/*!
 * FPDB Index (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fpdb_subsys_required_t
{
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_0 = 880u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_1 = 881u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_2 = 882u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_3 = 883u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_4 = 884u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_5 = 885u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_6 = 886u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_7 = 887u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_8 = 888u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_9 = 889u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_10 = 890u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_11 = 891u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_12 = 892u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_13 = 893u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_14 = 894u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_15 = 895u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_0 = 896u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_1 = 897u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_2 = 898u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_3 = 899u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_4 = 900u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_5 = 901u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_6 = 902u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_7 = 903u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_8 = 904u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_9 = 905u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_10 = 906u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_11 = 907u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_12 = 908u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_13 = 909u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_14 = 910u,
    isis_aocs__fpdb_subsys_required__fdir_subsys_required_mode_fallback_15 = 911u,
    isis_aocs__fpdb_subsys_required__all = 2147483647u,
} isis_aocs__fpdb_subsys_required_t;

/*!
 * FPDB Index (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fpdb_tle_index_t
{
    isis_aocs__fpdb_tle_index__tle = 104u,
    isis_aocs__fpdb_tle_index__tle_generated = 105u,
    isis_aocs__fpdb_tle_index__all = 2147483647u,
} isis_aocs__fpdb_tle_index_t;

/*!
 * Filesystem status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fs_status_t
{
    isis_aocs__fs_status__ok = 0u,
    isis_aocs__fs_status__disk_err = 1u,
    isis_aocs__fs_status__int_err = 2u,
    isis_aocs__fs_status__not_ready = 3u,
    isis_aocs__fs_status__no_file = 4u,
    isis_aocs__fs_status__no_path = 5u,
    isis_aocs__fs_status__invalid_name = 6u,
    isis_aocs__fs_status__denied = 7u,
    isis_aocs__fs_status__exist = 8u,
    isis_aocs__fs_status__invalid_object = 9u,
    isis_aocs__fs_status__write_protected = 10u,
    isis_aocs__fs_status__invalid_drive = 11u,
    isis_aocs__fs_status__not_enabled = 12u,
    isis_aocs__fs_status__no_filesystem = 13u,
    isis_aocs__fs_status__mkfs_aborted = 14u,
    isis_aocs__fs_status__timeout = 15u,
    isis_aocs__fs_status__locked = 16u,
    isis_aocs__fs_status__not_enough_core = 17u,
    isis_aocs__fs_status__too_many_open_files = 18u,
    isis_aocs__fs_status__invalid_parameter = 19u,
} isis_aocs__fs_status_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__gpio_function_t
{
    isis_aocs__gpio_function__input = 0u,
    isis_aocs__gpio_function__output_0 = 1u,
    isis_aocs__gpio_function__output_1 = 2u,
    isis_aocs__gpio_function__peripheral_a = 3u,
    isis_aocs__gpio_function__peripheral_b = 4u,
    isis_aocs__gpio_function__af_0 = 3u,
    isis_aocs__gpio_function__af_1 = 4u,
    isis_aocs__gpio_function__af_2 = 5u,
    isis_aocs__gpio_function__af_3 = 6u,
    isis_aocs__gpio_function__af_4 = 7u,
    isis_aocs__gpio_function__af_5 = 8u,
    isis_aocs__gpio_function__af_6 = 9u,
    isis_aocs__gpio_function__af_7 = 10u,
    isis_aocs__gpio_function__af_8 = 11u,
    isis_aocs__gpio_function__af_9 = 12u,
    isis_aocs__gpio_function__af_10 = 13u,
    isis_aocs__gpio_function__af_11 = 14u,
    isis_aocs__gpio_function__af_12 = 15u,
    isis_aocs__gpio_function__af_13 = 16u,
    isis_aocs__gpio_function__af_14 = 17u,
    isis_aocs__gpio_function__af_15 = 18u,
} isis_aocs__gpio_function_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__gpio_port_t
{
    isis_aocs__gpio_port__gpioa = 0u,
    isis_aocs__gpio_port__gpiob = 1u,
    isis_aocs__gpio_port__gpioc = 2u,
    isis_aocs__gpio_port__gpiod = 3u,
    isis_aocs__gpio_port__gpioe = 4u,
    isis_aocs__gpio_port__gpiof = 5u,
    isis_aocs__gpio_port__gpiog = 6u,
    isis_aocs__gpio_port__gpioh = 7u,
    isis_aocs__gpio_port__gpioi = 8u,
    isis_aocs__gpio_port__gpioj = 9u,
    isis_aocs__gpio_port__gpiok = 10u,
} isis_aocs__gpio_port_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__gpio_pull_t
{
    isis_aocs__gpio_pull__no_pull = 0u,
    isis_aocs__gpio_pull__pull_up = 1u,
    isis_aocs__gpio_pull__pull_down = 2u,
} isis_aocs__gpio_pull_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__gpio_state_t
{
    isis_aocs__gpio_state__low = 0u,
    isis_aocs__gpio_state__high = 255u,
} isis_aocs__gpio_state_t;

/*!
 * HDRM arming channels
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__hdrm_arming_channels_t
{
    isis_aocs__hdrm_arming_channels__none = 0u,
    isis_aocs__hdrm_arming_channels__a = 1u,
    isis_aocs__hdrm_arming_channels__b = 2u,
    isis_aocs__hdrm_arming_channels__ab = 3u,
    isis_aocs__hdrm_arming_channels__all = 255u,
} isis_aocs__hdrm_arming_channels_t;

/*!
 * HDRM firing channels
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__hdrm_firing_channels_t
{
    isis_aocs__hdrm_firing_channels__auto = 0u,
    isis_aocs__hdrm_firing_channels__a = 1u,
    isis_aocs__hdrm_firing_channels__b = 2u,
    isis_aocs__hdrm_firing_channels__ab = 3u,
    isis_aocs__hdrm_firing_channels__all = 255u,
} isis_aocs__hdrm_firing_channels_t;

/*!
 * Whether to force burning for the entire timeout, ignoring the confirmation switch signal
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__hdrm_force_t
{
    isis_aocs__hdrm_force__stop_on_confirmation = 0u,
    isis_aocs__hdrm_force__ignore_confirmation = 1u,
} isis_aocs__hdrm_force_t;

/*!
 * HDRM deployment stage
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__hdrm_stage_t
{
    isis_aocs__hdrm_stage__boot = 0u,
    isis_aocs__hdrm_stage__init = 1u,
    isis_aocs__hdrm_stage__armed_a = 2u,
    isis_aocs__hdrm_stage__armed_b = 3u,
    isis_aocs__hdrm_stage__armed_ab = 4u,
    isis_aocs__hdrm_stage__stopped = 5u,
    isis_aocs__hdrm_stage__ongoing = 6u,
    isis_aocs__hdrm_stage__ongoing_a = 7u,
    isis_aocs__hdrm_stage__ongoing_b = 8u,
    isis_aocs__hdrm_stage__timeout = 9u,
    isis_aocs__hdrm_stage__deployed = 10u,
} isis_aocs__hdrm_stage_t;

/*!
 * Deployable deployment status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__hdrm_state_t
{
    isis_aocs__hdrm_state__stowed = 0u,
    isis_aocs__hdrm_state__deployed = 1u,
} isis_aocs__hdrm_state_t;

/*!
 * Actuator bypass mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__imtq_bypass_mode_t
{
    isis_aocs__imtq_bypass_mode__ctrl_loop = 0u,
    isis_aocs__imtq_bypass_mode__bypass_manual = 1u,
    isis_aocs__imtq_bypass_mode__bypass_bdot = 2u,
    isis_aocs__imtq_bypass_mode__bypass_brf = 3u,
    isis_aocs__imtq_bypass_mode__bypass_sine = 4u,
} isis_aocs__imtq_bypass_mode_t;

/*!
 * IMTQ state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__imtq_state_t
{
    isis_aocs__imtq_state__off = 0u,
    isis_aocs__imtq_state__init = 1u,
    isis_aocs__imtq_state__idle = 2u,
    isis_aocs__imtq_state__error = 3u,
    isis_aocs__imtq_state__bypass = 4u,
} isis_aocs__imtq_state_t;

/*!
 * Error code
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__lensrnd_error_code_t
{
    isis_aocs__lensrnd_error_code__ok = 0u,
    isis_aocs__lensrnd_error_code__not_initialized = 1u,
    isis_aocs__lensrnd_error_code__invalid_param = 2u,
    isis_aocs__lensrnd_error_code__invalid_data = 3u,
    isis_aocs__lensrnd_error_code__file_not_found = 4u,
    isis_aocs__lensrnd_error_code__write_error = 5u,
    isis_aocs__lensrnd_error_code__checksum_mismatch = 6u,
    isis_aocs__lensrnd_error_code__alpha_measured_non_monotonic = 7u,
    isis_aocs__lensrnd_error_code__beta_measured_non_monotonic = 8u,
    isis_aocs__lensrnd_error_code__alpha_error_out_of_range = 9u,
    isis_aocs__lensrnd_error_code__beta_error_out_of_range = 10u,
    isis_aocs__lensrnd_error_code__fram_occupied = 11u,
} isis_aocs__lensrnd_error_code_t;

/*!
 * Magnetometer measurement source
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__mtm_source_t
{
    isis_aocs__mtm_source__internal = 0u,
    isis_aocs__mtm_source__external = 1u,
} isis_aocs__mtm_source_t;

/*!
 * IMTQ actuation state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__mtq_actuation_state_t
{
    isis_aocs__mtq_actuation_state__off = 0u,
    isis_aocs__mtq_actuation_state__running_aocs = 1u,
    isis_aocs__mtq_actuation_state__running_manual = 2u,
    isis_aocs__mtq_actuation_state__running_bdot = 3u,
    isis_aocs__mtq_actuation_state__error = 255u,
} isis_aocs__mtq_actuation_state_t;

/*!
 * Status of a hardware monitor telemetry field
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_hwmon_status_t
{
    isis_aocs__novatel_hwmon_status__ok = 0u,
    isis_aocs__novatel_hwmon_status__low_warning = 1u,
    isis_aocs__novatel_hwmon_status__low_error = 2u,
    isis_aocs__novatel_hwmon_status__high_warning = 3u,
    isis_aocs__novatel_hwmon_status__high_error = 4u,
    isis_aocs__novatel_hwmon_status__not_received = 15u,
} isis_aocs__novatel_hwmon_status_t;

/*!
 * Antenna connected status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_rxstatus_antenna_t
{
    isis_aocs__novatel_rxstatus_antenna__connected = 0u,
    isis_aocs__novatel_rxstatus_antenna__disconnected = 1u,
    isis_aocs__novatel_rxstatus_antenna__short_circuit = 2u,
} isis_aocs__novatel_rxstatus_antenna_t;

/*!
 * Receiver error status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_rxstatus_error_t
{
    isis_aocs__novatel_rxstatus_error__ok = 0u,
    isis_aocs__novatel_rxstatus_error__error = 1u,
} isis_aocs__novatel_rxstatus_error_t;

/*!
 * Receiver power status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_rxstatus_power_t
{
    isis_aocs__novatel_rxstatus_power__powered = 0u,
    isis_aocs__novatel_rxstatus_power__not_powered = 1u,
} isis_aocs__novatel_rxstatus_power_t;

/*!
 * Receiver status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_rxstatus_valid_t
{
    isis_aocs__novatel_rxstatus_valid__valid = 0u,
    isis_aocs__novatel_rxstatus_valid__invalid = 1u,
} isis_aocs__novatel_rxstatus_valid_t;

/*!
 * GNSS solution status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_sol_status_t
{
    isis_aocs__novatel_sol_status__computed = 0u,
    isis_aocs__novatel_sol_status__insuff_obs = 1u,
    isis_aocs__novatel_sol_status__noconv = 2u,
    isis_aocs__novatel_sol_status__singularity = 3u,
    isis_aocs__novatel_sol_status__covtrace = 4u,
    isis_aocs__novatel_sol_status__testdist = 5u,
    isis_aocs__novatel_sol_status__coldstart = 6u,
    isis_aocs__novatel_sol_status__vhlimit = 7u,
    isis_aocs__novatel_sol_status__variance = 8u,
    isis_aocs__novatel_sol_status__residuals = 9u,
    isis_aocs__novatel_sol_status__integrity = 13u,
    isis_aocs__novatel_sol_status__pending = 18u,
    isis_aocs__novatel_sol_status__invalidfix = 19u,
    isis_aocs__novatel_sol_status__unauth = 20u,
    isis_aocs__novatel_sol_status__invalidrate = 22u,
} isis_aocs__novatel_sol_status_t;

/*!
 * The frequency resolution of the spectrum
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_spectrum_fft_size_t
{
    isis_aocs__novatel_spectrum_fft_size__size_1k = 0u,
    isis_aocs__novatel_spectrum_fft_size__size_2k = 1u,
    isis_aocs__novatel_spectrum_fft_size__size_4k = 2u,
    isis_aocs__novatel_spectrum_fft_size__size_8k = 3u,
    isis_aocs__novatel_spectrum_fft_size__size_16k = 4u,
    isis_aocs__novatel_spectrum_fft_size__size_32k = 5u,
    isis_aocs__novatel_spectrum_fft_size__size_64k = 6u,
} isis_aocs__novatel_spectrum_fft_size_t;

/*!
 * Frequency to capture the spectrum
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_spectrum_frequency_t
{
    isis_aocs__novatel_spectrum_frequency__gpsl1 = 0u,
    isis_aocs__novatel_spectrum_frequency__gpsl2 = 1u,
    isis_aocs__novatel_spectrum_frequency__glonassl1 = 2u,
    isis_aocs__novatel_spectrum_frequency__glonassl2 = 3u,
    isis_aocs__novatel_spectrum_frequency__gpsl5 = 5u,
    isis_aocs__novatel_spectrum_frequency__lband = 6u,
    isis_aocs__novatel_spectrum_frequency__galileoe1 = 7u,
    isis_aocs__novatel_spectrum_frequency__galileoe5a = 8u,
    isis_aocs__novatel_spectrum_frequency__galileoe5b = 9u,
    isis_aocs__novatel_spectrum_frequency__galileoaltboc = 10u,
    isis_aocs__novatel_spectrum_frequency__beidoub1 = 11u,
    isis_aocs__novatel_spectrum_frequency__beidoub2 = 12u,
    isis_aocs__novatel_spectrum_frequency__qzssl1 = 13u,
    isis_aocs__novatel_spectrum_frequency__qzssl2 = 14u,
    isis_aocs__novatel_spectrum_frequency__qzssl5 = 15u,
    isis_aocs__novatel_spectrum_frequency__qzssl6 = 16u,
    isis_aocs__novatel_spectrum_frequency__galileoe6 = 17u,
    isis_aocs__novatel_spectrum_frequency__beidoub3 = 18u,
    isis_aocs__novatel_spectrum_frequency__glonassl3 = 19u,
    isis_aocs__novatel_spectrum_frequency__navicl5 = 20u,
} isis_aocs__novatel_spectrum_frequency_t;

/*!
 * Mode to capture the spectrum
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_spectrum_mode_t
{
    isis_aocs__novatel_spectrum_mode__predecimation = 1u,
    isis_aocs__novatel_spectrum_mode__postdecimation = 2u,
    isis_aocs__novatel_spectrum_mode__postfilter = 3u,
} isis_aocs__novatel_spectrum_mode_t;

/*!
 * Time fix status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_time_fix_status_t
{
    isis_aocs__novatel_time_fix_status__unknown_fix_type = 20u,
    isis_aocs__novatel_time_fix_status__approximate = 60u,
    isis_aocs__novatel_time_fix_status__coarseadj = 80u,
    isis_aocs__novatel_time_fix_status__coarse = 100u,
    isis_aocs__novatel_time_fix_status__coarsesteer = 120u,
    isis_aocs__novatel_time_fix_status__freewheel = 130u,
    isis_aocs__novatel_time_fix_status__fineadj = 140u,
    isis_aocs__novatel_time_fix_status__fine = 160u,
    isis_aocs__novatel_time_fix_status__finebackupsteer = 170u,
    isis_aocs__novatel_time_fix_status__finesteer = 180u,
    isis_aocs__novatel_time_fix_status__sattime = 200u,
} isis_aocs__novatel_time_fix_status_t;

/*!
 * Bool ON/OFF 8-bit
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__on_off_8bit_t
{
    isis_aocs__on_off_8bit__on = 1u,
    isis_aocs__on_off_8bit__off = 0u,
} isis_aocs__on_off_8bit_t;

/*!
 * AOCS operating mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__operating_mode_t
{
    isis_aocs__operating_mode__idle = 0u,
    isis_aocs__operating_mode__mode_1 = 1u,
    isis_aocs__operating_mode__mode_2 = 2u,
    isis_aocs__operating_mode__mode_3 = 3u,
    isis_aocs__operating_mode__mode_4 = 4u,
    isis_aocs__operating_mode__mode_5 = 5u,
    isis_aocs__operating_mode__mode_6 = 6u,
    isis_aocs__operating_mode__mode_7 = 7u,
    isis_aocs__operating_mode__mode_8 = 8u,
    isis_aocs__operating_mode__mode_9 = 9u,
    isis_aocs__operating_mode__mode_10 = 10u,
    isis_aocs__operating_mode__mode_11 = 11u,
    isis_aocs__operating_mode__mode_12 = 12u,
    isis_aocs__operating_mode__mode_13 = 13u,
    isis_aocs__operating_mode__mode_14 = 14u,
    isis_aocs__operating_mode__mode_15 = 15u,
    isis_aocs__operating_mode__count = 16u,
} isis_aocs__operating_mode_t;

/*!
 * Source of the flight parameter
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__param_source_t
{
    isis_aocs__param_source__ram = 0u,
    isis_aocs__param_source__fram = 1u,
} isis_aocs__param_source_t;

/*!
 * Source of the position and velocity data
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__posvel_source_t
{
    isis_aocs__posvel_source__sgp4 = 0u,
    isis_aocs__posvel_source__gnss_latest = 1u,
    isis_aocs__posvel_source__gnss_interpolated = 2u,
    isis_aocs__posvel_source__gnss_filtered = 3u,
} isis_aocs__posvel_source_t;

/*!
 * Status of the position-valid pin
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__pos_valid_pin_status_t
{
    isis_aocs__pos_valid_pin_status__invalid = 0u,
    isis_aocs__pos_valid_pin_status__valid = 1u,
} isis_aocs__pos_valid_pin_status_t;

/*!
 * PPS status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__pps_status_t
{
    isis_aocs__pps_status__success = 0u,
    isis_aocs__pps_status__not_received = 1u,
    isis_aocs__pps_status__expired = 2u,
} isis_aocs__pps_status_t;

/*!
 * Key required to reset the AOCS
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__reset_key_t
{
    isis_aocs__reset_key__processing = 33u,
    isis_aocs__reset_key__all = 66u,
} isis_aocs__reset_key_t;

/*!
 * RW actuation state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__rw_actuation_state_t
{
    isis_aocs__rw_actuation_state__off = 0u,
    isis_aocs__rw_actuation_state__init = 1u,
    isis_aocs__rw_actuation_state__start = 2u,
    isis_aocs__rw_actuation_state__running_aocs = 3u,
    isis_aocs__rw_actuation_state__running_manual = 4u,
    isis_aocs__rw_actuation_state__spindown = 5u,
    isis_aocs__rw_actuation_state__stop = 6u,
    isis_aocs__rw_actuation_state__error = 255u,
} isis_aocs__rw_actuation_state_t;

/*!
 * Actuator bypass mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__rw_bypass_mode_t
{
    isis_aocs__rw_bypass_mode__ctrl_loop = 0u,
    isis_aocs__rw_bypass_mode__bypass_manual = 1u,
    isis_aocs__rw_bypass_mode__spindown = 2u,
    isis_aocs__rw_bypass_mode__bypass_brf = 3u,
    isis_aocs__rw_bypass_mode__bypass_duty_cycle = 4u,
} isis_aocs__rw_bypass_mode_t;

/*!
 * RW state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__rw_state_t
{
    isis_aocs__rw_state__off = 0u,
    isis_aocs__rw_state__init = 1u,
    isis_aocs__rw_state__ready = 2u,
    isis_aocs__rw_state__error = 3u,
    isis_aocs__rw_state__bypass = 4u,
} isis_aocs__rw_state_t;

/*!
 * SCG state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__scg_state_t
{
    isis_aocs__scg_state__off = 0u,
    isis_aocs__scg_state__init = 1u,
    isis_aocs__scg_state__idle = 2u,
    isis_aocs__scg_state__error = 3u,
    isis_aocs__scg_state__firmware_update = 4u,
} isis_aocs__scg_state_t;

/*!
 * AOCS subsystem
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_t
{
    isis_aocs__subsys__system = 0u,
    isis_aocs__subsys__obc = 1u,
    isis_aocs__subsys__adc = 2u,
    isis_aocs__subsys__imtq = 3u,
    isis_aocs__subsys__mtm_ext = 4u,
    isis_aocs__subsys__scg = 5u,
    isis_aocs__subsys__rw = 6u,
    isis_aocs__subsys__rw1 = 7u,
    isis_aocs__subsys__rw2 = 8u,
    isis_aocs__subsys__rw3 = 9u,
    isis_aocs__subsys__rw4 = 10u,
    isis_aocs__subsys__hdrm = 11u,
    isis_aocs__subsys__gnss = 12u,
    isis_aocs__subsys__str = 13u,
    isis_aocs__subsys__thr = 14u,
    isis_aocs__subsys__reserved = 15u,
    isis_aocs__subsys__count = 16u,
    isis_aocs__subsys__all = 255u,
} isis_aocs__subsys_t;

/*!
 * Subsystem mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_mode_t
{
    isis_aocs__subsys_mode__off = 0u,
    isis_aocs__subsys_mode__on = 1u,
} isis_aocs__subsys_mode_t;

/*!
 * Subsystem power state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_power_t
{
    isis_aocs__subsys_power__off = 0u,
    isis_aocs__subsys_power__on = 1u,
} isis_aocs__subsys_power_t;

/*!
 * Subsystem state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_state_t
{
    isis_aocs__subsys_state__off = 0u,
    isis_aocs__subsys_state__init = 1u,
    isis_aocs__subsys_state__ready = 2u,
    isis_aocs__subsys_state__error = 3u,
} isis_aocs__subsys_state_t;

/*!
 * Threaded command identifier (autogenerated)
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__threaded_cmd_id_t
{
    isis_aocs__threaded_cmd_id__reboot = 128u,
    isis_aocs__threaded_cmd_id__read_params_from_file = 130u,
    isis_aocs__threaded_cmd_id__commit_params = 131u,
    isis_aocs__threaded_cmd_id__dump_params = 132u,
    isis_aocs__threaded_cmd_id__clear_fram = 133u,
    isis_aocs__threaded_cmd_id__dbg_dump_stack_info = 143u,
    isis_aocs__threaded_cmd_id__fw_erase_slot = 144u,
    isis_aocs__threaded_cmd_id__fw_write_slot = 145u,
    isis_aocs__threaded_cmd_id__ls = 151u,
    isis_aocs__threaded_cmd_id__format = 152u,
    isis_aocs__threaded_cmd_id__update_tle = 160u,
    isis_aocs__threaded_cmd_id__clear_telemetry = 189u,
    isis_aocs__threaded_cmd_id__dbg_dump_internal_telemetry = 190u,
    isis_aocs__threaded_cmd_id__dump_telemetry = 191u,
    isis_aocs__threaded_cmd_id__dbg_uart_write_read = 192u,
    isis_aocs__threaded_cmd_id__dbg_i2c_write_read = 193u,
    isis_aocs__threaded_cmd_id__dbg_spi_write_read = 194u,
    isis_aocs__threaded_cmd_id__dbg_rs485_write_read = 195u,
    isis_aocs__threaded_cmd_id__set_subsystem_power_bypass = 208u,
    isis_aocs__threaded_cmd_id__cubewheel_set_i2c_address = 212u,
    isis_aocs__threaded_cmd_id__hdrm_fire = 216u,
    isis_aocs__threaded_cmd_id__lensrnd_load_file = 220u,
    isis_aocs__threaded_cmd_id__thr_set_password = 224u,
    isis_aocs__threaded_cmd_id__enp_write_register = 226u,
    isis_aocs__threaded_cmd_id__enp_ramp_register = 227u,
    isis_aocs__threaded_cmd_id__enp_script_load = 228u,
    isis_aocs__threaded_cmd_id__enp_script_uplink = 229u,
    isis_aocs__threaded_cmd_id__gnss_send_command = 236u,
    isis_aocs__threaded_cmd_id__gnss_capture_spectrum = 237u,
    isis_aocs__threaded_cmd_id__gnss_dump_log = 238u,
    isis_aocs__threaded_cmd_id__scg_request_system_output = 240u,
    isis_aocs__threaded_cmd_id__scg_load_config = 241u,
    isis_aocs__threaded_cmd_id__scg_update_fw = 243u,
    isis_aocs__threaded_cmd_id__scg_select_fw = 244u,
    isis_aocs__threaded_cmd_id__scg_recover_fw = 245u,
    isis_aocs__threaded_cmd_id__scg_config_save = 246u,
    isis_aocs__threaded_cmd_id__auriga_set_fw = 248u,
    isis_aocs__threaded_cmd_id__auriga_photo = 249u,
    isis_aocs__threaded_cmd_id__auriga_start_logging = 250u,
    isis_aocs__threaded_cmd_id__auriga_update_fw = 251u,
    isis_aocs__threaded_cmd_id__auriga_download_file = 252u,
    isis_aocs__threaded_cmd_id__auriga_upload_file = 253u,
    isis_aocs__threaded_cmd_id__auriga_copy_param = 254u,
} isis_aocs__threaded_cmd_id_t;

/*!
 * Thruster script state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__thruster_script_state_t
{
    isis_aocs__thruster_script_state__invalid = 0u,
    isis_aocs__thruster_script_state__loaded = 1u,
    isis_aocs__thruster_script_state__running = 2u,
    isis_aocs__thruster_script_state__finished = 3u,
    isis_aocs__thruster_script_state__aborted = 4u,
    isis_aocs__thruster_script_state__fault_detected = 5u,
} isis_aocs__thruster_script_state_t;

/*!
 * Generic thruster state
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__thruster_state_t
{
    isis_aocs__thruster_state__off = 0u,
    isis_aocs__thruster_state__init = 1u,
    isis_aocs__thruster_state__ready = 2u,
    isis_aocs__thruster_state__error = 3u,
} isis_aocs__thruster_state_t;

/*!
 * Time source
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__time_source_t
{
    isis_aocs__time_source__gnss = 1u,
    isis_aocs__time_source__rtc = 2u,
} isis_aocs__time_source_t;

/*!
 * Internal telemetry type
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__tlm_type_t
{
    isis_aocs__tlm_type__genhk = 0u,
    isis_aocs__tlm_type__subsys = 1u,
    isis_aocs__tlm_type__aocs = 2u,
    isis_aocs__tlm_type__aocs_ex = 3u,
    isis_aocs__tlm_type__fdir = 4u,
} isis_aocs__tlm_type_t;

/*!
 * Bool 1 bit
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__boolean_t
{
    isis_aocs__boolean__true = 1u,
    isis_aocs__boolean__false = 0u,
} isis_aocs__boolean_t;

/*!
 * Bool 8 bit
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__boolean8bit_t
{
    isis_aocs__boolean8bit__true = 255u,
    isis_aocs__boolean8bit__false = 0u,
} isis_aocs__boolean8bit_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__desaturation_changed_t
{
    isis_aocs__desaturation_changed__no_change = 0u,
    isis_aocs__desaturation_changed__desaturation_changed = 1u,
} isis_aocs__desaturation_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__det_measurements_changed_t
{
    isis_aocs__det_measurements_changed__no_change = 0u,
    isis_aocs__det_measurements_changed__det_measurements_changed = 1u,
} isis_aocs__det_measurements_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__det_thrust_changed_t
{
    isis_aocs__det_thrust_changed__no_change = 0u,
    isis_aocs__det_thrust_changed__det_thrust_changed = 1u,
} isis_aocs__det_thrust_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__detumbling_changed_t
{
    isis_aocs__detumbling_changed__no_change = 0u,
    isis_aocs__detumbling_changed__detumbling_changed = 1u,
} isis_aocs__detumbling_changed_t;

/*!
 * Fault IDs
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fault_id_t
{
    isis_aocs__fault_id__no_error = 0u,
    isis_aocs__fault_id__state_estimator_diverged = 1u,
    isis_aocs__fault_id__rate_estimator_diverged = 2u,
    isis_aocs__fault_id__angular_rate_limit_exceeded = 3u,
    isis_aocs__fault_id__task_sync_error = 4u,
    isis_aocs__fault_id__subsystem_not_ready = 5u,
    isis_aocs__fault_id__thr_control_error_limit_exceeded = 6u,
    isis_aocs__fault_id__processing_error = 32u,
    isis_aocs__fault_id__invalid_tle = 33u,
    isis_aocs__fault_id__invalid_mode = 34u,
    isis_aocs__fault_id__time_config_error = 35u,
    isis_aocs__fault_id__sensorhandling_config_error = 36u,
    isis_aocs__fault_id__ephemeris_config_error = 37u,
    isis_aocs__fault_id__determination_config_error = 38u,
    isis_aocs__fault_id__targeting_config_error = 39u,
    isis_aocs__fault_id__control_config_error = 40u,
    isis_aocs__fault_id__actuatorhandling_config_error = 41u,
    isis_aocs__fault_id__sensorhandling_error = 42u,
    isis_aocs__fault_id__ephemeris_error = 43u,
    isis_aocs__fault_id__determination_error = 44u,
    isis_aocs__fault_id__targeting_error = 45u,
    isis_aocs__fault_id__control_error = 46u,
    isis_aocs__fault_id__actuatorhandling_error = 47u,
    isis_aocs__fault_id__sensor_postprocessing_error = 48u,
    isis_aocs__fault_id__system_power_limit_exceeded = 64u,
    isis_aocs__fault_id__obc_power_limit_exceeded = 65u,
    isis_aocs__fault_id__adc_power_limit_exceeded = 66u,
    isis_aocs__fault_id__imtq_power_limit_exceeded = 67u,
    isis_aocs__fault_id__mtm_ext_power_limit_exceeded = 68u,
    isis_aocs__fault_id__scg_power_limit_exceeded = 69u,
    isis_aocs__fault_id__rw_power_limit_exceeded = 70u,
    isis_aocs__fault_id__rw1_power_limit_exceeded = 71u,
    isis_aocs__fault_id__rw2_power_limit_exceeded = 72u,
    isis_aocs__fault_id__rw3_power_limit_exceeded = 73u,
    isis_aocs__fault_id__rw4_power_limit_exceeded = 74u,
    isis_aocs__fault_id__hdrm_power_limit_exceeded = 75u,
    isis_aocs__fault_id__gnss_power_limit_exceeded = 76u,
    isis_aocs__fault_id__str_power_limit_exceeded = 77u,
    isis_aocs__fault_id__thr_power_limit_exceeded = 78u,
    isis_aocs__fault_id__subsystem_error = 96u,
    isis_aocs__fault_id__obc_error = 97u,
    isis_aocs__fault_id__adc_error = 98u,
    isis_aocs__fault_id__imtq_error = 99u,
    isis_aocs__fault_id__mtm_ext_error = 100u,
    isis_aocs__fault_id__scg_error = 101u,
    isis_aocs__fault_id__rwa_error = 102u,
    isis_aocs__fault_id__rw1_error = 103u,
    isis_aocs__fault_id__rw2_error = 104u,
    isis_aocs__fault_id__rw3_error = 105u,
    isis_aocs__fault_id__rw4_error = 106u,
    isis_aocs__fault_id__hdrm_error = 107u,
    isis_aocs__fault_id__gnss_error = 108u,
    isis_aocs__fault_id__str_error = 109u,
    isis_aocs__fault_id__thr_error = 110u,
    isis_aocs__fault_id__subsystem_invalid_sample_limit_exceeded = 128u,
    isis_aocs__fault_id__imtq_invalid_sample_limit_exceeded = 131u,
    isis_aocs__fault_id__mtm_ext_invalid_sample_limit_exceeded = 132u,
    isis_aocs__fault_id__scg_invalid_sample_limit_exceeded = 133u,
    isis_aocs__fault_id__rw_invalid_sample_limit_exceeded = 134u,
    isis_aocs__fault_id__thr_invalid_sample_limit_exceeded = 142u,
    isis_aocs__fault_id__unknown_fault = 255u,
} isis_aocs__fault_id_t;

/*!
 * Fault mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__fault_mode_t
{
    isis_aocs__fault_mode__disabled = 1u,
    isis_aocs__fault_mode__enabled = 0u,
} isis_aocs__fault_mode_t;

/*!
 * Result of a file command
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__file_generic_response_t
{
    isis_aocs__file_generic_response__success = 1u,
    isis_aocs__file_generic_response__failure = 2u,
    isis_aocs__file_generic_response__wait = 4u,
    isis_aocs__file_generic_response__no_data = 7u,
    isis_aocs__file_generic_response__bad_parameter = 11u,
    isis_aocs__file_generic_response__checksum_fail = 13u,
    isis_aocs__file_generic_response__not_enough_ram = 50u,
    isis_aocs__file_generic_response__could_not_acquire_semaphore = 72u,
    isis_aocs__file_generic_response__storage_full = 100u,
    isis_aocs__file_generic_response__storage_busy = 103u,
    isis_aocs__file_generic_response__storage_error = 104u,
    isis_aocs__file_generic_response__file_exists = 150u,
    isis_aocs__file_generic_response__file_does_not_exist = 152u,
    isis_aocs__file_generic_response__no_file = 201u,
} isis_aocs__file_generic_response_t;

/*!
 * File upload type
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__file_upload_type_t
{
    isis_aocs__file_upload_type__reserved = 0u,
} isis_aocs__file_upload_type_t;

/*!
 * Result of a generic command
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__generic_error_code_t
{
    isis_aocs__generic_error_code__none = 0,
    isis_aocs__generic_error_code__unknown_command = 2,
    isis_aocs__generic_error_code__command_failed = 3,
    isis_aocs__generic_error_code__unimplemented = 4,
    isis_aocs__generic_error_code__bad_filename = 5,
    isis_aocs__generic_error_code__invalid_param = 6,
    isis_aocs__generic_error_code__system_booting = 7,
    isis_aocs__generic_error_code__threaded_executing = 8,
    isis_aocs__generic_error_code__aocstask_not_initialized = 9,
    isis_aocs__generic_error_code__could_not_aquire_semaphore = 10,
    isis_aocs__generic_error_code__invalid_input = -32,
    isis_aocs__generic_error_code__entry_not_found = -128,
    isis_aocs__generic_error_code__clock_stretching_timeout = -4370,
    isis_aocs__generic_error_code__int16_min = -32768,
} isis_aocs__generic_error_code_t;

/*!
 * Result of a get_param command
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__get_param_response_t
{
    isis_aocs__get_param_response__none = 0,
    isis_aocs__get_param_response__truncated = 20,
    isis_aocs__get_param_response__invalid_param = 6,
    isis_aocs__get_param_response__system_booting = 7,
    isis_aocs__get_param_response__could_not_aquire_semaphore = 10,
    isis_aocs__get_param_response__int16_min = -32768,
} isis_aocs__get_param_response_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__igrf_changed_t
{
    isis_aocs__igrf_changed__no_change = 0u,
    isis_aocs__igrf_changed__igrf_changed = 1u,
} isis_aocs__igrf_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__loop_duration_changed_t
{
    isis_aocs__loop_duration_changed__no_change = 0u,
    isis_aocs__loop_duration_changed__loop_duration_changed = 1u,
} isis_aocs__loop_duration_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__mag_ctrl_changed_t
{
    isis_aocs__mag_ctrl_changed__no_change = 0u,
    isis_aocs__mag_ctrl_changed__mag_ctrl_changed = 1u,
} isis_aocs__mag_ctrl_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__modes_changed_t
{
    isis_aocs__modes_changed__no_change = 0u,
    isis_aocs__modes_changed__modes_changed = 1u,
} isis_aocs__modes_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__moi_changed_t
{
    isis_aocs__moi_changed__no_change = 0u,
    isis_aocs__moi_changed__moi_changed = 1u,
} isis_aocs__moi_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__mtq_changed_t
{
    isis_aocs__mtq_changed__no_change = 0u,
    isis_aocs__mtq_changed__mtq_changed = 1u,
} isis_aocs__mtq_changed_t;

/*!
 * Novatel message ID
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_msg_id_t
{
    isis_aocs__novatel_msg_id__none = 0u,
    isis_aocs__novatel_msg_id__alignbslnenu = 1315u,
    isis_aocs__novatel_msg_id__alignbslnxyz = 1314u,
    isis_aocs__novatel_msg_id__aligndop = 1332u,
    isis_aocs__novatel_msg_id__almanac = 73u,
    isis_aocs__novatel_msg_id__authcodes = 1348u,
    isis_aocs__novatel_msg_id__avepos = 172u,
    isis_aocs__novatel_msg_id__bdsalmanac = 1584u,
    isis_aocs__novatel_msg_id__bdsclock = 1607u,
    isis_aocs__novatel_msg_id__bdsephemeris = 1696u,
    isis_aocs__novatel_msg_id__bdsiono = 1590u,
    isis_aocs__novatel_msg_id__bdsrawnavsubframe = 1695u,
    isis_aocs__novatel_msg_id__bestpos = 42u,
    isis_aocs__novatel_msg_id__bestsats = 1194u,
    isis_aocs__novatel_msg_id__bestutm = 726u,
    isis_aocs__novatel_msg_id__bestvel = 99u,
    isis_aocs__novatel_msg_id__bestxyz = 241u,
    isis_aocs__novatel_msg_id__bslnxyz = 686u,
    isis_aocs__novatel_msg_id__chanconfiglist = 1148u,
    isis_aocs__novatel_msg_id__clockmodel = 16u,
    isis_aocs__novatel_msg_id__clocksteering = 26u,
    isis_aocs__novatel_msg_id__datumtransformations = 2042u,
    isis_aocs__novatel_msg_id__ethstatus = 1288u,
    isis_aocs__novatel_msg_id__filelist = 2100u,
    isis_aocs__novatel_msg_id__filestatus = 2127u,
    isis_aocs__novatel_msg_id__filesystemcapacity = 2137u,
    isis_aocs__novatel_msg_id__filesystemstatus = 2104u,
    isis_aocs__novatel_msg_id__filetransferstatus = 2101u,
    isis_aocs__novatel_msg_id__galalmanac = 1120u,
    isis_aocs__novatel_msg_id__galclock = 1121u,
    isis_aocs__novatel_msg_id__galcnavrawpage = 1310u,
    isis_aocs__novatel_msg_id__galfnavephemeris = 1413u,
    isis_aocs__novatel_msg_id__galfnavrawephemeris = 1309u,
    isis_aocs__novatel_msg_id__galinavrawword = 1414u,
    isis_aocs__novatel_msg_id__galiono = 1127u,
    isis_aocs__novatel_msg_id__glmla = 859u,
    isis_aocs__novatel_msg_id__gloalmanac = 718u,
    isis_aocs__novatel_msg_id__gloclock = 719u,
    isis_aocs__novatel_msg_id__gloephemeris = 723u,
    isis_aocs__novatel_msg_id__glorawalm = 720u,
    isis_aocs__novatel_msg_id__glorawephem = 792u,
    isis_aocs__novatel_msg_id__glorawframe = 721u,
    isis_aocs__novatel_msg_id__glorawstring = 722u,
    isis_aocs__novatel_msg_id__gpalm = 217u,
    isis_aocs__novatel_msg_id__gpgga = 218u,
    isis_aocs__novatel_msg_id__gpggalong = 521u,
    isis_aocs__novatel_msg_id__gpgll = 219u,
    isis_aocs__novatel_msg_id__gpgrs = 220u,
    isis_aocs__novatel_msg_id__gpgsa = 221u,
    isis_aocs__novatel_msg_id__gpgst = 222u,
    isis_aocs__novatel_msg_id__gpgsv = 223u,
    isis_aocs__novatel_msg_id__gphdt = 1045u,
    isis_aocs__novatel_msg_id__gphdtdualantenna = 2045u,
    isis_aocs__novatel_msg_id__gprmb = 224u,
    isis_aocs__novatel_msg_id__gprmc = 225u,
    isis_aocs__novatel_msg_id__gpsephem = 7u,
    isis_aocs__novatel_msg_id__gpvtg = 226u,
    isis_aocs__novatel_msg_id__gpzda = 227u,
    isis_aocs__novatel_msg_id__heading2 = 1335u,
    isis_aocs__novatel_msg_id__headingrate = 1698u,
    isis_aocs__novatel_msg_id__headingsats = 1316u,
    isis_aocs__novatel_msg_id__hwmonitor = 963u,
    isis_aocs__novatel_msg_id__ionutc = 8u,
    isis_aocs__novatel_msg_id__ipstats = 1669u,
    isis_aocs__novatel_msg_id__ipstatus = 1289u,
    isis_aocs__novatel_msg_id__itbandpassbank = 2022u,
    isis_aocs__novatel_msg_id__itdetectstatus = 2065u,
    isis_aocs__novatel_msg_id__itfilttable = 1991u,
    isis_aocs__novatel_msg_id__itprogfiltbank = 2023u,
    isis_aocs__novatel_msg_id__itpsdfinal = 1968u,
    isis_aocs__novatel_msg_id__j1939status = 1907u,
    isis_aocs__novatel_msg_id__lbandbeamtable = 1718u,
    isis_aocs__novatel_msg_id__lbandrawframe = 2069u,
    isis_aocs__novatel_msg_id__lbandtrackstat = 1201u,
    isis_aocs__novatel_msg_id__loglist = 5u,
    isis_aocs__novatel_msg_id__markpos = 181u,
    isis_aocs__novatel_msg_id__mark2pos = 615u,
    isis_aocs__novatel_msg_id__mark3pos = 1738u,
    isis_aocs__novatel_msg_id__mark4pos = 1739u,
    isis_aocs__novatel_msg_id__marktime = 231u,
    isis_aocs__novatel_msg_id__mark2time = 616u,
    isis_aocs__novatel_msg_id__mark3time = 1075u,
    isis_aocs__novatel_msg_id__mark4time = 1076u,
    isis_aocs__novatel_msg_id__masterpos = 1051u,
    isis_aocs__novatel_msg_id__matchedpos = 96u,
    isis_aocs__novatel_msg_id__matchedsats = 1176u,
    isis_aocs__novatel_msg_id__matchedxyz = 242u,
    isis_aocs__novatel_msg_id__modelfeatures = 1329u,
    isis_aocs__novatel_msg_id__navicalmanac = 2122u,
    isis_aocs__novatel_msg_id__navicephemeris = 2123u,
    isis_aocs__novatel_msg_id__naviciono = 2124u,
    isis_aocs__novatel_msg_id__navicrawsubframe = 2105u,
    isis_aocs__novatel_msg_id__navicsysclock = 2125u,
    isis_aocs__novatel_msg_id__navigate = 161u,
    isis_aocs__novatel_msg_id__novatelxobs = 1618u,
    isis_aocs__novatel_msg_id__novatelxref = 1620u,
    isis_aocs__novatel_msg_id__oceanixinfo = 2159u,
    isis_aocs__novatel_msg_id__oceanixstatus = 2160u,
    isis_aocs__novatel_msg_id__passaux = 690u,
    isis_aocs__novatel_msg_id__passccom1 = 1893u,
    isis_aocs__novatel_msg_id__passccom2 = 1894u,
    isis_aocs__novatel_msg_id__passccom3 = 1895u,
    isis_aocs__novatel_msg_id__passccom4 = 1930u,
    isis_aocs__novatel_msg_id__passccom5 = 1937u,
    isis_aocs__novatel_msg_id__passccom6 = 1938u,
    isis_aocs__novatel_msg_id__passcom1 = 233u,
    isis_aocs__novatel_msg_id__passcom2 = 234u,
    isis_aocs__novatel_msg_id__passcom3 = 235u,
    isis_aocs__novatel_msg_id__passcom4 = 1384u,
    isis_aocs__novatel_msg_id__passcom5 = 1576u,
    isis_aocs__novatel_msg_id__passcom6 = 1577u,
    isis_aocs__novatel_msg_id__passcom7 = 1701u,
    isis_aocs__novatel_msg_id__passcom8 = 1702u,
    isis_aocs__novatel_msg_id__passcom9 = 1703u,
    isis_aocs__novatel_msg_id__passcom10 = 1704u,
    isis_aocs__novatel_msg_id__passeth1 = 1209u,
    isis_aocs__novatel_msg_id__passicom1 = 1250u,
    isis_aocs__novatel_msg_id__passicom2 = 1251u,
    isis_aocs__novatel_msg_id__passicom3 = 1252u,
    isis_aocs__novatel_msg_id__passicom4 = 1385u,
    isis_aocs__novatel_msg_id__passicom5 = 2119u,
    isis_aocs__novatel_msg_id__passicom6 = 2120u,
    isis_aocs__novatel_msg_id__passicom7 = 2121u,
    isis_aocs__novatel_msg_id__passncom1 = 1253u,
    isis_aocs__novatel_msg_id__passncom2 = 1254u,
    isis_aocs__novatel_msg_id__passncom3 = 1255u,
    isis_aocs__novatel_msg_id__passusb1 = 607u,
    isis_aocs__novatel_msg_id__passusb2 = 608u,
    isis_aocs__novatel_msg_id__passusb3 = 609u,
    isis_aocs__novatel_msg_id__passxcom1 = 405u,
    isis_aocs__novatel_msg_id__passthrough = 1342u,
    isis_aocs__novatel_msg_id__pdppos = 469u,
    isis_aocs__novatel_msg_id__pdpsats = 1234u,
    isis_aocs__novatel_msg_id__pdpvel = 470u,
    isis_aocs__novatel_msg_id__pdpxyz = 471u,
    isis_aocs__novatel_msg_id__ppppos = 1538u,
    isis_aocs__novatel_msg_id__pppsats = 1541u,
    isis_aocs__novatel_msg_id__profileinfo = 1412u,
    isis_aocs__novatel_msg_id__psrdop = 174u,
    isis_aocs__novatel_msg_id__psrdop2 = 1163u,
    isis_aocs__novatel_msg_id__psrpos = 47u,
    isis_aocs__novatel_msg_id__psrsats = 1162u,
    isis_aocs__novatel_msg_id__psrvel = 100u,
    isis_aocs__novatel_msg_id__psrxyz = 243u,
    isis_aocs__novatel_msg_id__qzssalmanac = 1346u,
    isis_aocs__novatel_msg_id__qzssephemeris = 1336u,
    isis_aocs__novatel_msg_id__qzssionutc = 1347u,
    isis_aocs__novatel_msg_id__qzssrawalmanac = 1345u,
    isis_aocs__novatel_msg_id__qzssrawcnavmessage = 1530u,
    isis_aocs__novatel_msg_id__qzssrawephem = 1331u,
    isis_aocs__novatel_msg_id__qzssrawsubframe = 1330u,
    isis_aocs__novatel_msg_id__raimstatus = 1286u,
    isis_aocs__novatel_msg_id__range = 43u,
    isis_aocs__novatel_msg_id__rangecmp = 140u,
    isis_aocs__novatel_msg_id__rangecmp2 = 1273u,
    isis_aocs__novatel_msg_id__rangecmp4 = 2050u,
    isis_aocs__novatel_msg_id__rangegpsl1 = 631u,
    isis_aocs__novatel_msg_id__rawalm = 74u,
    isis_aocs__novatel_msg_id__rawcnavframe = 1066u,
    isis_aocs__novatel_msg_id__rawephem = 41u,
    isis_aocs__novatel_msg_id__rawgpssubframe = 25u,
    isis_aocs__novatel_msg_id__rawgpsword = 407u,
    isis_aocs__novatel_msg_id__rawsbasframe = 973u,
    isis_aocs__novatel_msg_id__rawsbasframe2 = 2185u,
    isis_aocs__novatel_msg_id__refstation = 175u,
    isis_aocs__novatel_msg_id__refstationinfo = 1325u,
    isis_aocs__novatel_msg_id__roverpos = 1052u,
    isis_aocs__novatel_msg_id__rtcm1071 = 1472u,
    isis_aocs__novatel_msg_id__rtcm1072 = 1473u,
    isis_aocs__novatel_msg_id__rtcm1073 = 1474u,
    isis_aocs__novatel_msg_id__rtcm1074 = 1475u,
    isis_aocs__novatel_msg_id__rtcm1075 = 1476u,
    isis_aocs__novatel_msg_id__rtcm1076 = 1477u,
    isis_aocs__novatel_msg_id__rtcm1077 = 1478u,
    isis_aocs__novatel_msg_id__rtcm1081 = 1479u,
    isis_aocs__novatel_msg_id__rtcm1082 = 1480u,
    isis_aocs__novatel_msg_id__rtcm1083 = 1481u,
    isis_aocs__novatel_msg_id__rtcm1084 = 1482u,
    isis_aocs__novatel_msg_id__rtcm1085 = 1483u,
    isis_aocs__novatel_msg_id__rtcm1086 = 1484u,
    isis_aocs__novatel_msg_id__rtcm1087 = 1485u,
    isis_aocs__novatel_msg_id__rtcm1091 = 1486u,
    isis_aocs__novatel_msg_id__rtcm1092 = 1487u,
    isis_aocs__novatel_msg_id__rtcm1093 = 1488u,
    isis_aocs__novatel_msg_id__rtcm1094 = 1489u,
    isis_aocs__novatel_msg_id__rtcm1095 = 1490u,
    isis_aocs__novatel_msg_id__rtcm1096 = 1491u,
    isis_aocs__novatel_msg_id__rtcm1097 = 1492u,
    isis_aocs__novatel_msg_id__rtcm1111 = 1648u,
    isis_aocs__novatel_msg_id__rtcm1112 = 1649u,
    isis_aocs__novatel_msg_id__rtcm1113 = 1650u,
    isis_aocs__novatel_msg_id__rtcm1114 = 1651u,
    isis_aocs__novatel_msg_id__rtcm1115 = 1652u,
    isis_aocs__novatel_msg_id__rtcm1116 = 1653u,
    isis_aocs__novatel_msg_id__rtcm1117 = 1654u,
    isis_aocs__novatel_msg_id__rtcm1121 = 1592u,
    isis_aocs__novatel_msg_id__rtcm1122 = 1593u,
    isis_aocs__novatel_msg_id__rtcm1123 = 1594u,
    isis_aocs__novatel_msg_id__rtcm1124 = 1595u,
    isis_aocs__novatel_msg_id__rtcm1125 = 1596u,
    isis_aocs__novatel_msg_id__rtcm1126 = 1597u,
    isis_aocs__novatel_msg_id__rtcm1127 = 1598u,
    isis_aocs__novatel_msg_id__rtcm1005 = 765u,
    isis_aocs__novatel_msg_id__rtcm1006 = 768u,
    isis_aocs__novatel_msg_id__rtcm1007 = 852u,
    isis_aocs__novatel_msg_id__rtcm1008 = 854u,
    isis_aocs__novatel_msg_id__rtcm1033 = 1097u,
    isis_aocs__novatel_msg_id__rtcm1019 = 893u,
    isis_aocs__novatel_msg_id__rtcm1019async = 2088u,
    isis_aocs__novatel_msg_id__rtcm1020 = 895u,
    isis_aocs__novatel_msg_id__rtcm1020async = 2089u,
    isis_aocs__novatel_msg_id__rtcm1042 = 2171u,
    isis_aocs__novatel_msg_id__rtcm1042async = 2170u,
    isis_aocs__novatel_msg_id__rtcm1044 = 2177u,
    isis_aocs__novatel_msg_id__rtcm1044async = 2176u,
    isis_aocs__novatel_msg_id__rtcm1045 = 2173u,
    isis_aocs__novatel_msg_id__rtcm1045async = 2172u,
    isis_aocs__novatel_msg_id__rtcm1046 = 2175u,
    isis_aocs__novatel_msg_id__rtcm1046async = 2174u,
    isis_aocs__novatel_msg_id__rtkassiststatus = 2048u,
    isis_aocs__novatel_msg_id__rtkdop = 952u,
    isis_aocs__novatel_msg_id__rtkdop2 = 1172u,
    isis_aocs__novatel_msg_id__rtkpos = 141u,
    isis_aocs__novatel_msg_id__rtksats = 1174u,
    isis_aocs__novatel_msg_id__rtkvel = 216u,
    isis_aocs__novatel_msg_id__rtkxyz = 244u,
    isis_aocs__novatel_msg_id__rxconfig = 128u,
    isis_aocs__novatel_msg_id__rxstatus = 93u,
    isis_aocs__novatel_msg_id__rxstatusevent = 94u,
    isis_aocs__novatel_msg_id__safemodestatus = 2060u,
    isis_aocs__novatel_msg_id__satvis2 = 1043u,
    isis_aocs__novatel_msg_id__satxyz2 = 1451u,
    isis_aocs__novatel_msg_id__sbas0 = 976u,
    isis_aocs__novatel_msg_id__sbas1 = 977u,
    isis_aocs__novatel_msg_id__sbas2 = 982u,
    isis_aocs__novatel_msg_id__sbas3 = 987u,
    isis_aocs__novatel_msg_id__sbas4 = 992u,
    isis_aocs__novatel_msg_id__sbas5 = 994u,
    isis_aocs__novatel_msg_id__sbas6 = 995u,
    isis_aocs__novatel_msg_id__sbas7 = 996u,
    isis_aocs__novatel_msg_id__sbas9 = 997u,
    isis_aocs__novatel_msg_id__sbas10 = 978u,
    isis_aocs__novatel_msg_id__sbas12 = 979u,
    isis_aocs__novatel_msg_id__sbas17 = 980u,
    isis_aocs__novatel_msg_id__sbas18 = 981u,
    isis_aocs__novatel_msg_id__sbas24 = 983u,
    isis_aocs__novatel_msg_id__sbas25 = 984u,
    isis_aocs__novatel_msg_id__sbas26 = 985u,
    isis_aocs__novatel_msg_id__sbas27 = 986u,
    isis_aocs__novatel_msg_id__sbas32 = 988u,
    isis_aocs__novatel_msg_id__sbas33 = 989u,
    isis_aocs__novatel_msg_id__sbas34 = 990u,
    isis_aocs__novatel_msg_id__sbas35 = 991u,
    isis_aocs__novatel_msg_id__sbas45 = 993u,
    isis_aocs__novatel_msg_id__sbasalmanac = 1425u,
    isis_aocs__novatel_msg_id__softloadstatus = 1235u,
    isis_aocs__novatel_msg_id__sourcetable = 1344u,
    isis_aocs__novatel_msg_id__terrastarinfo = 1719u,
    isis_aocs__novatel_msg_id__terrastarstatus = 1729u,
    isis_aocs__novatel_msg_id__time = 101u,
    isis_aocs__novatel_msg_id__timesync = 492u,
    isis_aocs__novatel_msg_id__trackstat = 83u,
    isis_aocs__novatel_msg_id__transferportstatus = 2114u,
    isis_aocs__novatel_msg_id__uptime = 1777u,
    isis_aocs__novatel_msg_id__validmodels = 206u,
    isis_aocs__novatel_msg_id__veriposinfo = 1728u,
    isis_aocs__novatel_msg_id__veriposstatus = 1730u,
    isis_aocs__novatel_msg_id__version = 37u,
    isis_aocs__novatel_msg_id__wifiapsettings = 2093u,
} isis_aocs__novatel_msg_id_t;

/*!
 * Novatel log message type
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_msg_type_t
{
    isis_aocs__novatel_msg_type__binary = 0u,
    isis_aocs__novatel_msg_type__ascii = 1u,
    isis_aocs__novatel_msg_type__abbr_ascii = 2u,
} isis_aocs__novatel_msg_type_t;

/*!
 * Novatel log trigger type
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__novatel_trigger_type_t
{
    isis_aocs__novatel_trigger_type__onnew = 0u,
    isis_aocs__novatel_trigger_type__onchanged = 1u,
    isis_aocs__novatel_trigger_type__ontime = 2u,
    isis_aocs__novatel_trigger_type__onnext = 3u,
    isis_aocs__novatel_trigger_type__once = 4u,
    isis_aocs__novatel_trigger_type__onmark = 5u,
} isis_aocs__novatel_trigger_type_t;

/*!
 * Byte offset in the OPERATING_MODE_SWITCH_CONFIG flight parameter
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__operating_mode_switch_config_subsys_power_t
{
    isis_aocs__operating_mode_switch_config_subsys_power__auto_power_on = 2u,
    isis_aocs__operating_mode_switch_config_subsys_power__auto_power_off = 4u,
    isis_aocs__operating_mode_switch_config_subsys_power__uint16_max = 65535u,
} isis_aocs__operating_mode_switch_config_subsys_power_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__opmode_switch_delay_t
{
    isis_aocs__opmode_switch_delay__no_delay = 0u,
    isis_aocs__opmode_switch_delay__delay = 1u,
} isis_aocs__opmode_switch_delay_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__opmode_switch_subsys_power_off_t
{
    isis_aocs__opmode_switch_subsys_power_off__no_auto_power_off = 0u,
    isis_aocs__opmode_switch_subsys_power_off__auto_power_subsys_off = 1u,
} isis_aocs__opmode_switch_subsys_power_off_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__opmode_switch_subsys_power_on_t
{
    isis_aocs__opmode_switch_subsys_power_on__no_auto_power_on = 0u,
    isis_aocs__opmode_switch_subsys_power_on__auto_power_subsys_on = 1u,
} isis_aocs__opmode_switch_subsys_power_on_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__opmode_switch_wait_t
{
    isis_aocs__opmode_switch_wait__no_wait = 0u,
    isis_aocs__opmode_switch_wait__wait_for_subsys = 1u,
} isis_aocs__opmode_switch_wait_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__pos_vel_changed_t
{
    isis_aocs__pos_vel_changed__no_change = 0u,
    isis_aocs__pos_vel_changed__pos_vel_changed = 1u,
} isis_aocs__pos_vel_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__rate_est_changed_t
{
    isis_aocs__rate_est_changed__no_change = 0u,
    isis_aocs__rate_est_changed__rate_est_changed = 1u,
} isis_aocs__rate_est_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__res_dipole_changed_t
{
    isis_aocs__res_dipole_changed__no_change = 0u,
    isis_aocs__res_dipole_changed__res_dipole_changed = 1u,
} isis_aocs__res_dipole_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__rwa_changed_t
{
    isis_aocs__rwa_changed__no_change = 0u,
    isis_aocs__rwa_changed__rwa_changed = 1u,
} isis_aocs__rwa_changed_t;

/*!
 * error status
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__scg_enum_error_flag_t
{
    isis_aocs__scg_enum_error_flag__nominal = 0u,
    isis_aocs__scg_enum_error_flag__error = 1u,
} isis_aocs__scg_enum_error_flag_t;

/*!
 * Full scale range of the gyroscope
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__scg_enum_gyro_fullscale_t
{
    isis_aocs__scg_enum_gyro_fullscale__value_245_dps = 0u,
    isis_aocs__scg_enum_gyro_fullscale__value_500_dps = 1u,
    isis_aocs__scg_enum_gyro_fullscale__value_2000_dps = 2u,
    isis_aocs__scg_enum_gyro_fullscale__value_2000_dps_2 = 3u,
} isis_aocs__scg_enum_gyro_fullscale_t;

/*!
 * Boolean flag
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__scg_enum_onoff_t
{
    isis_aocs__scg_enum_onoff__off = 0u,
    isis_aocs__scg_enum_onoff__on = 1u,
} isis_aocs__scg_enum_onoff_t;

/*!
 * System mode
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__scg_enum_system_mode_t
{
    isis_aocs__scg_enum_system_mode__nominal = 0u,
    isis_aocs__scg_enum_system_mode__selftest = 1u,
} isis_aocs__scg_enum_system_mode_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_fss_1_t
{
    isis_aocs__sensor_fss_1__disabled = 0u,
    isis_aocs__sensor_fss_1__fss_1_enabled = 1u,
} isis_aocs__sensor_fss_1_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_fss_2_t
{
    isis_aocs__sensor_fss_2__disabled = 0u,
    isis_aocs__sensor_fss_2__fss_2_enabled = 1u,
} isis_aocs__sensor_fss_2_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_fss_3_t
{
    isis_aocs__sensor_fss_3__disabled = 0u,
    isis_aocs__sensor_fss_3__fss_3_enabled = 1u,
} isis_aocs__sensor_fss_3_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_fss_4_t
{
    isis_aocs__sensor_fss_4__disabled = 0u,
    isis_aocs__sensor_fss_4__fss_4_enabled = 1u,
} isis_aocs__sensor_fss_4_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_gnss_t
{
    isis_aocs__sensor_gnss__disabled = 0u,
    isis_aocs__sensor_gnss__gnss_enabled = 1u,
} isis_aocs__sensor_gnss_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_mtm_ext_t
{
    isis_aocs__sensor_mtm_ext__disabled = 0u,
    isis_aocs__sensor_mtm_ext__mtm_ext_enabled = 1u,
} isis_aocs__sensor_mtm_ext_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_mtm_int_t
{
    isis_aocs__sensor_mtm_int__disabled = 0u,
    isis_aocs__sensor_mtm_int__mtm_int_enabled = 1u,
} isis_aocs__sensor_mtm_int_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_pda_t
{
    isis_aocs__sensor_pda__disabled = 0u,
    isis_aocs__sensor_pda__pda_enabled = 1u,
} isis_aocs__sensor_pda_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_scg_filt_t
{
    isis_aocs__sensor_scg_filt__disabled = 0u,
    isis_aocs__sensor_scg_filt__scg_filt_enabled = 1u,
} isis_aocs__sensor_scg_filt_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_scg_raw_t
{
    isis_aocs__sensor_scg_raw__disabled = 0u,
    isis_aocs__sensor_scg_raw__scg_raw_enabled = 1u,
} isis_aocs__sensor_scg_raw_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_str_1_t
{
    isis_aocs__sensor_str_1__disabled = 0u,
    isis_aocs__sensor_str_1__str_1_enabled = 1u,
} isis_aocs__sensor_str_1_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_str_2_t
{
    isis_aocs__sensor_str_2__disabled = 0u,
    isis_aocs__sensor_str_2__str_2_enabled = 1u,
} isis_aocs__sensor_str_2_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensor_types_changed_t
{
    isis_aocs__sensor_types_changed__no_change = 0u,
    isis_aocs__sensor_types_changed__sensor_types_changed = 1u,
} isis_aocs__sensor_types_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sensors_changed_t
{
    isis_aocs__sensors_changed__no_change = 0u,
    isis_aocs__sensors_changed__sensors_changed = 1u,
} isis_aocs__sensors_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__sgp4_changed_t
{
    isis_aocs__sgp4_changed__no_change = 0u,
    isis_aocs__sgp4_changed__sgp4_changed = 1u,
} isis_aocs__sgp4_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__source_full_state_estimator_t
{
    isis_aocs__source_full_state_estimator__disabled = 0u,
    isis_aocs__source_full_state_estimator__full_state_estimator_enabled = 1u,
} isis_aocs__source_full_state_estimator_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__source_raw_rate_estimator_t
{
    isis_aocs__source_raw_rate_estimator__disabled = 0u,
    isis_aocs__source_raw_rate_estimator__raw_rate_estimator_enabled = 1u,
} isis_aocs__source_raw_rate_estimator_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__state_est_changed_t
{
    isis_aocs__state_est_changed__no_change = 0u,
    isis_aocs__state_est_changed__state_est_changed = 1u,
} isis_aocs__state_est_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_adc_t
{
    isis_aocs__subsys_adc__none = 0u,
    isis_aocs__subsys_adc__adc = 1u,
} isis_aocs__subsys_adc_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_gnss_t
{
    isis_aocs__subsys_gnss__none = 0u,
    isis_aocs__subsys_gnss__gnss = 1u,
} isis_aocs__subsys_gnss_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_hdrm_t
{
    isis_aocs__subsys_hdrm__none = 0u,
    isis_aocs__subsys_hdrm__hdrm = 1u,
} isis_aocs__subsys_hdrm_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_imtq_t
{
    isis_aocs__subsys_imtq__none = 0u,
    isis_aocs__subsys_imtq__imtq = 1u,
} isis_aocs__subsys_imtq_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_mtm_ext_t
{
    isis_aocs__subsys_mtm_ext__none = 0u,
    isis_aocs__subsys_mtm_ext__mtm_ext = 1u,
} isis_aocs__subsys_mtm_ext_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_obc_t
{
    isis_aocs__subsys_obc__none = 0u,
    isis_aocs__subsys_obc__obc = 1u,
} isis_aocs__subsys_obc_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_rw1_t
{
    isis_aocs__subsys_rw1__none = 0u,
    isis_aocs__subsys_rw1__rw1 = 1u,
} isis_aocs__subsys_rw1_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_rw2_t
{
    isis_aocs__subsys_rw2__none = 0u,
    isis_aocs__subsys_rw2__rw2 = 1u,
} isis_aocs__subsys_rw2_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_rw3_t
{
    isis_aocs__subsys_rw3__none = 0u,
    isis_aocs__subsys_rw3__rw3 = 1u,
} isis_aocs__subsys_rw3_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_rw4_t
{
    isis_aocs__subsys_rw4__none = 0u,
    isis_aocs__subsys_rw4__rw4 = 1u,
} isis_aocs__subsys_rw4_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_rwa_t
{
    isis_aocs__subsys_rwa__none = 0u,
    isis_aocs__subsys_rwa__rwa = 1u,
} isis_aocs__subsys_rwa_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_scg_t
{
    isis_aocs__subsys_scg__none = 0u,
    isis_aocs__subsys_scg__scg = 1u,
} isis_aocs__subsys_scg_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_str_t
{
    isis_aocs__subsys_str__none = 0u,
    isis_aocs__subsys_str__str = 1u,
} isis_aocs__subsys_str_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_system_t
{
    isis_aocs__subsys_system__none = 0u,
    isis_aocs__subsys_system__system = 1u,
} isis_aocs__subsys_system_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__subsys_thr_t
{
    isis_aocs__subsys_thr__none = 0u,
    isis_aocs__subsys_thr__thr = 1u,
} isis_aocs__subsys_thr_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__targeting_changed_t
{
    isis_aocs__targeting_changed__no_change = 0u,
    isis_aocs__targeting_changed__targeting_changed = 1u,
} isis_aocs__targeting_changed_t;

/*!
 * TDD command
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__tdd_command_t
{
    isis_aocs__tdd_command__none = 0u,
    isis_aocs__tdd_command__delay_task = 1u,
    isis_aocs__tdd_command__deploy_imtm = 3u,
    isis_aocs__tdd_command__deploy_spa = 4u,
    isis_aocs__tdd_command__set_subsys_error = 5u,
    isis_aocs__tdd_command__spoof_mtm = 6u,
    isis_aocs__tdd_command__unspoof_mtm = 7u,
    isis_aocs__tdd_command__spoof_adc = 8u,
    isis_aocs__tdd_command__unspoof_adc = 9u,
    isis_aocs__tdd_command__spoof_mtm_ext = 10u,
    isis_aocs__tdd_command__unspoof_mtm_ext = 11u,
} isis_aocs__tdd_command_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__thomson_changed_t
{
    isis_aocs__thomson_changed__no_change = 0u,
    isis_aocs__thomson_changed__thomson_changed = 1u,
} isis_aocs__thomson_changed_t;

/*!
 * Result of a threaded background command
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__threaded_cmd_result_t
{
    isis_aocs__threaded_cmd_result__queued = 0,
    isis_aocs__threaded_cmd_result__threaded_executing = 8,
    isis_aocs__threaded_cmd_result__system_booting = 7,
    isis_aocs__threaded_cmd_result__int16_min = -32768,
} isis_aocs__threaded_cmd_result_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__three_axis_ctrl_changed_t
{
    isis_aocs__three_axis_ctrl_changed__no_change = 0u,
    isis_aocs__three_axis_ctrl_changed__three_axis_ctrl_changed = 1u,
} isis_aocs__three_axis_ctrl_changed_t;

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__thrustme_i2t5_status_t
{
    isis_aocs__thrustme_i2t5_status__standby = 0u,
    isis_aocs__thrustme_i2t5_status__preparation = 1u,
    isis_aocs__thrustme_i2t5_status__operation = 2u,
    isis_aocs__thrustme_i2t5_status__ground_test = 3u,
    isis_aocs__thrustme_i2t5_status__commissioning = 4u,
    isis_aocs__thrustme_i2t5_status__armed = 5u,
} isis_aocs__thrustme_i2t5_status_t;

/*!
 * Reference for the entry flag
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__tlm_entry_reference_t
{
    isis_aocs__tlm_entry_reference__relative = 0u,
    isis_aocs__tlm_entry_reference__absolute = 1u,
    isis_aocs__tlm_entry_reference__at_pps = 2u,
} isis_aocs__tlm_entry_reference_t;

/*!
 * Status of the telemetry storage
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__tlm_log_status_t
{
    isis_aocs__tlm_log_status__no_error = 0u,
    isis_aocs__tlm_log_status__error = 1u,
} isis_aocs__tlm_log_status_t;

/*!
 * Trace level
 */
typedef enum __attribute__ ((__packed__)) isis_aocs__trace_level_t
{
    isis_aocs__trace_level__debug = 0u,
    isis_aocs__trace_level__info = 1u,
    isis_aocs__trace_level__warning = 2u,
    isis_aocs__trace_level__error = 3u,
    isis_aocs__trace_level__fatal = 4u,
    isis_aocs__trace_level__all = 5u,
} isis_aocs__trace_level_t;

/* STRUCTS */

/*!
 *  ISIS_AOCS instance structure
 */
typedef struct
{
    uint8_t i2cAddr; /*!< I2C address used for this instance */
} ISIS_AOCS_t;

/*!
 * Union for storing the parameters for struct imtq_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__imtq_config_t
{
    unsigned char raw[189];
    struct __attribute__ ((__packed__))
    {
        uint8_t detumble_frequency; /*!<  */
        uint8_t current_feedback; /*!<  */
        uint8_t mtm_select; /*!<  */
        uint8_t int_mtm_integration_time; /*!<  */
        uint8_t ext_mtm_integration_time; /*!<  */
        uint8_t int_mtm_axis_map[3]; /*!<  */
        uint8_t ext_mtm_axis_map[3]; /*!<  */
        int16_t map_temperatures[7]; /*!<  */
        int16_t map_max_x[7]; /*!<  */
        int16_t map_max_y[7]; /*!<  */
        int16_t map_max_z[7]; /*!<  */
        int16_t coil_current_bias[3]; /*!<  */
        int16_t coil_current_premul[3]; /*!<  */
        int16_t coil_current_postdiv[3]; /*!<  */
        int16_t coil_temp_bias[3]; /*!<  */
        int16_t coil_temp_premul[3]; /*!<  */
        int16_t coil_temp_postdiv[3]; /*!<  */
        uint16_t coil_total_current_limit; /*!<  */
        int32_t closed_loop_feedback_gain[3]; /*!<  */
        float bdot_gain; /*!<  */
        float mtm_correction_matrix[9]; /*!<  */
        float mtm_correction_bias[3]; /*!<  */
        float mtm_adapt_filter_sensitivity; /*!<  */
        float mtm_adapt_filter_weight; /*!<  */
        float coil_effective_area[3]; /*!<  */
    } fields;
} isis_aocs__imtq_config_t;

/*!
 * Union for storing the parameters for struct imtq_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__imtq_hk_t
{
    unsigned char raw[37];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        uint8_t mode; /*!< Mode */
        uint8_t error; /*!< Error */
        uint8_t config_status; /*!< Configuration Status */
        uint32_t uptime; /*!< Uptime */
        uint16_t V_D; /*!< Voltage measurement of the digital supply \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t V_A; /*!< Voltage measurement of the analogue supply \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t I_D; /*!< Current measurement of the digital supply \note conversion: eng. value [in mA] = 0.1 * raw */
        uint16_t I_A; /*!< Current measurement of the analogue supply \note conversion: eng. value [in mA] = 0.1 * raw */
        int16_t I_C[3]; /*!< Current measurement of the coils (3-axis) \note conversion: eng. value [in mA] = 0.1 * raw */
        int16_t T_C[3]; /*!< Temperature measurement of the coils (3-axis) */
        int16_t T_MCU; /*!< Temperature measurement of the MCU */
    } fields;
} isis_aocs__imtq_hk_t;

/*!
 * Union for storing the parameters for struct scg_gyro_misa_calib.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_gyro_misa_calib_t
{
    unsigned char raw[36];
    struct __attribute__ ((__packed__))
    {
        float gyro1_x; /*!< Gyroscope output */
        float gyro1_y; /*!< Gyroscope output */
        float gyro1_z; /*!< Gyroscope output */
        float gyro2_x; /*!< Gyroscope output */
        float gyro2_y; /*!< Gyroscope output */
        float gyro2_z; /*!< Gyroscope output */
        float gyro3_x; /*!< Gyroscope output */
        float gyro3_y; /*!< Gyroscope output */
        float gyro3_z; /*!< Gyroscope output */
    } fields;
} isis_aocs__scg_gyro_misa_calib_t;

/*!
 * Union for storing the parameters for struct scg_gyro_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_gyro_output_t
{
    unsigned char raw[18];
    struct __attribute__ ((__packed__))
    {
        int16_t gyro1_x; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
        int16_t gyro1_y; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
        int16_t gyro1_z; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
        int16_t gyro2_x; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
        int16_t gyro2_y; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
        int16_t gyro2_z; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
        int16_t gyro3_x; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
        int16_t gyro3_y; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
        int16_t gyro3_z; /*!< Raw gyroscope axis output \note conversion: eng. value [in °/s] = 0.00875 * raw */
    } fields;
} isis_aocs__scg_gyro_output_t;

/*!
 * Union for storing the parameters for struct scg_gyro_temp_calib.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_gyro_temp_calib_t
{
    unsigned char raw[36];
    struct __attribute__ ((__packed__))
    {
        float gyro1_x; /*!< Gyroscope output */
        float gyro1_y; /*!< Gyroscope output */
        float gyro1_z; /*!< Gyroscope output */
        float gyro2_x; /*!< Gyroscope output */
        float gyro2_y; /*!< Gyroscope output */
        float gyro2_z; /*!< Gyroscope output */
        float gyro3_x; /*!< Gyroscope output */
        float gyro3_y; /*!< Gyroscope output */
        float gyro3_z; /*!< Gyroscope output */
    } fields;
} isis_aocs__scg_gyro_temp_calib_t;

/*!
 * Union for storing the parameters for struct scg_reply_header.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_reply_header_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        uint8_t stid; /*!< System type identifier */
        uint8_t ivid; /*!< Interface version identifier */
        uint8_t rc; /*!< Response code */
        uint8_t bid; /*!< Board identifier */
        uint8_t stat; /*!< Status */
    } fields;
} isis_aocs__scg_reply_header_t;

/*!
 * Union for storing the parameters for struct scg_reset_cause.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_reset_cause_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_enum_onoff_t firewall : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t obl : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t pin : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t bor : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t sft : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t iwdg : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t wwdg : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t lwpr : 1; /*!<  */
    } fields;
} isis_aocs__scg_reset_cause_t;

/*!
 * Union for storing the parameters for struct scg_system_error.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_system_error_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_enum_error_flag_t spi1_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t spi2_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t i2c2_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t usart1_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t can1_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t gyro_ovr_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t flash_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t ugakf_init_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t ugakf_update_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t sram2_parity_error : 1; /*!<  */
    } fields;
} isis_aocs__scg_system_error_t;

/*!
 * Union for storing the parameters for struct scg_system_state.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_system_state_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_enum_system_mode_t system_mode : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t gyro_data_ready : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t config_changed : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t ugakf_reinit_flag : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t sram2_parity_enabled : 1; /*!<  */
    } fields;
} isis_aocs__scg_system_state_t;

/*!
 * Union for storing the parameters for struct scg_ugakf_bias.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_ugakf_bias_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        float gyro1_bias_est_x; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro1_bias_est_y; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro1_bias_est_z; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro2_bias_est_x; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro2_bias_est_y; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro2_bias_est_z; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro3_bias_est_x; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro3_bias_est_y; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro3_bias_est_z; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float gyro1_bias_cov_x; /*!<  */
        float gyro1_bias_cov_y; /*!<  */
        float gyro1_bias_cov_z; /*!<  */
        float gyro2_bias_cov_x; /*!<  */
        float gyro2_bias_cov_y; /*!<  */
        float gyro2_bias_cov_z; /*!<  */
        float gyro3_bias_cov_x; /*!<  */
        float gyro3_bias_cov_y; /*!<  */
        float gyro3_bias_cov_z; /*!<  */
    } fields;
} isis_aocs__scg_ugakf_bias_t;

/*!
 * Union for storing the parameters for struct scg_ugakf_rate.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_ugakf_rate_t
{
    unsigned char raw[96];
    struct __attribute__ ((__packed__))
    {
        double angular_rate_est_x; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        double angular_rate_est_y; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        double angular_rate_est_z; /*!<  \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        double angular_rate_cov1_x; /*!<  */
        double angular_rate_cov1_y; /*!<  */
        double angular_rate_cov1_z; /*!<  */
        double angular_rate_cov2_x; /*!<  */
        double angular_rate_cov2_y; /*!<  */
        double angular_rate_cov2_z; /*!<  */
        double angular_rate_cov3_x; /*!<  */
        double angular_rate_cov3_y; /*!<  */
        double angular_rate_cov3_z; /*!<  */
    } fields;
} isis_aocs__scg_ugakf_rate_t;

/*!
 * Union for storing the parameters for struct scg_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_hk_t
{
    unsigned char raw[28];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        isis_aocs__scg_reply_header_t reply_header; /*!<  */
        uint32_t system_uptime; /*!<  */
        int8_t mcu_temp; /*!<  */
        int8_t gyro1_temp; /*!<  \note conversion: eng. value [in °C] = -1 * raw + 25*/
        int8_t gyro2_temp; /*!<  \note conversion: eng. value [in °C] = -1 * raw + 25*/
        int8_t gyro3_temp; /*!<  \note conversion: eng. value [in °C] = -1 * raw + 25*/
        uint8_t current; /*!<  */
        uint16_t voltage; /*!<  \note conversion: eng. value [in V] = 0.001 * raw */
        isis_aocs__scg_system_error_t bitmap1; /*!<  */
        isis_aocs__scg_system_state_t bitmap2; /*!<  */
        isis_aocs__scg_reset_cause_t reset_cause; /*!<  */
    } fields;
} isis_aocs__scg_hk_t;

/*!
 * Union for storing the parameters for struct scg_fw_error.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_fw_error_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_enum_error_flag_t borw_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw0_flash_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw0_coro_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw0_corw_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw1_flash_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw1_coro_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw1_corw_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw2_flash_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw2_coro_error : 1; /*!<  */
        isis_aocs__scg_enum_error_flag_t fw2_corw_error : 1; /*!<  */
    } fields;
} isis_aocs__scg_fw_error_t;

/*!
 * Union for storing the parameters for struct scg_raw_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_raw_config_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_enum_onoff_t SCG_1 : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t SCG_2 : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t SCG_3 : 1; /*!<  */
        uint8_t padding : 5; /*!<  */
    } fields;
} isis_aocs__scg_raw_config_t;

/*!
 * Union for storing the parameters for struct scg_system_flags.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_system_flags_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_enum_onoff_t ugakf_enabled : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t temp_comp_enabled : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t misa_comp_enabled : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t swdt_enabled : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t spike_removal_enabled : 1; /*!<  */
        isis_aocs__scg_enum_onoff_t turnon_bias_removal_enabled : 1; /*!<  */
    } fields;
} isis_aocs__scg_system_flags_t;

/*!
 * Union for storing the parameters for struct scg_system_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_system_config_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_system_flags_t system_flags; /*!<  */
        int8_t update_rate_ugakf; /*!<  */
        int8_t update_rate_fast; /*!<  */
    } fields;
} isis_aocs__scg_system_config_t;

/*!
 * Union for storing the parameters for struct scg_gyro_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_gyro_config_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_enum_gyro_fullscale_t gyro_fullscale : 2; /*!< Gyroscope full-scale range */
        isis_aocs__scg_enum_onoff_t gyro_reinit_enabled : 1; /*!< Reinitialization enabled */
    } fields;
} isis_aocs__scg_gyro_config_t;

/*!
 * Union for storing the parameters for struct scg_ugakf_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_ugakf_config_t
{
    unsigned char raw[88];
    struct __attribute__ ((__packed__))
    {
        float r_gyro1_x; /*!<  */
        float r_gyro1_y; /*!<  */
        float r_gyro1_z; /*!<  */
        float r_gyro2_x; /*!<  */
        float r_gyro2_y; /*!<  */
        float r_gyro2_z; /*!<  */
        float r_gyro3_x; /*!<  */
        float r_gyro3_y; /*!<  */
        float r_gyro3_z; /*!<  */
        float q_rate; /*!<  */
        float q_bias; /*!<  */
        float p_rate; /*!<  */
        float p_bias; /*!<  */
        float gyro1_mean_x; /*!<  */
        float gyro1_mean_y; /*!<  */
        float gyro1_mean_z; /*!<  */
        float gyro2_mean_x; /*!<  */
        float gyro2_mean_y; /*!<  */
        float gyro2_mean_z; /*!<  */
        float gyro3_mean_x; /*!<  */
        float gyro3_mean_y; /*!<  */
        float gyro3_mean_z; /*!<  */
    } fields;
} isis_aocs__scg_ugakf_config_t;

/*!
 * Union for storing the parameters for struct scg_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_config_t
{
    unsigned char raw[93];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__scg_raw_config_t raw_config; /*!<  */
        isis_aocs__scg_system_config_t system_config; /*!<  */
        isis_aocs__scg_gyro_config_t gyro_config; /*!<  */
        isis_aocs__scg_ugakf_config_t ugakf_config; /*!<  */
    } fields;
} isis_aocs__scg_config_t;

/*!
 * Union for storing the parameters for struct scg_temperature_coefficients.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_temperature_coefficients_t
{
    unsigned char raw[216];
    struct __attribute__ ((__packed__))
    {
        float coeff_0[9]; /*!<  */
        float coeff_1[9]; /*!<  */
        float coeff_2[9]; /*!<  */
        float coeff_3[9]; /*!<  */
        float coeff_4[9]; /*!<  */
        float coeff_5[9]; /*!<  */
    } fields;
} isis_aocs__scg_temperature_coefficients_t;

/*!
 * Union for storing the parameters for struct lensrnd_correction_table_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__lensrnd_correction_table_config_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        uint32_t serial_number; /*!< FSS serial number */
        uint32_t date; /*!< Correction table date */
        uint32_t crc32; /*!< CRC32 */
        uint32_t reserved; /*!<  */
    } fields;
} isis_aocs__lensrnd_correction_table_config_t;

/*!
 * Union for storing the parameters for struct lensrnd_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__lensrnd_config_t
{
    unsigned char raw[48];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__lensrnd_correction_table_config_t correction_table[3]; /*!< Correction tables */
    } fields;
} isis_aocs__lensrnd_config_t;

/*!
 * Union for storing the parameters for struct cubewheel_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__cubewheel_status_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        uint16_t Runtime; /*!< Number of seconds since processor start-up. (Unit of measure is [s]) */
        uint8_t Backup_mode_state : 1; /*!< Backup-mode state */
        uint8_t Motor_switch_state : 1; /*!< Motor switch state */
        uint8_t Hall_sensor_switch_state : 1; /*!< Hall sensor switch state */
        uint8_t Encoder_switch_state : 1; /*!< Encoder switch state */
        uint8_t Error_Flag : 1; /*!< Indicates whether an error has occurred */
        uint8_t Padding : 3; /*!< Padding bits */
    } fields;
} isis_aocs__cubewheel_status_t;

/*!
 * Union for storing the parameters for struct cubewheel_array_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__cubewheel_array_hk_t
{
    unsigned char raw[56];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        int16_t speed0; /*!< Wheel speed \note conversion: eng. value [in rpm] = 0.5 * raw */
        int16_t reference_speed0; /*!< Wheel reference speed \note conversion: eng. value [in rpm] = 0.5 * raw */
        int16_t duty_cycle0; /*!< Motor duty cycle \note conversion: eng. value [in %] = 0.00003051850947599719 * raw */
        int16_t current0; /*!< Wheel current measurement */
        isis_aocs__cubewheel_status_t status0; /*!< Current status telemetry of wheel electronics */
        uint8_t padding0; /*!<  */
        int16_t speed1; /*!< Wheel speed \note conversion: eng. value [in rpm] = 0.5 * raw */
        int16_t reference_speed1; /*!< Wheel reference speed \note conversion: eng. value [in rpm] = 0.5 * raw */
        int16_t duty_cycle1; /*!< Motor duty cycle \note conversion: eng. value [in %] = 0.00003051850947599719 * raw */
        int16_t current1; /*!< Wheel current measurement */
        isis_aocs__cubewheel_status_t status1; /*!< Current status telemetry of wheel electronics */
        uint8_t padding1; /*!<  */
        int16_t speed2; /*!< Wheel speed \note conversion: eng. value [in rpm] = 0.5 * raw */
        int16_t reference_speed2; /*!< Wheel reference speed \note conversion: eng. value [in rpm] = 0.5 * raw */
        int16_t duty_cycle2; /*!< Motor duty cycle \note conversion: eng. value [in %] = 0.00003051850947599719 * raw */
        int16_t current2; /*!< Wheel current measurement */
        isis_aocs__cubewheel_status_t status2; /*!< Current status telemetry of wheel electronics */
        uint8_t padding2; /*!<  */
        int16_t speed3; /*!< Wheel speed \note conversion: eng. value [in rpm] = 0.5 * raw */
        int16_t reference_speed3; /*!< Wheel reference speed \note conversion: eng. value [in rpm] = 0.5 * raw */
        int16_t duty_cycle3; /*!< Motor duty cycle \note conversion: eng. value [in %] = 0.00003051850947599719 * raw */
        int16_t current3; /*!< Wheel current measurement */
        isis_aocs__cubewheel_status_t status3; /*!< Current status telemetry of wheel electronics */
        uint8_t padding3; /*!<  */
    } fields;
} isis_aocs__cubewheel_array_hk_t;

/*!
 * Union for storing the parameters for struct af_rw25_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__af_rw25_config_t
{
    unsigned char raw[29];
    struct __attribute__ ((__packed__))
    {
        uint8_t SID[4]; /*!< Slave identifier per wheel */
        float max_acc; /*!< Maximum acceleration */
        isis_aocs__boolean8bit_t use_acceleration; /*!< Use acceleration from delta wheel speed instead of max acceleration */
        uint8_t hall_sensor[4]; /*!< Hall sensor to use for speed measurements */
        uint32_t max_crc_error[4]; /*!< Maximum number of CRC errors to allow */
    } fields;
} isis_aocs__af_rw25_config_t;

/*!
 * Union for storing the parameters for struct af_rw25_array_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__af_rw25_array_tlm_t
{
    unsigned char raw[56];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        int32_t speed0; /*!< RW speed \note conversion: eng. value [in rpm] = 0.25 * raw */
        uint8_t padding0[8]; /*!<  */
        int32_t speed1; /*!< RW speed \note conversion: eng. value [in rpm] = 0.25 * raw */
        uint8_t padding1[8]; /*!<  */
        int32_t speed2; /*!< RW speed \note conversion: eng. value [in rpm] = 0.25 * raw */
        uint8_t padding2[8]; /*!<  */
        int32_t speed3; /*!< RW speed \note conversion: eng. value [in rpm] = 0.25 * raw */
        uint8_t padding3[8]; /*!<  */
    } fields;
} isis_aocs__af_rw25_array_tlm_t;

/*!
 * Union for storing the parameters for struct rw_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__rw_hk_t
{
    unsigned char raw[56];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        uint8_t wheel[48]; /*!<  */
    } fields;
} isis_aocs__rw_hk_t;

/*!
 * Union for storing the parameters for struct hdrm_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__hdrm_hk_t
{
    unsigned char raw[9];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        isis_aocs__hdrm_state_t state : 1; /*!<  */
        isis_aocs__hdrm_stage_t stage : 7; /*!<  */
    } fields;
} isis_aocs__hdrm_hk_t;

/*!
 * Union for storing the parameters for struct novatel_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_status_t
{
    unsigned char raw[9];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__pos_valid_pin_status_t pos_valid_pin_status; /*!< Status of the position-valid pin */
        uint64_t time_lastmsg; /*!< Time (in seconds since boot) when the last GNSS message was received \note conversion: eng. value [in s] = 0.000001 * raw */
    } fields;
} isis_aocs__novatel_status_t;

/*!
 * Union for storing the parameters for struct novatel_hwmonitor.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_hwmonitor_t
{
    unsigned char raw[17];
    struct __attribute__ ((__packed__))
    {
        int8_t temperature; /*!< Receiver temperature */
        int8_t temperature_2; /*!< Receiver secondary temperature */
        uint8_t antenna_current; /*!< Antenna current */
        uint16_t antenna_voltage; /*!< Antenna voltage \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t core_voltage; /*!< Core voltage \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t supply_voltage; /*!< Supply voltage \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t voltage_1v8; /*!< Voltage of the 1V8 domain \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t peripheral_voltage; /*!< Peripheral voltage \note conversion: eng. value [in V] = 0.001 * raw */
        isis_aocs__novatel_hwmon_status_t temperature_status : 4; /*!< Temperature status */
        isis_aocs__novatel_hwmon_status_t temperature_2_status : 4; /*!< Secondary temperature status */
        isis_aocs__novatel_hwmon_status_t antenna_current_status : 4; /*!< Antenna current status */
        isis_aocs__novatel_hwmon_status_t antenna_voltage_status : 4; /*!< Antenna voltage status */
        isis_aocs__novatel_hwmon_status_t core_voltage_status : 4; /*!< Core voltage status */
        isis_aocs__novatel_hwmon_status_t supply_voltage_status : 4; /*!< Supply voltage status */
        isis_aocs__novatel_hwmon_status_t voltage_1v8_status : 4; /*!< 1V8 domain status */
        isis_aocs__novatel_hwmon_status_t peripheral_voltage_status : 4; /*!< Peripheral voltage status */
    } fields;
} isis_aocs__novatel_hwmonitor_t;

/*!
 * Union for storing the parameters for struct novatel_solution_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_solution_status_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__novatel_sol_status_t solstatus; /*!< GNSS fix solution status */
        int8_t sats_tracked; /*!< Number of satellites tracked */
        int8_t sats_used; /*!< Number of satellites used in solution */
    } fields;
} isis_aocs__novatel_solution_status_t;

/*!
 * Union for storing the parameters for struct novatel_time_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_time_status_t
{
    unsigned char raw[10];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__pps_status_t pps_status; /*!< Status of the PPS pin */
        uint64_t pps_age; /*!< Age of the last PPS signal \note conversion: eng. value [in s] = 0.000001 * raw */
        isis_aocs__novatel_time_fix_status_t time_status; /*!< Time fix status */
    } fields;
} isis_aocs__novatel_time_status_t;

/*!
 * Union for storing the parameters for struct novatel_rx_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_rx_status_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__novatel_rxstatus_error_t dram_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t firmware_valid : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t rom_status : 1; /*!<  */
        uint8_t reserved_1 : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t esn_access_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t auth_code_status : 1; /*!<  */
        uint8_t reserved_2 : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t supply_voltage_status : 1; /*!<  */
        uint8_t reserved_3 : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t temperature_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t minos_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t pll_rf_status : 1; /*!<  */
        uint8_t reserved_4 : 3; /*!<  */
        isis_aocs__novatel_rxstatus_error_t nvm_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t sw_res_lim_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t model_valid_recv : 1; /*!<  */
        uint8_t reserved_5 : 2; /*!<  */
        uint8_t remote_loading_begun : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t export_restriction : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t safe_mode : 1; /*!<  */
        uint8_t reserved_6a : 1; /*!<  */
        uint8_t reserved_6b : 7; /*!<  */
        isis_aocs__novatel_rxstatus_error_t component_hardware_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t rxstatus_error : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t temperature_status_2 : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t supply_voltage_status_2 : 1; /*!<  */
        isis_aocs__novatel_rxstatus_power_t primary_antenna_power : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t lna_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_antenna_t antenna_status : 2; /*!<  */
        isis_aocs__novatel_rxstatus_error_t cpu_overload : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t com_tx_buffer_overrun : 1; /*!<  */
        uint8_t reserved_7 : 2; /*!<  */
        isis_aocs__novatel_rxstatus_error_t link_overrun : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t input_overrun : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t aux_tx_overrun : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t agc_out_of_range : 1; /*!<  */
        uint8_t jammer_detected : 1; /*!<  */
        uint8_t ins_reset : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t imu_comm_status : 1; /*!<  */
        isis_aocs__novatel_rxstatus_valid_t almanac : 1; /*!<  */
        isis_aocs__novatel_rxstatus_valid_t position_solution : 1; /*!<  */
        uint8_t position_fixed : 1; /*!<  */
        uint8_t clock_steering_enabled : 1; /*!<  */
        isis_aocs__novatel_rxstatus_valid_t clock_model : 1; /*!<  */
        uint8_t ext_osc_locked : 1; /*!<  */
        isis_aocs__novatel_rxstatus_error_t software_resource : 1; /*!<  */
        uint8_t version : 2; /*!<  */
        uint8_t tracking_mode : 1; /*!<  */
        uint8_t digital_filtering_enabled : 1; /*!<  */
        uint8_t aux3_event : 1; /*!<  */
        uint8_t aux2_event : 1; /*!<  */
        uint8_t aux1_event : 1; /*!<  */
    } fields;
} isis_aocs__novatel_rx_status_t;

/*!
 * Union for storing the parameters for struct novatel_oem719_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_oem719_hk_t
{
    unsigned char raw[55];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        isis_aocs__novatel_status_t novatel_status; /*!< Novatel interface status */
        isis_aocs__novatel_hwmonitor_t hwmonitor; /*!< Novatel hardware monitor */
        isis_aocs__novatel_rx_status_t rx_status; /*!< Novatel receiver status */
        isis_aocs__novatel_time_status_t time_status; /*!< Novatel time status */
        isis_aocs__novatel_solution_status_t solution_status; /*!< Novatel solution status */
    } fields;
} isis_aocs__novatel_oem719_hk_t;

/*!
 * Union for storing the parameters for struct novatel_receiver_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_receiver_status_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint8_t error_flag : 1; /*!<  */
        uint8_t temperature_status : 1; /*!<  */
        uint8_t voltage_supply_status : 1; /*!<  */
        uint8_t primary_antenna_power_status_ : 1; /*!<  */
        uint8_t lna_failure : 1; /*!<  */
        uint8_t primary_antenna_open_circuit_flag : 1; /*!<  */
        uint8_t primary_antenna_short_circuit_flag : 1; /*!<  */
        uint8_t cpu_overload_flag : 1; /*!<  */
        uint8_t com_port_transmit_buffer_overrun : 1; /*!<  */
        uint8_t spoofing_detection_status : 1; /*!<  */
        uint8_t reserved1 : 1; /*!<  */
        uint8_t link_overrun_flag : 1; /*!<  */
        uint8_t input_overrun_flag : 1; /*!<  */
        uint8_t aux_transmit_overrun_flag : 1; /*!<  */
        uint8_t antenna_gain_state : 1; /*!<  */
        uint8_t jammer_detected : 1; /*!<  */
        uint8_t ins_reset_flag : 1; /*!<  */
        uint8_t imu_communication_failure : 1; /*!<  */
        uint8_t gps_almanac_flag_utc_known : 1; /*!<  */
        uint8_t position_solution_flag : 1; /*!<  */
        uint8_t position_fixed_flag_ : 1; /*!<  */
        uint8_t clock_steering_status : 1; /*!<  */
        uint8_t clock_model_flag : 1; /*!<  */
        uint8_t external_oscillator_locked_flag : 1; /*!<  */
        uint8_t software_resource : 1; /*!<  */
        uint8_t version_bit_0 : 1; /*!<  */
        uint8_t version_bit_1 : 1; /*!<  */
        uint8_t tracking_mode : 1; /*!<  */
        uint8_t digital_filtering_enabled : 1; /*!<  */
        uint8_t auxiliary_3_status_event_flag : 1; /*!<  */
        uint8_t auxiliary_2_status_event_flag : 1; /*!<  */
        uint8_t auxiliary_1_status_event_flag : 1; /*!<  */
    } fields;
} isis_aocs__novatel_receiver_status_t;

/*!
 * Union for storing the parameters for struct novatel_binheader.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_binheader_t
{
    unsigned char raw[28];
    struct __attribute__ ((__packed__))
    {
        uint8_t sync_bytes[3]; /*!<  */
        uint8_t header_length; /*!<  */
        uint16_t message_id; /*!<  */
        uint8_t message_type; /*!<  */
        uint8_t port; /*!<  */
        uint16_t message_length; /*!<  */
        uint16_t sequence; /*!<  */
        uint8_t idletime; /*!<  */
        isis_aocs__novatel_time_fix_status_t time_status; /*!<  */
        uint16_t gps_week; /*!<  */
        uint32_t gps_week_ms; /*!<  */
        isis_aocs__novatel_receiver_status_t receiver_status; /*!<  */
        uint16_t reserved; /*!<  */
        uint16_t sw_build; /*!<  */
    } fields;
} isis_aocs__novatel_binheader_t;

/*!
 * Union for storing the parameters for struct novatel_time_msg.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_time_msg_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__novatel_binheader_t binheader; /*!<  */
        uint32_t clkstatus; /*!<  */
        double offset_rxclock; /*!<  */
        double offset_rxclock_std; /*!<  */
        double offset_utc; /*!<  */
        uint32_t utc_year; /*!<  */
        uint8_t utc_month; /*!<  */
        uint8_t utc_day; /*!<  */
        uint8_t utc_hour; /*!<  */
        uint8_t utc_min; /*!<  */
        uint32_t utc_msec; /*!<  */
        uint32_t utc_status; /*!<  */
    } fields;
} isis_aocs__novatel_time_msg_t;

/*!
 * Union for storing the parameters for struct novatel_bestxyz_msg.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_bestxyz_msg_t
{
    unsigned char raw[140];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__novatel_binheader_t binheader; /*!<  */
        uint32_t position_solstatus; /*!<  */
        uint32_t position_type; /*!<  */
        double position_x; /*!<  */
        double position_y; /*!<  */
        double position_z; /*!<  */
        float stddev_pos_x; /*!<  */
        float stddev_pos_y; /*!<  */
        float stddev_pos_z; /*!<  */
        uint32_t velocity_solstatus; /*!<  */
        uint32_t velocity_type; /*!<  */
        double velocity_x; /*!<  */
        double velocity_y; /*!<  */
        double velocity_z; /*!<  */
        float stddev_vel_x; /*!<  */
        float stddev_vel_y; /*!<  */
        float stddev_vel_z; /*!<  */
        uint8_t basestation_id[4]; /*!<  */
        float vlatency; /*!<  */
        float diff_age; /*!<  */
        float solution_age; /*!<  */
        uint8_t sats_tracked; /*!<  */
        uint8_t sats_used; /*!<  */
        uint8_t sats_l1e1b1; /*!<  */
        uint8_t sats_multifreq; /*!<  */
        uint8_t reserved; /*!<  */
        uint8_t solution_status_ext; /*!<  */
        uint8_t mask_gal_bei; /*!<  */
        uint8_t mask_gps_glo; /*!<  */
    } fields;
} isis_aocs__novatel_bestxyz_msg_t;

/*!
 * Union for storing the parameters for struct auriga_mode_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_mode_status_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        uint16_t arm_success : 1; /*!< Success if current mode is ARM */
        uint16_t atm_missing_stars_aam_num_error : 1; /*!< Not enough coherent stars or numerical error */
        uint16_t atm_num_error : 1; /*!< Numerical error */
        uint16_t padding1 : 2; /*!<  */
        uint16_t aam_missing_stars : 1; /*!< Number of measured stars too small */
        uint16_t atm_des_q_not_norm : 1; /*!< Normalization error */
        uint16_t padding2 : 1; /*!<  */
        uint16_t arm_no_measured_object : 1; /*!< No measured object */
        uint16_t aam_silence : 1; /*!< No star pattern recognition */
        uint16_t arm_missing_image : 1; /*!< One image processing has been missed */
        uint16_t padding3 : 2; /*!<  */
        uint16_t arm_missing_pairs : 1; /*!< Not enough paired stairs to compute paired image angular rate */
        uint16_t padding4 : 2; /*!<  */
    } fields;
} isis_aocs__auriga_mode_status_t;

/*!
 * Union for storing the parameters for struct auriga_spw_status_bitfield.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_spw_status_bitfield_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        uint8_t con_stat : 2; /*!< Indicates the current connection status */
        uint8_t rx_av : 1; /*!< Indicates that the receive buffer contains at least one Spacewire packet */
        uint8_t txe : 1; /*!< Indicates that the transmit buffer is empty */
        uint8_t txe_ae : 1; /*!< Indicates that the transmit buffer is below the almost empty level */
        uint8_t err : 1; /*!< Indicates that one or more error has occurred */
        uint8_t reserved : 2; /*!< Reserved */
    } fields;
} isis_aocs__auriga_spw_status_bitfield_t;

/*!
 * Union for storing the parameters for struct auriga_spw_error_bitfield.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_spw_error_bitfield_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        uint8_t err_disc : 1; /*!< Indicates that the Spacewire node experienced a disconnect */
        uint8_t err_par : 1; /*!< Parity error occurred on the Spacewire link */
        uint8_t err_esc : 1; /*!< An escape error occurred on the Spacewire link */
        uint8_t err_cred : 1; /*!< A credit error was reported by the Spacewire node */
        uint8_t tx_of : 1; /*!< The transmit buffer has overflowed */
        uint8_t rx_of : 1; /*!< The receive buffer has overflowed */
        uint8_t reserved : 2; /*!< Reserved */
    } fields;
} isis_aocs__auriga_spw_error_bitfield_t;

/*!
 * Union for storing the parameters for struct auriga_spw_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_spw_status_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__auriga_spw_status_bitfield_t node0_status; /*!< Reads back the status of the SpaceWire node 0 */
        isis_aocs__auriga_spw_error_bitfield_t node0_error_status; /*!< Reads back the error status of the SpaceWire node 0 */
        isis_aocs__auriga_spw_status_bitfield_t node1_status; /*!< Reads back the status of the SpaceWire node 1 */
        isis_aocs__auriga_spw_error_bitfield_t node1_error_status; /*!< Reads back the error status of the SpaceWire node 1 */
    } fields;
} isis_aocs__auriga_spw_status_t;

/*!
 * Union for storing the parameters for struct auriga_main_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_main_status_t
{
    unsigned char raw[35];
    struct __attribute__ ((__packed__))
    {
        double StatusTimestamp; /*!< Unix time of the system */
        isis_aocs__auriga_str_state_t STRMode; /*!< STR Current Mode */
        isis_aocs__auriga_mode_status_t ModeTlmStatus; /*!< Status telemetry for the current mode */
        isis_aocs__auriga_oh_state_t OHState1; /*!< Current state for OH1 */
        isis_aocs__auriga_oh_state_t OHState2; /*!< Current state for OH2 */
        isis_aocs__auriga_str_select_mode_t ModeTLMSource; /*!< Mode of the TLM source */
        uint8_t TRKLossCnt; /*!< Number of loss of tracking since last STR reset */
        uint8_t ResetCnt; /*!< STR hot reset counters */
        uint8_t ErrorInfo; /*!< Number of errors since last STR cold reset and various error indicator */
        uint32_t LastErrorParam; /*!< Last error parameter */
        uint8_t LastErrorId; /*!< Last error identifier */
        isis_aocs__auriga_oh_temp_alarm_t OH1TemperatureAlarm : 1; /*!< OH1 temperature alarm */
        isis_aocs__auriga_oh_temp_alarm_t OH2TemperatureAlarm : 1; /*!< OH2 temperature alarm */
        isis_aocs__auriga_oh_temp_alarm_t Reserved2 : 6; /*!< Reserved */
        int16_t OH1Temp; /*!< OH1 temperature \note conversion: eng. value [in °C] = 0.01 * raw */
        int16_t OH2Temp; /*!< OH2 temperature \note conversion: eng. value [in °C] = 0.01 * raw */
        uint32_t Uptime; /*!< Total uptime of the system */
        uint16_t MeanStraylightOH1; /*!< Mean level of stray-light for OH1 */
        uint16_t MeanStraylightOH2; /*!< Mean level of stray-light for OH2 */
    } fields;
} isis_aocs__auriga_main_status_t;

/*!
 * Union for storing the parameters for struct auriga_fpga_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_fpga_status_t
{
    unsigned char raw[14];
    struct __attribute__ ((__packed__))
    {
        uint16_t head2_current; /*!< OH2 current */
        uint16_t head1_5v; /*!< OH1 voltage \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t head2_5v; /*!< OH2 voltage \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t head1_current; /*!< OH1 current */
        uint16_t fpga_core_1v2; /*!< FPGA core 1V2 line voltage \note conversion: eng. value [in V] = 0.001 * raw */
        uint16_t fpga_core_current; /*!< FPGA core current */
        uint16_t fpga_2v5; /*!< FPGA supply 2V5 line voltage \note conversion: eng. value [in V] = 0.001 * raw */
    } fields;
} isis_aocs__auriga_fpga_status_t;

/*!
 * Union for storing the parameters for struct iobc_sv_enable_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__iobc_sv_enable_status_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        uint8_t power_obc : 1; /*!< OBC power */
        uint8_t power_rtc : 1; /*!< Output power to the RTC */
        uint8_t supervisor_mode : 1; /*!< Is in supervisor mode */
        uint8_t padding1 : 2; /*!< Padding bits */
        uint8_t busy_rtc : 1; /*!< RTC is busy */
        uint8_t power_off_rtc : 1; /*!< RTC is doing power off */
        uint8_t padding2 : 1; /*!< Padding bits */
    } fields;
} isis_aocs__iobc_sv_enable_status_t;

/*!
 * Union for storing the parameters for struct iobc_sv_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__iobc_sv_hk_t
{
    unsigned char raw[31];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__iobc_sv_enable_status_t enable_status; /*!< Enable status of the Supervisor Controller */
        uint32_t sv_uptime; /*!< IOBC Supervisor uptime */
        uint32_t iobc_uptime; /*!< IOBC uptime */
        uint16_t iobc_reset_count; /*!< IOBC reset count */
        uint16_t temperature; /*!<  \note conversion: eng. value [in °C] = -0.29802 * raw + 191.098*/
        uint16_t voltage_3v3_in; /*!<  \note conversion: eng. value [in V] = 0.0048875855 * raw */
        uint16_t voltage_3v3; /*!<  \note conversion: eng. value [in V] = 0.0048875855 * raw */
        uint16_t voltage_2v5; /*!<  \note conversion: eng. value [in V] = 0.0024437928 * raw */
        uint16_t voltage_1v8; /*!<  \note conversion: eng. value [in V] = 0.0024437928 * raw */
        uint16_t voltage_1v0; /*!<  \note conversion: eng. value [in V] = 0.0024437928 * raw */
        uint16_t voltage_rtc; /*!<  \note conversion: eng. value [in V] = 0.0048875855 * raw */
        uint16_t current_3v3_in; /*!<  \note conversion: eng. value [in mA] = 0.3470186 * raw */
        uint16_t current_1v8; /*!<  \note conversion: eng. value [in mA] = 0.1221896 * raw */
        uint16_t current_1v0; /*!<  \note conversion: eng. value [in mA] = 0.1637341 * raw */
    } fields;
} isis_aocs__iobc_sv_hk_t;

/*!
 * Union for storing the parameters for struct auriga_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_hk_t
{
    unsigned char raw[88];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__auriga_main_status_t MainStatus; /*!< Mean level of stray-light for OH2 */
        uint32_t PpsAge; /*!< Age of the last PPS \note conversion: eng. value [in s] = 0.001 * raw */
        isis_aocs__auriga_spw_status_t SpWStatus; /*!< SpaceWire node status */
        isis_aocs__auriga_fpga_status_t FPGAStatus; /*!< FPGA status */
        isis_aocs__iobc_sv_hk_t Supervisor; /*!< Supervisor telemetry */
    } fields;
} isis_aocs__auriga_hk_t;

/*!
 * Union for storing the parameters for struct auriga_boot_info.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_boot_info_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        uint8_t one_shot_slot; /*!< Slot for one shot */
        uint8_t one_shot_counter; /*!< Counter for one shot */
        uint8_t permanent_slot; /*!< Slot for permanent */
    } fields;
} isis_aocs__auriga_boot_info_t;

/*!
 * Union for storing the parameters for struct auriga_version.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_version_t
{
    unsigned char raw[57];
    struct __attribute__ ((__packed__))
    {
        uint16_t OH1SerialNumber; /*!< OH1 Serial number in FPGA */
        uint32_t OH1PartNumber; /*!< OH1 Part number (FPGA design version) */
        uint16_t OH1CalibParamId; /*!< OH1 Calibration parameter ID */
        uint16_t OH2SerialNumber; /*!< OH2 Serial number in FPGA */
        uint32_t OH2PartNumber; /*!< OH2 Part number (FPGA design version) */
        uint16_t OH2CalibParamId; /*!< OH2 Calibration parameter ID */
        char VersionAuriga[5]; /*!< Version of the Auriga library (null terminated string) */
        char VersionFpga[3]; /*!< Version of the FPGA (null terminated string) */
        char VersionSw[33]; /*!< Version of the IOBC software (null terminated string) */
    } fields;
} isis_aocs__auriga_version_t;

/*!
 * Union for storing the parameters for struct auriga_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_config_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__boolean8bit_t Enabled; /*!< Processing enabled */
        isis_aocs__auriga_str_select_mode_t Mode; /*!< Star tracker mode */
        isis_aocs__auriga_oh_opcode_t OH1_Configuration; /*!< OH1 configuration */
        isis_aocs__auriga_oh_opcode_t OH2_Configuration; /*!< OH2 configuration */
    } fields;
} isis_aocs__auriga_config_t;

/*!
 * Union for storing the parameters for struct Enpulsion_FuseStatus.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enpulsion_fusestatus_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__enpulsion_recoverablefuse_t min_board_temperature : 1; /*!<  */
        isis_aocs__enpulsion_recoverablefuse_t max_board_temperature : 1; /*!<  */
        isis_aocs__enpulsion_recoverablefuse_t max_housing_temperature : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_reservoir_temperature : 1; /*!<  */
        isis_aocs__enpulsion_recoverablefuse_t min_bus_voltage : 1; /*!<  */
        isis_aocs__enpulsion_recoverablefuse_t max_bus_voltage : 1; /*!<  */
        isis_aocs__enpulsion_recoverablefuse_t min_driver_voltage : 1; /*!<  */
        isis_aocs__enpulsion_recoverablefuse_t max_driver_voltage : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_bus_current : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_emitter_voltage : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_emitter_current : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_emitter_power : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_extractor_voltage : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_extractor_current : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_extractor_power : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_heater_voltage : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_heater_current : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_heater_power : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_neutralizer_bridge_current : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t max_neutralizer_power : 1; /*!<  */
        isis_aocs__enpulsion_criticalfuse_t broken_neutralizer_filament : 1; /*!<  */
        uint8_t padding1 : 3; /*!<  */
        uint8_t padding2; /*!<  */
    } fields;
} isis_aocs__enpulsion_fusestatus_t;

/*!
 * Union for storing the parameters for struct Enpulsion_RegisterMap.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enpulsion_registermap_t
{
    unsigned char raw[111];
    struct __attribute__ ((__packed__))
    {
        uint8_t firmware_version_major; /*!<  */
        uint8_t firmware_version_minor; /*!<  */
        uint16_t serial_number; /*!<  */
        uint16_t reset_counter; /*!<  */
        uint32_t fuse_mask; /*!<  */
        uint32_t fuse_status; /*!<  */
        isis_aocs__enpulsion_opmode_t op_mode; /*!<  */
        isis_aocs__enpulsion_status_t status; /*!<  */
        uint16_t thrust_ref; /*!<  \note conversion: eng. value [in µN] = 0.1 * raw */
        uint16_t thrust; /*!<  \note conversion: eng. value [in µN] = 0.1 * raw */
        uint16_t specific_impulse_ref; /*!<  */
        uint16_t specific_impulse; /*!<  */
        uint16_t bus_volt; /*!<  */
        uint16_t driver_volt; /*!<  */
        uint16_t bus_current; /*!<  \note conversion: eng. value [in mA] = 0.1 * raw */
        isis_aocs__enpulsion_emittermode_t emitter_mode; /*!<  */
        uint16_t emitter_volt_ref; /*!<  */
        uint16_t emitter_volt; /*!<  */
        uint16_t emitter_curr_ref; /*!<  \note conversion: eng. value [in µA] = 0.1 * raw */
        uint16_t emitter_curr; /*!<  \note conversion: eng. value [in µA] = 0.1 * raw */
        uint16_t emitter_pow_ref; /*!<  */
        uint16_t emitter_pow; /*!<  */
        uint8_t emitter_duty_cycle_ref; /*!<  \note conversion: eng. value [in percent] = 0.39215686274509803 * raw */
        uint8_t emitter_duty_cycle; /*!<  \note conversion: eng. value [in percent] = 0.39215686274509803 * raw */
        isis_aocs__enpulsion_extractormode_t extractor_mode; /*!<  */
        uint16_t extractor_volt_ref; /*!<  */
        uint16_t extractor_volt; /*!<  */
        uint16_t extractor_curr_ref; /*!<  \note conversion: eng. value [in µA] = 0.01 * raw */
        uint16_t extractor_curr; /*!<  \note conversion: eng. value [in µA] = 0.01 * raw */
        uint16_t extractor_pow_ref; /*!<  \note conversion: eng. value [in mW] = 0.1 * raw */
        uint16_t extractor_pow; /*!<  \note conversion: eng. value [in mW] = 0.1 * raw */
        uint8_t extractor_duty_cycle_ref; /*!<  \note conversion: eng. value [in percent] = 0.39215686274509803 * raw */
        uint8_t extractor_duty_cycle; /*!<  \note conversion: eng. value [in percent] = 0.39215686274509803 * raw */
        isis_aocs__enpulsion_heatermode_t heater_mode; /*!<  */
        uint16_t heater_volt_ref; /*!<  */
        uint16_t heater_volt; /*!<  */
        uint16_t heater_curr_ref; /*!<  \note conversion: eng. value [in mA] = 0.1 * raw */
        uint16_t heater_curr; /*!<  \note conversion: eng. value [in mA] = 0.1 * raw */
        uint16_t heater_pow_ref; /*!<  \note conversion: eng. value [in mW] = 1 * raw */
        uint16_t heater_pow; /*!<  \note conversion: eng. value [in mW] = 1 * raw */
        uint8_t heater_duty_cycle_ref; /*!<  \note conversion: eng. value [in percent] = 0.39215686274509803 * raw */
        uint8_t heater_duty_cycle; /*!<  \note conversion: eng. value [in percent] = 0.39215686274509803 * raw */
        isis_aocs__enpulsion_neutralizermode_t neutralizer_mode; /*!<  */
        isis_aocs__enpulsion_neutralizerfilament_t neutralizer_filament_ref; /*!<  */
        isis_aocs__enpulsion_neutralizerfilament_t neutralizer_filament; /*!<  */
        isis_aocs__enpulsion_neutralizerbias_t neutralizer_bias_ref; /*!<  */
        isis_aocs__enpulsion_neutralizerbias_t neutralizer_bias; /*!<  */
        uint16_t neutralizer_bias_volt; /*!<  \note conversion: eng. value [in mV] = 10 * raw */
        uint16_t neutralizer_curr_ref; /*!<  \note conversion: eng. value [in mA] = 0.1 * raw */
        uint16_t neutralizer_curr; /*!<  \note conversion: eng. value [in mA] = 0.1 * raw */
        uint16_t neutralizer_pow_ref; /*!<  \note conversion: eng. value [in mW] = 1 * raw */
        uint16_t neutralizer_pow; /*!<  \note conversion: eng. value [in mW] = 1 * raw */
        uint8_t neutralizer_duty_cycle_ref; /*!<  \note conversion: eng. value [in percent] = 0.39215686274509803 * raw */
        uint8_t neutralizer_duty_cycle; /*!<  \note conversion: eng. value [in percent] = 0.39215686274509803 * raw */
        uint16_t beam_curr_ref; /*!<  \note conversion: eng. value [in µA] = 0.1 * raw */
        uint16_t beam_curr; /*!<  \note conversion: eng. value [in µA] = 0.1 * raw */
        isis_aocs__enpulsion_temperaturemode_t temperature_mode; /*!<  */
        uint16_t reservoir_temp_ref; /*!<  \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t reservoir_temp; /*!<  \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t housing_temp; /*!<  \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t board_temp; /*!<  \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t thermal_elec_volt; /*!<  */
        uint16_t thermopile_calibration; /*!<  */
        uint16_t neutralizer_overcomp; /*!<  \note conversion: eng. value = 0.001 * raw */
    } fields;
} isis_aocs__enpulsion_registermap_t;

/*!
 * Union for storing the parameters for struct thruster_script_info.
 */
typedef union __attribute__((__packed__)) _isis_aocs__thruster_script_info_t
{
    unsigned char raw[38];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__thruster_script_state_t state; /*!< Script state */
        char path[33]; /*!< Loaded script filename */
        uint16_t step_count; /*!< Number of steps in script */
        uint16_t current_step; /*!< Current step index */
    } fields;
} isis_aocs__thruster_script_info_t;

/*!
 * Union for storing the parameters for struct enp_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_config_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__enpulsion_neutralizerfilament_t neutralizer_fil_ref; /*!< Neutralizer filament to use in thrusting mode */
        uint16_t beam_current_ref; /*!< Beam current ref raw value in thrusting mode \note conversion: eng. value [in mA] = 0.0001 * raw */
        uint16_t thermophile_calibration; /*!< Thermophile calibration value to set on initialization */
        uint16_t neutralizer_overcompensation; /*!< Neutralizer overcompensation value to set on initialization \note conversion: eng. value = 0.001 * raw */
        isis_aocs__enpulsion_heatermode_t heater_mode; /*!< Heater mode for last heating plateau and hot standby (manual = open loop, closed loop otherwise) */
    } fields;
} isis_aocs__enp_config_t;

/*!
 * Union for storing the parameters for struct enp_state_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_state_config_t
{
    unsigned char raw[28];
    struct __attribute__ ((__packed__))
    {
        uint16_t hot_standby_temp_ref_plateau_1; /*!< Temperature reference of the first plateau going into hot standby mode \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t hot_standby_duration_plateau_1; /*!< Duration in [s] of first plateau going into hot standby mode \note conversion: eng. value [in s] = 1 * raw */
        uint16_t hot_standby_temp_ref_plateau_2; /*!< Temperature reference of the second plateau going into hot standby mode \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t hot_standby_duration_plateau_2; /*!< Duration in [s] of second plateau going into hot standby mode \note conversion: eng. value [in s] = 1 * raw */
        uint16_t hot_standby_temp_ref; /*!< Temperature reference for hot standby mode (with closed loop heater control) \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t hot_standby_final_wait; /*!< Duration in [s] of final wait going into hot standby mode (with closed loop heater control) \note conversion: eng. value [in s] = 1 * raw */
        uint16_t manual_heater_power_ref; /*!< Power ref raw value in manual heating mode \note conversion: eng. value [in mW] = 1 * raw */
        uint16_t extractor_voltage_ref; /*!< Extractor voltage ref raw value in thrusting mode \note conversion: eng. value [in V] = 1 * raw */
        uint16_t neutralizer_power_ref; /*!< Neutralizer power ref raw value in thrusting mode \note conversion: eng. value [in mW] = 1 * raw */
        uint16_t thrust_ramp_time; /*!< Time in [s] to ramp to full thrust when firing \note conversion: eng. value [in s] = 1 * raw */
        uint16_t open_loop_heating_power_ref; /*!< Power reference when heating (with open loop heater control) \note conversion: eng. value [in mW] = 1 * raw */
        uint16_t open_loop_heating_duration; /*!< Duration in [s] of the final wait before going into hot standby mode (with open loop heater control) \note conversion: eng. value [in s] = 1 * raw */
        uint16_t open_loop_hot_standby_power_ref; /*!< Power reference for hot standby (with open loop heater control) \note conversion: eng. value [in mW] = 1 * raw */
        uint16_t auto_hot_standby_min_temp; /*!< Minimum reservoir temperature to allow automatic hot standby after power up \note conversion: eng. value [in K] = 0.01 * raw */
    } fields;
} isis_aocs__enp_state_config_t;

/*!
 * Union for storing the parameters for struct enp_fault_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_fault_config_t
{
    unsigned char raw[24];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__enpulsion_fusestatus_t fuse_mask; /*!< Fuse mask to set during initialization */
        uint16_t housing_temp_low; /*!< Housing temperature raw value lower limit in any mode \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t housing_temp_high; /*!< Housing temperature raw value upper limit in any mode \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t board_temp_low; /*!< Board temperature raw value lower limit in any mode \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t board_temp_high; /*!< Board temperature raw value upper limit in any mode \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t heater_power_limit; /*!< Heater power limit raw value upper limit in any mode \note conversion: eng. value [in mW] = 1 * raw */
        uint8_t heater_duty_cycle_limit; /*!< Heater power limit raw value upper limit in any mode \note conversion: eng. value [in %] = 0.39215686274509803 * raw */
        uint16_t extractor_min_voltage; /*!< Extractor minimum voltage raw value before firing is allowed \note conversion: eng. value [in V] = 1 * raw */
        uint16_t reservoir_temp_low; /*!< Reservoir temperature raw value lower limit in firing mode \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t reservoir_temp_high; /*!< Reservoir temperature raw value upper limit in any mode \note conversion: eng. value [in K] = 0.01 * raw */
        uint16_t system_voltage_limit; /*!< Lower limit for the system voltage below which firings will be aborted \note conversion: eng. value [in mV] = 1 * raw */
        isis_aocs__boolean8bit_t raise_fatal_on_comms_error; /*!< Flag indicating a fatal error needs to be raised if a communication error puts the thruster into ERROR mode */
    } fields;
} isis_aocs__enp_fault_config_t;

/*!
 * Union for storing the parameters for struct thrustme_i2t5_error.
 */
typedef union __attribute__((__packed__)) _isis_aocs__thrustme_i2t5_error_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t reserved : 1; /*!<  */
        uint8_t FIRING_DENIAL_ORV : 1; /*!< The system refused to start firing because of out-of-range values */
        uint8_t PREPARATION_FAILURE : 1; /*!< Failure during the preparation sequence */
        uint8_t OPERATION_FAILURE : 1; /*!< Failure during the operation sequence */
        uint8_t EMERGENCY_SHUTDOWN_1 : 1; /*!< One or several parameters were indicating values that could damage the propulsion system, so an emergency shutdown was performed */
        uint8_t EMERGENCY_SHUTDOWN_2 : 1; /*!< One or several parameters were indicating values that could damage the propulsion system, so an emergency shutdown was performed */
        uint8_t SHUTDOWN_REQUEST : 1; /*!< Firing stopped because of OBC request */
        uint8_t GROUND_TEST_DENIAL_ORV : 1; /*!< The system refused to start the ground test because of out-of-range values */
        uint8_t GROUND_TEST_FAILURE : 1; /*!< Failure during the ground test sequence */
        uint8_t GROUND_TEST_OVER : 1; /*!< The ground test sequence ended successfully */
        uint8_t COMMISSIONING_OVER : 1; /*!< The commissioning sequence ended successfully */
        uint8_t COMMISSIONING_FAILURE : 1; /*!< Failure during the commissioning */
        uint8_t EMERGENCY_SHUTDOWN_0_3 : 4; /*!< Emergency shutdown */
        uint8_t EMERGENCY_SHUTDOWN_4_47[6]; /*!< Emergency shutdown */
    } fields;
} isis_aocs__thrustme_i2t5_error_t;

/*!
 * Union for storing the parameters for struct thrustme_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__thrustme_tlm_t
{
    unsigned char raw[56];
    struct __attribute__ ((__packed__))
    {
        uint16_t data_length; /*!<  */
        uint8_t tlm_request_count; /*!< The count of telemetry requirement that I2T5 have received correctly. */
        uint8_t correct_frame_count; /*!< Correct frame count */
        uint8_t err_frame_count; /*!< Error frame count */
        uint8_t latest_command; /*!< Latest command */
        isis_aocs__thrustme_i2t5_status_t status; /*!<  */
        uint8_t vendor_defined; /*!<  */
        isis_aocs__thrustme_i2t5_error_t error_code; /*!<  */
        uint16_t voltage_supply; /*!<  \note conversion: eng. value [in V] = 0.01 * raw */
        uint16_t current_consumption; /*!<  \note conversion: eng. value [in A] = 0.01 * raw */
        int16_t temperature; /*!<  \note conversion: eng. value [in °C] = 0.1 * raw */
        int16_t vendor_defined0; /*!<  */
        int16_t vendor_defined1; /*!<  */
        int16_t vendor_defined2; /*!<  */
        uint16_t vendor_defined3; /*!<  */
        uint16_t vendor_defined4; /*!<  */
        uint16_t vendor_defined5; /*!<  */
        uint16_t vendor_defined6; /*!<  */
        uint8_t vendor_defined7; /*!<  */
        uint8_t vendor_defined8; /*!<  */
        uint8_t vendor_defined9; /*!<  */
        uint8_t checksum; /*!< 8 Bit unsigned integer Checksum of the preceding 39 Bytes, ignoring carry bits. */
        uint64_t prep_time; /*!< Time the thruster has spent in the preparation phase \note conversion: eng. value [in s] = 0.000001 * raw */
        uint64_t op_time; /*!< Time the thruster has spent in the operation phase \note conversion: eng. value [in s] = 0.000001 * raw */
    } fields;
} isis_aocs__thrustme_tlm_t;

/*!
 * Union for storing the parameters for struct tm_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_hk_t
{
    unsigned char raw[128];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        isis_aocs__thrustme_tlm_t tlm; /*!<  */
        uint8_t padding[64]; /*!<  */
    } fields;
} isis_aocs__tm_hk_t;

/*!
 * Union for storing the parameters for struct thruster_generic_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__thruster_generic_hk_t
{
    unsigned char raw[128];
    struct __attribute__ ((__packed__))
    {
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        uint8_t tlm[120]; /*!<  */
    } fields;
} isis_aocs__thruster_generic_hk_t;

/*!
 * Union for storing the parameters for struct thruster_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__thruster_hk_t
{
    unsigned char raw[128];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__thruster_generic_hk_t data; /*!<  */
    } fields;
} isis_aocs__thruster_hk_t;

/*!
 * Union for storing the parameters for struct mcu_reset_cause.
 */
typedef union __attribute__((__packed__)) _isis_aocs__mcu_reset_cause_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        uint8_t padding : 1; /*!<  */
        uint8_t BOR : 1; /*!< BOR reset flag */
        uint8_t PIN : 1; /*!< PIN reset flag */
        uint8_t POR_PDR : 1; /*!< POR/PDR reset flag */
        uint8_t SFT : 1; /*!< Software reset flag */
        uint8_t IWDG_reset : 1; /*!< Independent watchdog reset flag */
        uint8_t WWDG_reset : 1; /*!< Window watchdog reset flag */
        uint8_t LPWR : 1; /*!< Low-power reset flag */
    } fields;
} isis_aocs__mcu_reset_cause_t;

/*!
 * Union for storing the parameters for struct euler_angles.
 */
typedef union __attribute__((__packed__)) _isis_aocs__euler_angles_t
{
    unsigned char raw[12];
    struct __attribute__ ((__packed__))
    {
        float roll; /*!< Roll angle \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float pitch; /*!< Pitch angle \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float yaw; /*!< Yaw angle \note conversion: eng. value [in °] = 57.29577951308232 * raw */
    } fields;
} isis_aocs__euler_angles_t;

/*!
 * Union for storing the parameters for struct direction_angles.
 */
typedef union __attribute__((__packed__)) _isis_aocs__direction_angles_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        float azimuth; /*!< Azimuth angle of the direction vector \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float elevation; /*!< Elevation angle of the direction vector \note conversion: eng. value [in °] = 57.29577951308232 * raw */
    } fields;
} isis_aocs__direction_angles_t;

/*!
 * Union for storing the parameters for struct stack_info.
 */
typedef union __attribute__((__packed__)) _isis_aocs__stack_info_t
{
    unsigned char raw[17];
    struct __attribute__ ((__packed__))
    {
        char task[13]; /*!< Task name */
        uint32_t stack_left; /*!< Minimum amount of stack space left in bytes */
    } fields;
} isis_aocs__stack_info_t;

/*!
 * Union for storing the parameters for struct tle.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tle_t
{
    unsigned char raw[41];
    struct __attribute__ ((__packed__))
    {
        float inc; /*!< Inclination */
        float RAAN; /*!< Right ascension of ascending node */
        float e; /*!< Eccentricity */
        float argp; /*!< Argument of perigee */
        float ma; /*!< Mean anomaly */
        double mm; /*!< Mean motion */
        float BSTAR; /*!< Drag coefficient */
        uint8_t EPOCH_year; /*!< Epoch year expressed as years since 2000 */
        double EPOCH_day; /*!< Epoch day of the year, with Jan 1st as day 1 */
    } fields;
} isis_aocs__tle_t;

/*!
 * Union for storing the parameters for struct bias_estimate.
 */
typedef union __attribute__((__packed__)) _isis_aocs__bias_estimate_t
{
    unsigned char raw[24];
    struct __attribute__ ((__packed__))
    {
        uint64_t last_update; /*!< Unix epoch when the bias was last updated by the bias estimator */
        float bias[3]; /*!< Current bias value */
        float filter_coefficient; /*!< Last value of filter coefficient */
    } fields;
} isis_aocs__bias_estimate_t;

/*!
 * Union for storing the parameters for struct bias_estimation_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__bias_estimation_output_t
{
    unsigned char raw[96];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__bias_estimate_t mtm_int; /*!< Bias estimate for MTM_INT */
        isis_aocs__bias_estimate_t mtm_ext; /*!< Bias estimate for MTM_EXT */
        isis_aocs__bias_estimate_t scg_raw; /*!< Bias estimate for SCG_RAW */
        isis_aocs__bias_estimate_t scg_filt; /*!< Bias estimate for SCG_FILT */
    } fields;
} isis_aocs__bias_estimation_output_t;

/*!
 * Union for storing the parameters for struct Tlm_entry_last_sample.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tlm_entry_last_sample_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_entry_reference_t reference; /*!< What the entry number refers to */
        uint16_t number; /*!< TLM entry number */
        uint8_t reserved; /*!< Reserved for future use */
    } fields;
} isis_aocs__tlm_entry_last_sample_t;

/*!
 * Union for storing the parameters for struct Tlm_entry_last_pps_sample.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tlm_entry_last_pps_sample_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_entry_reference_t reference; /*!< What the entry number refers to */
        uint16_t number; /*!< TLM entry number */
        uint8_t reserved; /*!< Reserved for future use */
    } fields;
} isis_aocs__tlm_entry_last_pps_sample_t;

/*!
 * Union for storing the parameters for struct Tlm_response_header.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tlm_response_header_t
{
    unsigned char raw[18];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        int32_t entry; /*!< TLM entry number */
        uint64_t timestamp; /*!< TLM unix timestamp */
        uint32_t frame_counter; /*!< Frame counter */
    } fields;
} isis_aocs__tlm_response_header_t;

/*!
 * Union for storing the parameters for struct power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__power_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        int16_t voltage; /*!< Voltage [mV] \note conversion: eng. value [in V] = 0.001 * raw */
        int16_t current; /*!< Current [mA] */
    } fields;
} isis_aocs__power_t;

/*!
 * Union for storing the parameters for struct pdu_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__pdu_hk_t
{
    unsigned char raw[0];
    struct __attribute__ ((__packed__))
    {
    } fields;
} isis_aocs__pdu_hk_t;

/*!
 * Union for storing the parameters for struct power_hk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__power_hk_t
{
    unsigned char raw[88];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__power_t system_pg; /*!< BOMO power-good measurement */
        isis_aocs__power_t system_in; /*!< BOMO input power */
        isis_aocs__power_t system_5v; /*!< BOMO 5V power */
        isis_aocs__power_t system_3v3; /*!< BOMO 3V3 power */
        isis_aocs__power_t obc_1v8; /*!< MPCC 1V8 power */
        isis_aocs__power_t obc_3v3; /*!< MPCC 3V3 power */
        isis_aocs__power_t obc_in; /*!< MPCC input power */
        isis_aocs__power_t imtq_d; /*!< IMTQ power */
        isis_aocs__power_t imtq_a; /*!< IMTQ power */
        isis_aocs__power_t imtq_cx; /*!< IMTQ power */
        isis_aocs__power_t imtq_cy; /*!< IMTQ power */
        isis_aocs__power_t imtq_cz; /*!< IMTQ power */
        isis_aocs__power_t mtm_ext; /*!< External MTM power */
        isis_aocs__power_t scg; /*!< SCG power */
        isis_aocs__power_t rw0; /*!< RW power */
        isis_aocs__power_t rw1; /*!< RW power */
        isis_aocs__power_t rw2; /*!< RW power */
        isis_aocs__power_t rw3; /*!< RW power */
        isis_aocs__power_t gnss; /*!< GNSS power */
        isis_aocs__power_t str_pu; /*!< STR power */
        isis_aocs__power_t str_oh; /*!< STR power */
        isis_aocs__power_t thr; /*!< Thruster power */
    } fields;
} isis_aocs__power_hk_t;

/*!
 * Union for storing the parameters for struct subsys_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__subsys_tlm_t
{
    unsigned char raw[489];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__power_hk_t power; /*!< Power HK */
        isis_aocs__imtq_hk_t imtq; /*!< IMTQ HK */
        isis_aocs__scg_hk_t scg; /*!< SCG HK */
        isis_aocs__rw_hk_t rw; /*!< RW HK */
        isis_aocs__hdrm_hk_t hdrm; /*!< HDRM Status */
        isis_aocs__novatel_oem719_hk_t gnss; /*!< GNSS HK */
        isis_aocs__auriga_hk_t str; /*!< Star tracker HK */
        isis_aocs__thruster_hk_t thr; /*!< Thruster HK */
    } fields;
} isis_aocs__subsys_tlm_t;

/*!
 * Union for storing the parameters for struct subsystem_power_state.
 */
typedef union __attribute__((__packed__)) _isis_aocs__subsystem_power_state_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__subsys_power_t system : 1; /*!<  */
        isis_aocs__subsys_power_t obc : 1; /*!<  */
        isis_aocs__subsys_power_t adc : 1; /*!<  */
        isis_aocs__subsys_power_t imtq : 1; /*!<  */
        isis_aocs__subsys_power_t mtm_ext : 1; /*!<  */
        isis_aocs__subsys_power_t scg : 1; /*!<  */
        isis_aocs__subsys_power_t rw : 1; /*!<  */
        isis_aocs__subsys_power_t rw1 : 1; /*!<  */
        isis_aocs__subsys_power_t rw2 : 1; /*!<  */
        isis_aocs__subsys_power_t rw3 : 1; /*!<  */
        isis_aocs__subsys_power_t rw4 : 1; /*!<  */
        isis_aocs__subsys_power_t hdrm : 1; /*!<  */
        isis_aocs__subsys_power_t gnss : 1; /*!<  */
        isis_aocs__subsys_power_t str : 1; /*!<  */
        isis_aocs__subsys_power_t thr : 1; /*!<  */
        uint8_t reserved : 1; /*!<  */
    } fields;
} isis_aocs__subsystem_power_state_t;

/*!
 * Union for storing the parameters for struct subsystem_state.
 */
typedef union __attribute__((__packed__)) _isis_aocs__subsystem_state_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    #ifdef _WIN32
        __attribute__((gcc_struct))
    #endif
    {
        isis_aocs__subsystem_power_state_t power_state; /*!< Subsystem power state */
        isis_aocs__subsys_state_t adc_state : 2; /*!< ADC system status */
        isis_aocs__imtq_state_t imtq_state : 3; /*!< IMTQ system state */
        isis_aocs__subsys_state_t mtm_ext_state : 2; /*!< External MTM system state */
        isis_aocs__scg_state_t scg_state : 3; /*!< SCG system status */
        isis_aocs__rw_state_t rw_state : 3; /*!< RW system status */
        isis_aocs__subsys_state_t gnss_state : 3; /*!< GNSS system status */
        isis_aocs__auriga_state_t str_state : 5; /*!< Star tracker system status */
        isis_aocs__thruster_state_t thr_state : 5; /*!< Thruster system status */
        uint32_t reserved : 6; /*!<  */
    } fields;
} isis_aocs__subsystem_state_t;

/*!
 * Union for storing the parameters for struct gnss_measurement.
 */
typedef union __attribute__((__packed__)) _isis_aocs__gnss_measurement_t
{
    unsigned char raw[24];
    struct __attribute__ ((__packed__))
    {
        float position[3]; /*!< Position \note conversion: eng. value [in km] = 0.001 * raw */
        float velocity[3]; /*!< Velocity \note conversion: eng. value [in km/s] = 0.001 * raw */
    } fields;
} isis_aocs__gnss_measurement_t;

/*!
 * Union for storing the parameters for struct startracker_measurement.
 */
typedef union __attribute__((__packed__)) _isis_aocs__startracker_measurement_t
{
    unsigned char raw[53];
    struct __attribute__ ((__packed__))
    {
        float attitude[4]; /*!< Attitude */
        float angular_rate[3]; /*!< Angular rate \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        uint64_t timestamp; /*!< Unix timestamp of the measurement */
        uint8_t attitude_valid : 1; /*!< Whether the attitude measurement is valid */
        uint8_t angular_rate_valid : 1; /*!< Whether the angular rate measurement is valid */
        uint8_t padding_valid : 6; /*!< Padding bits */
        float quality[3]; /*!< Measurement quality */
        uint16_t stars_detected; /*!< Number of stars detected */
        uint16_t stars_expected; /*!< Number of stars expected */
    } fields;
} isis_aocs__startracker_measurement_t;

/*!
 * Union for storing the parameters for struct startracker_processed_sensor_data.
 */
typedef union __attribute__((__packed__)) _isis_aocs__startracker_processed_sensor_data_t
{
    unsigned char raw[28];
    struct __attribute__ ((__packed__))
    {
        float attitude[4]; /*!< Attitude */
        float angular_rate[3]; /*!< Angular rate \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
    } fields;
} isis_aocs__startracker_processed_sensor_data_t;

/*!
 * Union for storing the parameters for struct measurement_data.
 */
typedef union __attribute__((__packed__)) _isis_aocs__measurement_data_t
{
    unsigned char raw[247];
    struct __attribute__ ((__packed__))
    {
        float MTM_INT[3]; /*!< Internal MTM raw measurement \note conversion: eng. value [in µT] = 0.001 * raw */
        float MTM_EXT[3]; /*!< External MTM raw measurement \note conversion: eng. value [in µT] = 0.001 * raw */
        int8_t MTM_TEMP; /*!< External MTM raw temperature measurement */
        uint16_t PD[8]; /*!< Photodiode raw measurement */
        float SCG_RAW[3]; /*!< SCG raw measurement \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float SCG_FILT[3]; /*!< SCG filtered measurement \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        uint16_t FSS_1[4]; /*!< FSS raw quadrant measurement */
        uint16_t FSS_2[4]; /*!< FSS raw quadrant measurement */
        uint16_t FSS_3[4]; /*!< FSS raw quadrant measurement */
        uint16_t FSS_4[4]; /*!< FSS raw quadrant measurement */
        float RW[4]; /*!< Wheel speeds \note conversion: eng. value [in rpm] = 9.549296585513721 * raw */
        isis_aocs__gnss_measurement_t GNSS; /*!< GNSS measurement */
        isis_aocs__startracker_measurement_t STR_1; /*!< Star tracker */
        isis_aocs__startracker_measurement_t STR_2; /*!< Star tracker */
        float THR; /*!< Thrust force \note conversion: eng. value [in mNm] = 1000 * raw */
    } fields;
} isis_aocs__measurement_data_t;

/*!
 * Union for storing the parameters for struct processed_sensor_data.
 */
typedef union __attribute__((__packed__)) _isis_aocs__processed_sensor_data_t
{
    unsigned char raw[188];
    struct __attribute__ ((__packed__))
    {
        float MTM_INT[3]; /*!< Internal MTM measurement \note conversion: eng. value [in µT] = 1000000 * raw */
        float MTM_EXT[3]; /*!< External MTM measurement \note conversion: eng. value [in µT] = 1000000 * raw */
        float CSS[3]; /*!< CSS sun direction */
        float SCG_RAW[3]; /*!< SCG raw angular rate \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float SCG_FILT[3]; /*!< SCG filtered angular rate \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float FSS_1[3]; /*!< FSS sun direction */
        float FSS_2[3]; /*!< FSS sun direction */
        float FSS_3[3]; /*!< FSS sun direction */
        float FSS_4[3]; /*!< FSS sun direction */
        isis_aocs__gnss_measurement_t GNSS; /*!< GNSS ECI measurement */
        isis_aocs__startracker_processed_sensor_data_t STR_1; /*!< Star tracker */
        isis_aocs__startracker_processed_sensor_data_t STR_2; /*!< Star tracker */
    } fields;
} isis_aocs__processed_sensor_data_t;

/*!
 * Union for storing the parameters for struct processed_sensor_data_angles.
 */
typedef union __attribute__((__packed__)) _isis_aocs__processed_sensor_data_angles_t
{
    unsigned char raw[64];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__direction_angles_t CSS; /*!< CSS sun direction */
        isis_aocs__direction_angles_t FSS_1; /*!< FSS 1 sun direction */
        isis_aocs__direction_angles_t FSS_2; /*!< FSS 2 sun direction */
        isis_aocs__direction_angles_t FSS_3; /*!< FSS 3 sun direction */
        isis_aocs__direction_angles_t FSS_4; /*!< FSS 4 sun direction */
        isis_aocs__euler_angles_t STR_1; /*!< Star tracker OH1 */
        isis_aocs__euler_angles_t STR_2; /*!< Star tracker OH2 */
    } fields;
} isis_aocs__processed_sensor_data_angles_t;

/*!
 * Union for storing the parameters for struct actuation_mtq.
 */
typedef union __attribute__((__packed__)) _isis_aocs__actuation_mtq_t
{
    unsigned char raw[12];
    struct __attribute__ ((__packed__))
    {
        float dipole[3]; /*!< Dipole \note conversion: eng. value [in mAm^2] = 1000 * raw */
    } fields;
} isis_aocs__actuation_mtq_t;

/*!
 * Union for storing the parameters for struct actuation_rw.
 */
typedef union __attribute__((__packed__)) _isis_aocs__actuation_rw_t
{
    unsigned char raw[17];
    struct __attribute__ ((__packed__))
    {
        float wheel_speed[4]; /*!< Wheel Speed in [rad/s] \note conversion: eng. value [in rpm] = 9.549296585513721 * raw */
        uint8_t saturated; /*!< Wheels Saturated */
    } fields;
} isis_aocs__actuation_rw_t;

/*!
 * Union for storing the parameters for struct system_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__system_status_t
{
    unsigned char raw[31];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__operating_mode_t operating_mode; /*!< Operating Mode */
        isis_aocs__subsystem_state_t subsystems; /*!< Subsystem state */
        int16_t subsystem_error_code; /*!< Last subsystem error code */
        isis_aocs__aocs_status_t aocs_status; /*!< AOCS processing status */
        uint8_t aocs_error_code; /*!< AOCS processing detailed error code */
        uint16_t fault_count; /*!< FDIR error count */
        isis_aocs__fault_id_t last_fault_id; /*!< Last fault that occurred */
        uint64_t last_fault_timestamp; /*!< Timestamp the last fault occurred */
        uint8_t last_fault_data[8]; /*!< Payload data of the last fault */
        isis_aocs__fatal_error_t fatal_error; /*!< Whether AOCS encountered an error it cannot recover itself */
    } fields;
} isis_aocs__system_status_t;

/*!
 * Union for storing the parameters for struct measurements.
 */
typedef union __attribute__((__packed__)) _isis_aocs__measurements_t
{
    unsigned char raw[256];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__time_source_t time_source; /*!< Time source */
        uint64_t unix_time; /*!< Measurement time in seconds since the Unix epoch */
        isis_aocs__measurement_data_t measurements; /*!< Raw measurement data */
    } fields;
} isis_aocs__measurements_t;

/*!
 * Union for storing the parameters for struct ephemeris.
 */
typedef union __attribute__((__packed__)) _isis_aocs__ephemeris_t
{
    unsigned char raw[54];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__posvel_source_t orbit_source; /*!< "Source of orbit information */
        float tle_age; /*!< TLE age \note conversion: eng. value [in h] = 0.0002777777777777778 * raw */
        float pos[3]; /*!< ECI position \note conversion: eng. value [in km] = 0.001 * raw */
        float vel[3]; /*!< ECI velocity \note conversion: eng. value [in km/s] = 0.001 * raw */
        float mag[3]; /*!< IGRF ECI magnetic field in [T] \note conversion: eng. value [in µT] = 1000000 * raw */
        float sun[3]; /*!< ECI sun direction */
        isis_aocs__eclipse_t eclipse; /*!< Eclipse flag */
    } fields;
} isis_aocs__ephemeris_t;

/*!
 * Union for storing the parameters for struct state_estimate.
 */
typedef union __attribute__((__packed__)) _isis_aocs__state_estimate_t
{
    unsigned char raw[49];
    struct __attribute__ ((__packed__))
    {
        float q[4]; /*!< Attitude quaternion (vector elements first) */
        float omega[3]; /*!< Angular Rate in BRF w.r.t. ECI-TOD frame in [rad/s] \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float omega_raw[3]; /*!< Raw Angular Rate estimate in BRF w.r.t. ECI-TOD frame in [rad/s] \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float q_var; /*!< Sum of the attitude estimate variance */
        float omega_var; /*!< Sum of the angular rate estimate variance */
        uint8_t q_valid : 1; /*!< Attitude estimate valid flag */
        uint8_t omega_valid : 1; /*!< Angular rate valid flag */
        uint8_t omega_raw_valid : 1; /*!< Raw angular rate valid flag */
        uint8_t padding : 5; /*!<  */
    } fields;
} isis_aocs__state_estimate_t;

/*!
 * Union for storing the parameters for struct control_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__control_output_t
{
    unsigned char raw[41];
    struct __attribute__ ((__packed__))
    {
        float q_err[4]; /*!< Attitude Error */
        float omega_err[3]; /*!< Angular Rate Error in [rad/s] \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        isis_aocs__ctrl_output_type_t ctrl_out_type; /*!< Control output type */
        float ctrl_output[3]; /*!< Controller output */
    } fields;
} isis_aocs__control_output_t;

/*!
 * Union for storing the parameters for struct actuation_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__actuation_output_t
{
    unsigned char raw[41];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__actuation_mtq_t mtq; /*!< MTQ output */
        isis_aocs__actuation_rw_t rw; /*!< RW output */
        float act_torque[3]; /*!< Requested output torque */
    } fields;
} isis_aocs__actuation_output_t;

/*!
 * Union for storing the parameters for struct euler_angle_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__euler_angle_output_t
{
    unsigned char raw[88];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__processed_sensor_data_angles_t processed_sensor_data; /*!< Processed sensor data in Euler angles */
        isis_aocs__euler_angles_t lvlh_angles; /*!< Current attitude in Euler angles */
        isis_aocs__euler_angles_t control_error; /*!< Current control error in Euler angles */
    } fields;
} isis_aocs__euler_angle_output_t;

/*!
 * Union for storing the parameters for struct tlm_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tlm_status_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    #ifdef _WIN32
        __attribute__((gcc_struct))
    #endif
    {
        isis_aocs__tlm_log_status_t genhk : 1; /*!< General housekeeping data logging status */
        isis_aocs__tlm_log_status_t subsys : 1; /*!< Subsystem data logging status */
        isis_aocs__tlm_log_status_t aocs : 1; /*!< AOCS data logging status */
        isis_aocs__tlm_log_status_t aocs_ex : 1; /*!< AOCS extended data logging status */
        isis_aocs__tlm_log_status_t fs_error : 1; /*!< File-System error */
        isis_aocs__tlm_log_status_t fram_error : 1; /*!< Error while reading or writing FRAM. */
        isis_aocs__tlm_log_status_t ram_error : 1; /*!< Error while manipulating log-data in RAM */
        isis_aocs__tlm_log_status_t malloc_error : 1; /*!< Error while allocating memory */
        isis_aocs__tlm_log_status_t invalid_input : 1; /*!< User-input was invalid */
        isis_aocs__tlm_log_status_t fram_addr : 1; /*!< Attempting to use an invalid FRAM address */
        isis_aocs__tlm_log_status_t fram_overlap : 1; /*!< Attempting to use FRAM space allocated for something else */
        isis_aocs__tlm_log_status_t max_logs : 1; /*!< Exceeding max number of log */
        isis_aocs__tlm_log_status_t timeout : 1; /*!< Library access timeout */
        isis_aocs__tlm_log_status_t fdir : 1; /*!< FDIR logging status */
    } fields;
} isis_aocs__tlm_status_t;

/*!
 * Union for storing the parameters for struct fault_list_entry.
 */
typedef union __attribute__((__packed__)) _isis_aocs__fault_list_entry_t
{
    unsigned char raw[17];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fault_id_t fault; /*!< Fault ID */
        uint8_t value[8]; /*!< Fault ID */
        uint64_t timestamp; /*!< Unix timestamp of the last occurence */
    } fields;
} isis_aocs__fault_list_entry_t;

/*!
 * Union for storing the parameters for struct trace_list_entry.
 */
typedef union __attribute__((__packed__)) _isis_aocs__trace_list_entry_t
{
    unsigned char raw[24];
    struct __attribute__ ((__packed__))
    {
        char message[16]; /*!< Trace event message */
        uint32_t timestamp; /*!< Trace event timestamp */
        uint32_t entry_number; /*!< Trace event entry number */
    } fields;
} isis_aocs__trace_list_entry_t;

/*!
 * Union for storing the parameters for struct imtq_power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__imtq_power_t
{
    unsigned char raw[24];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__power_t d; /*!< IMTQ digital power */
        isis_aocs__power_t a; /*!< IMTQ analog power */
        isis_aocs__power_t cx; /*!< IMTQ coil X power */
        isis_aocs__power_t cy; /*!< IMTQ coil Y power */
        isis_aocs__power_t cz; /*!< IMTQ coil Z power */
        isis_aocs__power_t system_5v; /*!< System 5V power */
    } fields;
} isis_aocs__imtq_power_t;

/*!
 * Union for storing the parameters for struct rw_power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__rw_power_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__power_t rw0; /*!< RW0 power */
        isis_aocs__power_t rw1; /*!< RW1 power */
        isis_aocs__power_t rw2; /*!< RW2 power */
        isis_aocs__power_t rw3; /*!< RW3 power */
    } fields;
} isis_aocs__rw_power_t;

/*!
 * Union for storing the parameters for struct novatel_log_config_item.
 */
typedef union __attribute__((__packed__)) _isis_aocs__novatel_log_config_item_t
{
    unsigned char raw[7];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__novatel_msg_id_t msg_id; /*!<  */
        isis_aocs__novatel_trigger_type_t trigger : 3; /*!<  */
        uint8_t padding : 2; /*!<  */
        isis_aocs__novatel_msg_type_t msg_type : 2; /*!<  */
        uint16_t period; /*!<  \note conversion: eng. value = 0.05 * raw */
        uint16_t offset; /*!<  \note conversion: eng. value = 0.05 * raw */
    } fields;
} isis_aocs__novatel_log_config_item_t;

/*!
 * Union for storing the parameters for struct auriga_power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_power_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__power_t pu; /*!< Star tracker processing unit power */
        isis_aocs__power_t oh; /*!< Star tracker optical head power */
    } fields;
} isis_aocs__auriga_power_t;

/*!
 * Union for storing the parameters for struct enp_power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_power_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__power_t thr; /*!< Thruster main power */
        isis_aocs__power_t system_5v; /*!< System 5V power */
    } fields;
} isis_aocs__enp_power_t;

/*!
 * Union for storing the parameters for struct tm_power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_power_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__power_t thr; /*!< Thruster main power */
        uint8_t padding[4]; /*!< Reserved for future use */
    } fields;
} isis_aocs__tm_power_t;

/*!
 * Union for storing the parameters for struct subsystem_bitfield.
 */
typedef union __attribute__((__packed__)) _isis_aocs__subsystem_bitfield_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__subsys_system_t system : 1; /*!<  */
        isis_aocs__subsys_obc_t obc : 1; /*!<  */
        isis_aocs__subsys_adc_t adc : 1; /*!<  */
        isis_aocs__subsys_imtq_t imtq : 1; /*!<  */
        isis_aocs__subsys_mtm_ext_t mtm_ext : 1; /*!<  */
        isis_aocs__subsys_scg_t scg : 1; /*!<  */
        isis_aocs__subsys_rwa_t rwa : 1; /*!<  */
        isis_aocs__subsys_rw1_t rw1 : 1; /*!<  */
        isis_aocs__subsys_rw2_t rw2 : 1; /*!<  */
        isis_aocs__subsys_rw3_t rw3 : 1; /*!<  */
        isis_aocs__subsys_rw4_t rw4 : 1; /*!<  */
        isis_aocs__subsys_hdrm_t hdrm : 1; /*!<  */
        isis_aocs__subsys_gnss_t gnss : 1; /*!<  */
        isis_aocs__subsys_str_t str : 1; /*!<  */
        isis_aocs__subsys_thr_t thr : 1; /*!<  */
    } fields;
} isis_aocs__subsystem_bitfield_t;

/*!
 * Union for storing the parameters for struct sensor_bitfield.
 */
typedef union __attribute__((__packed__)) _isis_aocs__sensor_bitfield_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__sensor_mtm_int_t mtm_int : 1; /*!< Enable MTM_INT */
        isis_aocs__sensor_mtm_ext_t mtm_ext : 1; /*!< Enable MTM_EXT */
        isis_aocs__sensor_pda_t pda : 1; /*!< Enable PDA */
        isis_aocs__sensor_scg_raw_t scg_raw : 1; /*!< Enable SCG_RAW */
        isis_aocs__sensor_scg_filt_t scg_filt : 1; /*!< Enable SCG_FILT */
        isis_aocs__sensor_fss_1_t fss_1 : 1; /*!< Enable FSS_1 */
        isis_aocs__sensor_fss_2_t fss_2 : 1; /*!< Enable FSS_2 */
        isis_aocs__sensor_fss_3_t fss_3 : 1; /*!< Enable FSS_3 */
        isis_aocs__sensor_fss_4_t fss_4 : 1; /*!< Enable FSS_4 */
        isis_aocs__sensor_gnss_t gnss : 1; /*!< Enable GNSS */
        isis_aocs__sensor_str_1_t str_1 : 1; /*!< Enable STR_1 */
        isis_aocs__sensor_str_2_t str_2 : 1; /*!< Enable STR_2 */
    } fields;
} isis_aocs__sensor_bitfield_t;

/*!
 * Union for storing the parameters for struct Tlm_entry_last_sample_forced.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tlm_entry_last_sample_forced_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_entry_reference_t reference; /*!< What the entry number refers to */
        uint16_t number; /*!< TLM entry number */
        uint8_t reserved; /*!< Reserved for future use */
    } fields;
} isis_aocs__tlm_entry_last_sample_forced_t;

/*!
 * Union for storing the parameters for struct Tlm_entry_last_pps_sample_forced.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tlm_entry_last_pps_sample_forced_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_entry_reference_t reference; /*!< What the entry number refers to */
        uint16_t number; /*!< TLM entry number */
        uint8_t reserved; /*!< Reserved for future use */
    } fields;
} isis_aocs__tlm_entry_last_pps_sample_forced_t;

/*!
 * Union for storing the parameters for struct control_target_generic.
 */
typedef union __attribute__((__packed__)) _isis_aocs__control_target_generic_t
{
    unsigned char raw[46];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__ctrl_target_type_t primary_target; /*!< Primary target type */
        isis_aocs__ctrl_target_type_t secondary_target; /*!< Secondary target type */
        float primary_target_angles[2]; /*!< Primary target parameters \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float primary_target_altitude; /*!< Primary target altitude if type is WGS84 */
        float secondary_target_params[2]; /*!< Secondary target parameters \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float secondary_target_altitude; /*!< Secondary target altitude if type is WGS84 */
        float primary_body_axis[2]; /*!< Primary body axis azimuth/elevation \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float secondary_body_axis[2]; /*!< Secondary body axis azimuth/elevation \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float K; /*!< Low-pass parameter for the secondary axis */
    } fields;
} isis_aocs__control_target_generic_t;

/*!
 * Union for storing the parameters for struct control_target_quat.
 */
typedef union __attribute__((__packed__)) _isis_aocs__control_target_quat_t
{
    unsigned char raw[18];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__ctrl_target_type_t target_primary_type; /*!< Primary target type */
        isis_aocs__ctrl_target_type_t target_secondary_type; /*!< Secondary target type */
        float q[4]; /*!< Quaternion (imaginary part first) */
    } fields;
} isis_aocs__control_target_quat_t;

/*!
 * Union for storing the parameters for struct control_target_lvlh.
 */
typedef union __attribute__((__packed__)) _isis_aocs__control_target_lvlh_t
{
    unsigned char raw[14];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__ctrl_target_type_t target_primary_type; /*!< Primary target type */
        isis_aocs__ctrl_target_type_t target_secondary_type; /*!< Secondary target type */
        float roll; /*!< Roll angle \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float pitch; /*!< Pitch angle \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float yaw; /*!< Yaw angle \note conversion: eng. value [in °] = 57.29577951308232 * raw */
    } fields;
} isis_aocs__control_target_lvlh_t;

/*!
 * Union for storing the parameters for struct control_target_gsr.
 */
typedef union __attribute__((__packed__)) _isis_aocs__control_target_gsr_t
{
    unsigned char raw[42];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__ctrl_target_type_t target_primary_type; /*!< Primary target type */
        isis_aocs__ctrl_target_gsr_rotation_correction_t rotation_correction; /*!< Whether to correct for the Earth's rotation */
        float latitude; /*!< Target latitude \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float longitude; /*!< Target longitude \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float altitude; /*!< Target altitude */
        uint64_t timestamp; /*!< Target timestamp */
        float velocity; /*!< Velocity \note conversion: eng. value [in km/s] = 0.001 * raw */
        float primary_body_axis[2]; /*!< Primary body axis azimuth/elevation \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float secondary_body_axis[2]; /*!< Secondary body axis azimuth/elevation \note conversion: eng. value [in °] = 57.29577951308232 * raw */
    } fields;
} isis_aocs__control_target_gsr_t;

/*!
 * Union for storing the parameters for struct control_target_spin.
 */
typedef union __attribute__((__packed__)) _isis_aocs__control_target_spin_t
{
    unsigned char raw[34];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__ctrl_target_type_t target_primary_type; /*!< Primary target type */
        isis_aocs__ctrl_target_type_t target_secondary_type; /*!< Secondary target type */
        float primary_target_angles[2]; /*!< Primary target parameters \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float primary_target_altitude; /*!< Primary target altitude if type is WGS84 */
        float spin_rate; /*!< Spin rate \note conversion: eng. value [in °/s] = 57.29577951308232 * raw */
        float reserved2[2]; /*!< Reserved2 */
        float primary_body_axis[2]; /*!< Primary body axis azimuth/elevation \note conversion: eng. value [in °] = 57.29577951308232 * raw */
    } fields;
} isis_aocs__control_target_spin_t;

/*!
 * Union for storing the parameters sent by apply_aocs_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__apply_aocs_config__to_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__moi_changed_t moi : 1; /*!< Apply change of AOCS_MOI flight parameter */
        isis_aocs__loop_duration_changed_t loop_duration : 1; /*!< Apply change of AOCS_LOOP_DURATION flight parameter */
        isis_aocs__modes_changed_t modes : 1; /*!< Apply change of any of the AOCS_MODE_* flight parameters */
        isis_aocs__sensor_types_changed_t sensor_types : 1; /*!< Apply a change of sensor types */
        isis_aocs__sensors_changed_t sensors : 1; /*!< Apply a change of any of the AOCS_[sensor] flight parameters */
        uint8_t reserved0 : 3; /*!< Reserved for future use */
        uint8_t reserved1 : 4; /*!< Reserved for future use */
        isis_aocs__igrf_changed_t igrf : 1; /*!< Apply a change of the AOCS_EPH_IGRF_MAX_AGE flight parameter */
        isis_aocs__sgp4_changed_t sgp4 : 1; /*!< Apply a change of TLE */
        isis_aocs__pos_vel_changed_t pos_vel : 1; /*!< Apply a change of the AOCS_EPH_POS_VEL_SOURCE or AOCS_EPH_GNSS_MAX_AGE flight parameter. Discards the last GNSS sample causing fallback to SGP4 until another GNSS sample is received */
        isis_aocs__det_measurements_changed_t det_measurements : 1; /*!< Apply a change of the AOCS_SUN_SENSOR_SELECTION flight parameter */
        isis_aocs__res_dipole_changed_t res_dipole : 1; /*!< Apply a change of the AOCS_DET_RESIDUAL_DIPOLE flight parameter */
        isis_aocs__det_thrust_changed_t det_thrust : 1; /*!< Apply a change of any of the AOCS_DET_THRUST_* flight parameters */
        isis_aocs__rate_est_changed_t rate_est : 1; /*!< Resets and re-initializes the rate-estimator */
        isis_aocs__state_est_changed_t state_est : 1; /*!< Resets and re-initializes the full-state estimator */
        isis_aocs__targeting_changed_t targeting : 1; /*!< Frame targeting changed */
        isis_aocs__detumbling_changed_t detumbling : 1; /*!< Resets and re-initializes the detumbling controller */
        isis_aocs__thomson_changed_t thomson : 1; /*!< Resets and re-initializes the Thomson controller */
        isis_aocs__mag_ctrl_changed_t mag_ctrl : 1; /*!< Resets and re-initializes the magnetic controller */
        isis_aocs__three_axis_ctrl_changed_t three_axis_ctrl : 1; /*!< Resets and re-initializes the three-axis controller */
        isis_aocs__desaturation_changed_t desaturation : 1; /*!< Resets and re-initializes the desaturation controller */
        isis_aocs__mtq_changed_t mtq : 1; /*!< Apply a change of any of the AOCS_MTQ_* flight parameters */
        isis_aocs__rwa_changed_t rwa : 1; /*!< Apply a change of any of the AOCS_RW_* flight parameters */
    } fields;
} isis_aocs__apply_aocs_config__to_t;

/*!
 * Union for storing the parameters sent by auriga_copy_param.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_copy_param__to_t
{
    unsigned char raw[14];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__auriga_copy_param_type_t type; /*!< Which parameter: 1 = OH1, 2 = OH2, 3 = CUSTOMER_OH1, 4 = CUSTOMER_OH2, 5 = CUSTOMER */
        char filename[13]; /*!< Filename on the STR OBC */
    } fields;
} isis_aocs__auriga_copy_param__to_t;

/*!
 * Union for storing the parameters sent by auriga_download_file.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_download_file__to_t
{
    unsigned char raw[26];
    struct __attribute__ ((__packed__))
    {
        char str_filename[13]; /*!< Filename for file on the STR OBC */
        char aocs_filename[13]; /*!< Filename for file in the /down directory on the AOCS OBC */
    } fields;
} isis_aocs__auriga_download_file__to_t;

/*!
 * Union for storing the parameters received by auriga_get_fw_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_get_fw_status__from_t
{
    unsigned char raw[62];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__auriga_boot_info_t boot_info; /*!< Boot info */
        isis_aocs__auriga_version_t version; /*!< Version info */
    } fields;
} isis_aocs__auriga_get_fw_status__from_t;

/*!
 * Union for storing the parameters sent by auriga_photo.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_photo__to_t
{
    unsigned char raw[45];
    struct __attribute__ ((__packed__))
    {
        char filename[33]; /*!< Name of the file on the STR OBC */
        uint16_t Ti; /*!< Integration time */
        uint16_t XRAps; /*!< Index of first column of acquisition window */
        uint16_t YRAps; /*!< Index of first lines of acquisition window */
        uint16_t DimXRAps; /*!< Number of columns of acquisition window */
        uint16_t DimYRAps; /*!< Number of lines of acquisition window */
        uint16_t OHNumber; /*!< Optical Head number */
    } fields;
} isis_aocs__auriga_photo__to_t;

/*!
 * Union for storing the parameters sent by auriga_set_fw.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_set_fw__to_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        uint8_t slot; /*!< Slot to boot on next initialization */
        isis_aocs__boolean8bit_t permanent; /*!< Whether to set the boot slot permanently */
        uint8_t oneshot_counter; /*!< Number of one-shots */
    } fields;
} isis_aocs__auriga_set_fw__to_t;

/*!
 * Union for storing the parameters sent by auriga_start_logging.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_start_logging__to_t
{
    unsigned char raw[36];
    struct __attribute__ ((__packed__))
    {
        char filename[33]; /*!< Name of the file on the AOCS OBC */
        uint16_t time; /*!< Duration of the logging (seconds) */
        isis_aocs__auriga_log_status_t status_tlm : 1; /*!< Log status TLM */
        isis_aocs__auriga_log_aam_t aam_tlm : 1; /*!< Log AAM TLM */
        isis_aocs__auriga_log_atm_t atm_tlm : 1; /*!< Log ATM TLM */
        isis_aocs__auriga_log_arm_t arm_tlm : 1; /*!< Log ARM TLM */
        isis_aocs__auriga_log_diag_t diagnostic_tlm : 1; /*!< Log diagnostics TLM */
    } fields;
} isis_aocs__auriga_start_logging__to_t;

/*!
 * Union for storing the parameters sent by auriga_update_fw.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_update_fw__to_t
{
    unsigned char raw[14];
    struct __attribute__ ((__packed__))
    {
        uint8_t slot; /*!< Slot to write */
        char filename[13]; /*!< Filename for firmware on the STR OBC */
    } fields;
} isis_aocs__auriga_update_fw__to_t;

/*!
 * Union for storing the parameters sent by auriga_upload_file.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_upload_file__to_t
{
    unsigned char raw[26];
    struct __attribute__ ((__packed__))
    {
        char aocs_filename[13]; /*!< Filename for firmware on the AOCS OBC */
        char str_filename[13]; /*!< Filename for firmware on the STR OBC */
    } fields;
} isis_aocs__auriga_upload_file__to_t;

/*!
 * Union for storing the parameters sent by auriga_upload_firmware.
 */
typedef union __attribute__((__packed__)) _isis_aocs__auriga_upload_firmware__to_t
{
    unsigned char raw[13];
    struct __attribute__ ((__packed__))
    {
        char aocs_filename[13]; /*!< Filename for firmware on the AOCS OBC */
    } fields;
} isis_aocs__auriga_upload_firmware__to_t;

/*!
 * Union for storing the parameters received by check_params.
 */
typedef union __attribute__((__packed__)) _isis_aocs__check_params__from_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint32_t pending; /*!< Number of parameters pending */
    } fields;
} isis_aocs__check_params__from_t;

/*!
 * Union for storing the parameters received by check_threaded.
 */
typedef union __attribute__((__packed__)) _isis_aocs__check_threaded__from_t
{
    unsigned char raw[7];
    struct __attribute__ ((__packed__))
    {
        int16_t error_code; /*!< Result code */
        isis_aocs__boolean8bit_t finished; /*!< Command execution finished */
        uint16_t execution_time; /*!< How long the command has been running for or executed for */
        isis_aocs__threaded_cmd_id_t command_id; /*!< Command ID */
        uint8_t reserved; /*!< Reserved for future use */
    } fields;
} isis_aocs__check_threaded__from_t;

/*!
 * Union for storing the parameters sent by copy_operational_mode_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__copy_operational_mode_config__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__operating_mode_t source; /*!< Source operating mode */
        uint8_t destination; /*!< Destination operating mode */
    } fields;
} isis_aocs__copy_operational_mode_config__to_t;

/*!
 * Union for storing the parameters sent by cubewheel_set_i2c_address.
 */
typedef union __attribute__((__packed__)) _isis_aocs__cubewheel_set_i2c_address__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        uint8_t current_address; /*!< Current 7-bit I2C address (default: 0x68) */
        uint8_t new_address; /*!< New 7-bit I2C address */
    } fields;
} isis_aocs__cubewheel_set_i2c_address__to_t;

/*!
 * Union for storing the parameters sent by dbg_dump_internal_telemetry.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_dump_internal_telemetry__to_t
{
    unsigned char raw[42];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_type_t type; /*!< Telemetry type to dump */
        int32_t entry_start; /*!< Start entry; 0 for the last element; negative values to go backwards relative to the most recent */
        uint16_t count; /*!< Number of entries to dump */
        uint16_t skip; /*!< Number of entries to skip */
        char filename[33]; /*!< Filename of the dump */
    } fields;
} isis_aocs__dbg_dump_internal_telemetry__to_t;

/*!
 * Union for storing the parameters received by dbg_get_stack_info.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_get_stack_info__from_t
{
    unsigned char raw[274];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__stack_info_t tasks[16]; /*!< Task stack info */
    } fields;
} isis_aocs__dbg_get_stack_info__from_t;

/*!
 * Union for storing the parameters received by dbg_gnss_nvalid_get.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_gnss_nvalid_get__from_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__gpio_state_t state; /*!< Pin state */
    } fields;
} isis_aocs__dbg_gnss_nvalid_get__from_t;

/*!
 * Union for storing the parameters received by dbg_gnss_pps_get.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_gnss_pps_get__from_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__gpio_state_t state; /*!< Pin state */
    } fields;
} isis_aocs__dbg_gnss_pps_get__from_t;

/*!
 * Structure the parameters sent by dbg_gnss_uart_write_read.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__dbg_gnss_uart_write_read__to_t
{
    uint8_t bus; /*!< UART Bus */
    uint8_t write_size; /*!< Number of bytes to write */
    uint8_t read_size; /*!< Number of bytes to read */
    uint16_t read_timeout; /*!< Time to wait for a read response \note conversion: eng. value = 0.001 * raw */
    uint8_t* write_data; /*!< Write data (maximum length: 256 elements) */
} isis_aocs__dbg_gnss_uart_write_read__to_t;

/*!
 * Union for storing the parameters received by dbg_i2c_get_read_data.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_i2c_get_read_data__from_t
{
    unsigned char raw[259];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        int8_t response; /*!< Response code */
        uint8_t data[256]; /*!< Data read */
    } fields;
} isis_aocs__dbg_i2c_get_read_data__from_t;

/*!
 * Structure the parameters sent by dbg_i2c_write_read.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__dbg_i2c_write_read__to_t
{
    uint8_t address; /*!< Slave address (7-bit) */
    uint8_t write_size; /*!< Number of bytes to write */
    uint8_t read_size; /*!< Number of bytes to read */
    uint16_t write_read_delay; /*!< Time between the write and read transaction \note conversion: eng. value = 0.001 * raw */
    uint8_t* write_data; /*!< Write data (maximum length: 256 elements) */
} isis_aocs__dbg_i2c_write_read__to_t;

/*!
 * Union for storing the parameters sent by dbg_i2c_write_read_test_device.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_i2c_write_read_test_device__to_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        uint16_t write_read_delay; /*!< Time between the write and read transaction \note conversion: eng. value = 0.001 * raw */
        uint8_t write_data; /*!< Write data */
    } fields;
} isis_aocs__dbg_i2c_write_read_test_device__to_t;

/*!
 * Structure the parameters sent by dbg_mtm_ext_spi_write_read.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__dbg_mtm_ext_spi_write_read__to_t
{
    uint8_t bus; /*!< SPI bus */
    isis_aocs__gpio_port_t ncs_port; /*!< SPI nCS port */
    uint8_t ncs_pin; /*!< SPI nCS pin */
    uint8_t mode; /*!< SPI mode */
    uint32_t frequency; /*!< Clock frequency */
    uint8_t transfer_size; /*!< Transfer size */
    uint8_t* write_data; /*!< Write data (maximum length: 256 elements) */
} isis_aocs__dbg_mtm_ext_spi_write_read__to_t;

/*!
 * Union for storing the parameters sent by dbg_pio_configure.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_pio_configure__to_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__gpio_port_t port; /*!< GPIO port */
        uint8_t pin; /*!< GPIO pin */
        isis_aocs__gpio_function_t function; /*!< Function to configure */
        isis_aocs__gpio_pull_t pull; /*!< Pull to configure */
    } fields;
} isis_aocs__dbg_pio_configure__to_t;

/*!
 * Union for storing the parameters sent by dbg_pio_get.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_pio_get__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__gpio_port_t port; /*!< GPIO port */
        uint8_t pin; /*!< GPIO pin */
    } fields;
} isis_aocs__dbg_pio_get__to_t;

/*!
 * Union for storing the parameters received by dbg_pio_get.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_pio_get__from_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__gpio_state_t state; /*!< Pin state */
    } fields;
} isis_aocs__dbg_pio_get__from_t;

/*!
 * Union for storing the parameters sent by dbg_pio_set.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_pio_set__to_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__gpio_port_t port; /*!< GPIO port */
        uint8_t pin; /*!< GPIO pin */
        isis_aocs__gpio_state_t state; /*!< State to set */
    } fields;
} isis_aocs__dbg_pio_set__to_t;

/*!
 * Union for storing the parameters received by dbg_rs485_get_read_data.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_rs485_get_read_data__from_t
{
    unsigned char raw[259];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint8_t bytes_read; /*!< Number of bytes read */
        uint8_t data[256]; /*!< Data read */
    } fields;
} isis_aocs__dbg_rs485_get_read_data__from_t;

/*!
 * Structure the parameters sent by dbg_rs485_write_read.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__dbg_rs485_write_read__to_t
{
    uint8_t write_size; /*!< Number of bytes to write */
    uint8_t read_size; /*!< Number of bytes to read */
    uint32_t baudrate; /*!< UART baudrate */
    uint16_t timeout; /*!< Timeout between the write and read transaction \note conversion: eng. value = 0.001 * raw */
    uint8_t* write_data; /*!< Write data (maximum length: 256 elements) */
} isis_aocs__dbg_rs485_write_read__to_t;

/*!
 * Union for storing the parameters received by dbg_spi_get_read_data.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_spi_get_read_data__from_t
{
    unsigned char raw[258];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint8_t data[256]; /*!< Data read */
    } fields;
} isis_aocs__dbg_spi_get_read_data__from_t;

/*!
 * Structure the parameters sent by dbg_spi_write_read.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__dbg_spi_write_read__to_t
{
    uint8_t bus; /*!< SPI bus */
    isis_aocs__gpio_port_t ncs_port; /*!< SPI nCS port */
    uint8_t ncs_pin; /*!< SPI nCS pin */
    uint8_t mode; /*!< SPI mode */
    uint32_t frequency; /*!< Clock frequency */
    uint8_t transfer_size; /*!< Transfer size */
    uint8_t* write_data; /*!< Write data (maximum length: 256 elements) */
} isis_aocs__dbg_spi_write_read__to_t;

/*!
 * Union for storing the parameters received by dbg_uart_get_read_data.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dbg_uart_get_read_data__from_t
{
    unsigned char raw[259];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint8_t bytes_read; /*!< Number of bytes read */
        uint8_t data[256]; /*!< Data read */
    } fields;
} isis_aocs__dbg_uart_get_read_data__from_t;

/*!
 * Structure the parameters sent by dbg_uart_write_read.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__dbg_uart_write_read__to_t
{
    uint8_t bus; /*!< UART Bus */
    uint8_t write_size; /*!< Number of bytes to write */
    uint8_t read_size; /*!< Number of bytes to read */
    uint16_t read_timeout; /*!< Time to wait for a read response \note conversion: eng. value = 0.001 * raw */
    uint8_t* write_data; /*!< Write data (maximum length: 256 elements) */
} isis_aocs__dbg_uart_write_read__to_t;

/*!
 * Union for storing the parameters received by down_file_info.
 */
typedef union __attribute__((__packed__)) _isis_aocs__down_file_info__from_t
{
    unsigned char raw[42];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__file_generic_response_t response; /*!< Generic file response */
        char filename[33]; /*!< Filename of the current file */
        uint32_t crc32; /*!< CRC32 of the entire file */
        uint32_t size; /*!< Size of the entire file */
    } fields;
} isis_aocs__down_file_info__from_t;

/*!
 * Union for storing the parameters received by down_large_chunk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__down_large_chunk__from_t
{
    unsigned char raw[2053];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__file_generic_response_t response; /*!< Generic file response */
        uint16_t crc16; /*!< CRC16 of this data block */
        uint16_t size; /*!< Size of this data block */
        uint8_t data[2048]; /*!< Data block */
    } fields;
} isis_aocs__down_large_chunk__from_t;

/*!
 * Union for storing the parameters sent by down_prepare.
 */
typedef union __attribute__((__packed__)) _isis_aocs__down_prepare__to_t
{
    unsigned char raw[33];
    struct __attribute__ ((__packed__))
    {
        char filename[33]; /*!< Source filename */
    } fields;
} isis_aocs__down_prepare__to_t;

/*!
 * Union for storing the parameters received by down_small_chunk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__down_small_chunk__from_t
{
    unsigned char raw[133];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__file_generic_response_t response; /*!< Generic file response */
        uint16_t crc16; /*!< CRC16 of this data block */
        uint16_t size; /*!< Size of this data block */
        uint8_t data[128]; /*!< Data block */
    } fields;
} isis_aocs__down_small_chunk__from_t;

/*!
 * Union for storing the parameters sent by dump_params.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dump_params__to_t
{
    unsigned char raw[34];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__boolean_t to_log : 1; /*!< Dump to the debug output */
        isis_aocs__param_source_t source : 1; /*!< Parameter source */
        char filename[33]; /*!< File where to dump the DB; can be left empty */
    } fields;
} isis_aocs__dump_params__to_t;

/*!
 * Union for storing the parameters sent by dump_telemetry.
 */
typedef union __attribute__((__packed__)) _isis_aocs__dump_telemetry__to_t
{
    unsigned char raw[43];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__cmd_id_t command_id; /*!< Telemetry command ID to dump */
        uint8_t type; /*!< Type (if required by command) */
        isis_aocs__tlm_entry_last_pps_sample_t entry; /*!< Telemetry entry */
        uint16_t count; /*!< Number of entries to dump */
        uint16_t skip; /*!< Number of entries to skip */
        char filename[33]; /*!< Filename of the dump */
    } fields;
} isis_aocs__dump_telemetry__to_t;

/*!
 * Union for storing the parameters sent by enp_ramp_register.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_ramp_register__to_t
{
    unsigned char raw[15];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Thruster password */
        uint8_t start_addr; /*!<  */
        uint8_t length; /*!< Size of the register in bytes; only 1 or 2 are supported */
        uint16_t start_value; /*!<  */
        uint16_t end_value; /*!<  */
        uint8_t duration; /*!< Time in seconds over which the value is ramped */
    } fields;
} isis_aocs__enp_ramp_register__to_t;

/*!
 * Union for storing the parameters sent by enp_script_abort.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_script_abort__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Thruster password */
    } fields;
} isis_aocs__enp_script_abort__to_t;

/*!
 * Union for storing the parameters received by enp_script_get_info.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_script_get_info__from_t
{
    unsigned char raw[40];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__thruster_script_info_t script_info; /*!< Script information */
    } fields;
} isis_aocs__enp_script_get_info__from_t;

/*!
 * Union for storing the parameters sent by enp_script_load.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_script_load__to_t
{
    unsigned char raw[33];
    struct __attribute__ ((__packed__))
    {
        char fname[33]; /*!< Path to the script file */
    } fields;
} isis_aocs__enp_script_load__to_t;

/*!
 * Union for storing the parameters sent by enp_script_start.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_script_start__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Thruster password */
    } fields;
} isis_aocs__enp_script_start__to_t;

/*!
 * Structure the parameters sent by enp_script_uplink.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__enp_script_uplink__to_t
{
    uint8_t length; /*!< Number of bytes in data */
    uint8_t* data; /*!< Byte array with the contents of the script binary file (maximum length: 250 elements) */
} isis_aocs__enp_script_uplink__to_t;

/*!
 * Union for storing the parameters sent by enp_start_firing.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_start_firing__to_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
        float thrust; /*!< Thrust level in [N] */
        uint32_t duration; /*!< Duration in [s] */
    } fields;
} isis_aocs__enp_start_firing__to_t;

/*!
 * Union for storing the parameters sent by enp_stop_firing.
 */
typedef union __attribute__((__packed__)) _isis_aocs__enp_stop_firing__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
    } fields;
} isis_aocs__enp_stop_firing__to_t;

/*!
 * Structure the parameters sent by enp_write_register.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__enp_write_register__to_t
{
    uint8_t password[8]; /*!< Thruster password */
    uint8_t start_addr; /*!<  */
    uint8_t length; /*!<  */
    uint8_t* write_data; /*!<  (maximum length: 110 elements) */
} isis_aocs__enp_write_register__to_t;

/*!
 * Union for storing the parameters received by fw_get_slot_metadata.
 */
typedef union __attribute__((__packed__)) _isis_aocs__fw_get_slot_metadata__from_t
{
    unsigned char raw[14];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint32_t slot1_size; /*!< Size of image in slot 1 */
        uint16_t slot1_crc16; /*!< CRC of image in slot 1 */
        uint32_t slot2_size; /*!< Size of image in slot 2 */
        uint16_t slot2_crc16; /*!< CRC of image in slot 2 */
    } fields;
} isis_aocs__fw_get_slot_metadata__from_t;

/*!
 * Union for storing the parameters sent by fw_set_one_shot.
 */
typedef union __attribute__((__packed__)) _isis_aocs__fw_set_one_shot__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        uint8_t slot; /*!< Slot to use */
        uint8_t counter; /*!< Number of times to boot */
    } fields;
} isis_aocs__fw_set_one_shot__to_t;

/*!
 * Union for storing the parameters sent by fw_set_slot_metadata.
 */
typedef union __attribute__((__packed__)) _isis_aocs__fw_set_slot_metadata__to_t
{
    unsigned char raw[7];
    struct __attribute__ ((__packed__))
    {
        uint8_t slot; /*!< Slot to configure */
        uint32_t size; /*!< Size of the image in the slot */
        uint16_t crc16; /*!< CRC of the image in the slot */
    } fields;
} isis_aocs__fw_set_slot_metadata__to_t;

/*!
 * Union for storing the parameters sent by fw_write_slot.
 */
typedef union __attribute__((__packed__)) _isis_aocs__fw_write_slot__to_t
{
    unsigned char raw[35];
    struct __attribute__ ((__packed__))
    {
        uint8_t slot; /*!< Slot to write */
        char filename[33]; /*!< Filename for firmware */
        isis_aocs__boolean8bit_t set_metadata; /*!< metadata is automatically calculated and set from file */
    } fields;
} isis_aocs__fw_write_slot__to_t;

/*!
 * Union for storing the parameters received by get_boot_info.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_boot_info__from_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint8_t one_shot_slot; /*!< Slot for one shot */
        uint8_t one_shot_counter; /*!< Counter for one shot */
        uint8_t permanent_slot; /*!< Slot for permanent */
    } fields;
} isis_aocs__get_boot_info__from_t;

/*!
 * Union for storing the parameters received by get_boot_log.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_boot_log__from_t
{
    unsigned char raw[83];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint8_t num_entries; /*!< Number of valid entries in array */
        uint8_t boot_log_entries[80]; /*!< 8 boot log entries */
    } fields;
} isis_aocs__get_boot_log__from_t;

/*!
 * Union for storing the parameters received by get_control_target.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_control_target__from_t
{
    unsigned char raw[48];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__control_target_generic_t target; /*!< Control target */
    } fields;
} isis_aocs__get_control_target__from_t;

/*!
 * Union for storing the parameters received by get_control_target_lvlh.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_control_target_lvlh__from_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__control_target_lvlh_t target; /*!< Control target */
    } fields;
} isis_aocs__get_control_target_lvlh__from_t;

/*!
 * Union for storing the parameters received by get_control_target_quat.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_control_target_quat__from_t
{
    unsigned char raw[20];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__control_target_quat_t target; /*!< Control target */
    } fields;
} isis_aocs__get_control_target_quat__from_t;

/*!
 * Union for storing the parameters received by get_control_target_spin.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_control_target_spin__from_t
{
    unsigned char raw[36];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__control_target_spin_t target; /*!< Control target */
    } fields;
} isis_aocs__get_control_target_spin__from_t;

/*!
 * Union for storing the parameters received by get_current_general_telemetry.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_current_general_telemetry__from_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        uint32_t boot_counter; /*!< Boot counter */
        uint8_t boot_slot : 4; /*!< 0, 1 or 2 */
        isis_aocs__boot_stage_t boot_stage : 4; /*!< Bootloader boot type */
        isis_aocs__boot_reason_t boot_reason : 4; /*!< Boot reason */
        uint8_t unexpected_reboot : 1; /*!< Last reboot was not expected */
        uint8_t boot_in_progress : 1; /*!< AOCS is booting, all other telemetry incorrect */
        uint8_t padding : 2; /*!<  */
        isis_aocs__mcu_reset_cause_t mcu_reset_cause; /*!<  */
        char last_trace_event[9]; /*!< Cropped string of last trace event */
        uint8_t info_events; /*!< Number of INFO events since boot (capped at 255) */
        uint8_t warn_events; /*!< Number of WARNING events since boot (capped at 255) */
        uint8_t error_events; /*!< Number of ERROR events since boot (capped at 255) */
        isis_aocs__tlm_status_t tlm_status; /*!< Telemetry logging status */
        uint16_t params_pending; /*!< Number of parameters pending in set queue */
        isis_aocs__generic_error_code_t threaded_error_code; /*!< Threaded command result code */
        isis_aocs__boolean8bit_t threaded_finished; /*!< Threaded command execution finished */
        uint16_t threaded_execution_time; /*!< How long the threaded command has been running for or executed for */
        isis_aocs__cmd_id_t threaded_command_id; /*!< Last threaded command ID */
        uint32_t free_ram; /*!< Number of bytes free in the heap \note conversion: eng. value [in MB] = 0.00000095367431640625 * raw */
        uint32_t mass_storage_free_space; /*!< Number of MB free on the mass storage device */
        isis_aocs__fs_status_t filesystem_status : 7; /*!< Error code returned while checking free space */
        uint8_t mass_storage_device : 1; /*!< ID of the mass storage device */
        uint64_t uptime; /*!< Seconds since boot this telemetry sample was taken \note conversion: eng. value [in s] = 0.000001 * raw */
        uint64_t sample_time; /*!< Unix time when the housekeeping sample was collected */
    } fields;
} isis_aocs__get_current_general_telemetry__from_t;

/*!
 * Union for storing the parameters received by get_fault_log.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_fault_log__from_t
{
    unsigned char raw[154];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__fault_list_entry_t entry[8]; /*!< List of fault log entries */
    } fields;
} isis_aocs__get_fault_log__from_t;

/*!
 * Union for storing the parameters received by get_general_telemetry.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_general_telemetry__from_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        uint32_t boot_counter; /*!< Boot counter */
        uint8_t boot_slot : 4; /*!< 0, 1 or 2 */
        isis_aocs__boot_stage_t boot_stage : 4; /*!< Bootloader boot type */
        isis_aocs__boot_reason_t boot_reason : 4; /*!< Boot reason */
        uint8_t unexpected_reboot : 1; /*!< Last reboot was not expected */
        uint8_t boot_in_progress : 1; /*!< AOCS is booting, all other telemetry incorrect */
        uint8_t padding : 2; /*!<  */
        isis_aocs__mcu_reset_cause_t mcu_reset_cause; /*!<  */
        char last_trace_event[9]; /*!< Cropped string of last trace event */
        uint8_t info_events; /*!< Number of INFO events since boot (capped at 255) */
        uint8_t warn_events; /*!< Number of WARNING events since boot (capped at 255) */
        uint8_t error_events; /*!< Number of ERROR events since boot (capped at 255) */
        isis_aocs__tlm_status_t tlm_status; /*!< Telemetry logging status */
        uint16_t params_pending; /*!< Number of parameters pending in set queue */
        isis_aocs__generic_error_code_t threaded_error_code; /*!< Threaded command result code */
        isis_aocs__boolean8bit_t threaded_finished; /*!< Threaded command execution finished */
        uint16_t threaded_execution_time; /*!< How long the threaded command has been running for or executed for */
        isis_aocs__cmd_id_t threaded_command_id; /*!< Last threaded command ID */
        uint32_t free_ram; /*!< Number of bytes free in the heap \note conversion: eng. value [in MB] = 0.00000095367431640625 * raw */
        uint32_t mass_storage_free_space; /*!< Number of MB free on the mass storage device */
        isis_aocs__fs_status_t filesystem_status : 7; /*!< Error code returned while checking free space */
        uint8_t mass_storage_device : 1; /*!< ID of the mass storage device */
        uint64_t uptime; /*!< Seconds since boot this telemetry sample was taken \note conversion: eng. value [in s] = 0.000001 * raw */
        uint64_t sample_time; /*!< Unix time when the housekeeping sample was collected */
    } fields;
} isis_aocs__get_general_telemetry__from_t;

/*!
 * Union for storing the parameters received by get_operating_mode.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_operating_mode__from_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__operating_mode_t mode; /*!< Operating mode */
        uint16_t reserved; /*!< Reserved for future use */
    } fields;
} isis_aocs__get_operating_mode__from_t;

/*!
 * Union for storing the parameters sent by get_param.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param__to_t;

/*!
 * Union for storing the parameters received by get_param.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param__from_t
{
    unsigned char raw[243];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        uint8_t data[240]; /*!< Parameter value */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__get_param__from_t;

/*!
 * Union for storing the parameters sent by get_param_1f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_1f__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_1f__to_t;

/*!
 * Union for storing the parameters received by get_param_1f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_1f__from_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        float data; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_1f__from_t;

/*!
 * Union for storing the parameters sent by get_param_2f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_2f__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_2f__to_t;

/*!
 * Union for storing the parameters received by get_param_2f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_2f__from_t
{
    unsigned char raw[10];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        float data[2]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_2f__from_t;

/*!
 * Union for storing the parameters sent by get_param_3f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_3f__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_3f__to_t;

/*!
 * Union for storing the parameters received by get_param_3f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_3f__from_t
{
    unsigned char raw[14];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        float data[3]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_3f__from_t;

/*!
 * Union for storing the parameters sent by get_param_4f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_4f__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_4f__to_t;

/*!
 * Union for storing the parameters received by get_param_4f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_4f__from_t
{
    unsigned char raw[18];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        float data[4]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_4f__from_t;

/*!
 * Union for storing the parameters sent by get_param_ascii.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_ascii__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_ascii__to_t;

/*!
 * Union for storing the parameters received by get_param_ascii.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_ascii__from_t
{
    unsigned char raw[243];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t error_code; /*!< Result code */
        char data[240]; /*!< Parameter value */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__get_param_ascii__from_t;

/*!
 * Union for storing the parameters received by get_param_auriga.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_auriga__from_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__auriga_config_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_auriga__from_t;

/*!
 * Union for storing the parameters sent by get_param_bias_estimator.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_bias_estimator__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_bias_est_options_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_bias_estimator__to_t;

/*!
 * Union for storing the parameters received by get_param_bias_estimator.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_bias_estimator__from_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        isis_aocs__sensor_mtm_int_t mtm_int : 1; /*!< Enable MTM_INT as reference */
        isis_aocs__sensor_mtm_ext_t mtm_ext : 1; /*!< Enable MTM_EXT as reference */
        isis_aocs__sensor_pda_t pda : 1; /*!< Enable PDA as reference */
        isis_aocs__sensor_scg_raw_t scg_raw : 1; /*!< Enable SCG_RAW as reference */
        isis_aocs__sensor_scg_filt_t scg_filt : 1; /*!< Enable SCG_FILT as reference */
        isis_aocs__sensor_fss_1_t fss_1 : 1; /*!< Enable FSS_1 as reference */
        isis_aocs__sensor_fss_2_t fss_2 : 1; /*!< Enable FSS_2 as reference */
        isis_aocs__sensor_fss_3_t fss_3 : 1; /*!< Enable FSS_3 as reference */
        isis_aocs__sensor_fss_4_t fss_4 : 1; /*!< Enable FSS_4 as reference */
        isis_aocs__sensor_gnss_t gnss : 1; /*!< Enable GNSS as reference */
        isis_aocs__sensor_str_1_t str_1 : 1; /*!< Enable STR_1 as reference */
        isis_aocs__sensor_str_2_t str_2 : 1; /*!< Enable STR_2 as reference */
        uint8_t reserved_1 : 4; /*!< Reserved for future use */
        uint8_t reserved_2 : 4; /*!< Reserved for future use */
        isis_aocs__source_full_state_estimator_t full_state_estimator : 1; /*!< Enable full-state estimator as reference */
        isis_aocs__source_raw_rate_estimator_t raw_rate_estimator : 1; /*!< Enable raw-rate estimator as reference */
        uint8_t reserved_3 : 2; /*!< Reserved for future use */
        isis_aocs__boolean_t enabled : 1; /*!< Whether the bias estimator is enabled */
        isis_aocs__boolean_t use_quaternion_derivative : 1; /*!< Whether the bias estimator uses the derivative of the quaternion as angular rate reference */
        isis_aocs__boolean_t weighted_average : 1; /*!< Whether the bias estimator scales each of the selected sources by the reciprocal of their noise (estimate) */
        isis_aocs__boolean_t scale_filter_coefficient : 1; /*!< Whether the bias estimator scales the filter coefficient by the mean of the reciprocals of the noises of the selected sources */
        uint8_t reserved_4 : 4; /*!< Reserved for future use */
    } fields;
} isis_aocs__get_param_bias_estimator__from_t;

/*!
 * Union for storing the parameters received by get_param_cubewheel.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_cubewheel__from_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint8_t backup_mode[4]; /*!< Wheel backup mode */
    } fields;
} isis_aocs__get_param_cubewheel__from_t;

/*!
 * Union for storing the parameters sent by get_param_f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_f__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_f__to_t;

/*!
 * Union for storing the parameters received by get_param_f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_f__from_t
{
    unsigned char raw[243];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t error_code; /*!< Result code */
        float data[60]; /*!< Parameter value */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__get_param_f__from_t;

/*!
 * Union for storing the parameters sent by get_param_generic.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_generic__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        uint32_t index; /*!< Parameter index */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_generic__to_t;

/*!
 * Union for storing the parameters received by get_param_generic.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_generic__from_t
{
    unsigned char raw[243];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t error_code; /*!< Result code */
        uint8_t data[240]; /*!< Parameter value */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__get_param_generic__from_t;

/*!
 * Union for storing the parameters received by get_param_gnss_log_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_gnss_log_config__from_t
{
    unsigned char raw[86];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__novatel_log_config_item_t log[12]; /*!< Data read */
    } fields;
} isis_aocs__get_param_gnss_log_config__from_t;

/*!
 * Union for storing the parameters sent by get_param_hex32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_hex32__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_hex32__to_t;

/*!
 * Union for storing the parameters received by get_param_hex32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_hex32__from_t
{
    unsigned char raw[243];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t error_code; /*!< Result code */
        uint32_t data[60]; /*!< Parameter value */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__get_param_hex32__from_t;

/*!
 * Union for storing the parameters received by get_param_imtq.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_imtq__from_t
{
    unsigned char raw[191];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__imtq_config_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_imtq__from_t;

/*!
 * Union for storing the parameters sent by get_param_int32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_int32__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_int32__to_t;

/*!
 * Union for storing the parameters received by get_param_int32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_int32__from_t
{
    unsigned char raw[243];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t error_code; /*!< Result code */
        int32_t data[60]; /*!< Parameter value */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__get_param_int32__from_t;

/*!
 * Union for storing the parameters received by get_param_lensrnd.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_lensrnd__from_t
{
    unsigned char raw[50];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__lensrnd_config_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_lensrnd__from_t;

/*!
 * Union for storing the parameters sent by get_param_operating_mode_subsys_auto_power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_operating_mode_subsys_auto_power__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_operating_mode_switch_config_t index; /*!< Parameter index */
        isis_aocs__operating_mode_switch_config_subsys_power_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_operating_mode_subsys_auto_power__to_t;

/*!
 * Union for storing the parameters received by get_param_operating_mode_subsys_auto_power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_operating_mode_subsys_auto_power__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        isis_aocs__subsystem_bitfield_t data; /*!<  */
    } fields;
} isis_aocs__get_param_operating_mode_subsys_auto_power__from_t;

/*!
 * Union for storing the parameters sent by get_param_operating_mode_switch_delay.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_operating_mode_switch_delay__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_operating_mode_switch_config_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_operating_mode_switch_delay__to_t;

/*!
 * Union for storing the parameters received by get_param_operating_mode_switch_delay.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_operating_mode_switch_delay__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        uint16_t switch_delay; /*!< Delay before switching to this mode \note conversion: eng. value [in s] = 0.001 * raw */
    } fields;
} isis_aocs__get_param_operating_mode_switch_delay__from_t;

/*!
 * Union for storing the parameters sent by get_param_partial.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Size of the data to get from the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_partial__to_t;

/*!
 * Union for storing the parameters received by get_param_partial.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial__from_t
{
    unsigned char raw[162];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        uint8_t data[160]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_partial__from_t;

/*!
 * Union for storing the parameters sent by get_param_partial_f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_f__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_partial_f__to_t;

/*!
 * Union for storing the parameters received by get_param_partial_f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_f__from_t
{
    unsigned char raw[162];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        float data[40]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_partial_f__from_t;

/*!
 * Union for storing the parameters sent by get_param_partial_generic.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_generic__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint32_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_partial_generic__to_t;

/*!
 * Union for storing the parameters received by get_param_partial_generic.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_generic__from_t
{
    unsigned char raw[162];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        uint8_t data[160]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_partial_generic__from_t;

/*!
 * Union for storing the parameters sent by get_param_partial_hex32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_hex32__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_partial_hex32__to_t;

/*!
 * Union for storing the parameters received by get_param_partial_hex32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_hex32__from_t
{
    unsigned char raw[162];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        uint32_t data[40]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_partial_hex32__from_t;

/*!
 * Union for storing the parameters sent by get_param_partial_int32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_int32__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_partial_int32__to_t;

/*!
 * Union for storing the parameters received by get_param_partial_int32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_int32__from_t
{
    unsigned char raw[162];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        int32_t data[40]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_partial_int32__from_t;

/*!
 * Union for storing the parameters sent by get_param_partial_uint32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_uint32__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_partial_uint32__to_t;

/*!
 * Union for storing the parameters received by get_param_partial_uint32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_partial_uint32__from_t
{
    unsigned char raw[162];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        uint32_t data[40]; /*!< Parameter value */
    } fields;
} isis_aocs__get_param_partial_uint32__from_t;

/*!
 * Union for storing the parameters received by get_param_rw25.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_rw25__from_t
{
    unsigned char raw[31];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__af_rw25_config_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_rw25__from_t;

/*!
 * Union for storing the parameters received by get_param_scg.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_scg__from_t
{
    unsigned char raw[95];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__scg_config_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_scg__from_t;

/*!
 * Union for storing the parameters received by get_param_scg_temperature_coefficients.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_scg_temperature_coefficients__from_t
{
    unsigned char raw[218];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__scg_temperature_coefficients_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_scg_temperature_coefficients__from_t;

/*!
 * Union for storing the parameters sent by get_param_sensors.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_sensors__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_mode_sensors_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_sensors__to_t;

/*!
 * Union for storing the parameters received by get_param_sensors.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_sensors__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        isis_aocs__sensor_bitfield_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_sensors__from_t;

/*!
 * Union for storing the parameters sent by get_param_subsys_required.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_subsys_required__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_subsys_required_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_subsys_required__to_t;

/*!
 * Union for storing the parameters received by get_param_subsys_required.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_subsys_required__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        isis_aocs__subsystem_bitfield_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_subsys_required__from_t;

/*!
 * Union for storing the parameters received by get_param_thr.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_thr__from_t
{
    unsigned char raw[10];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__enp_config_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_thr__from_t;

/*!
 * Union for storing the parameters received by get_param_thr_fault.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_thr_fault__from_t
{
    unsigned char raw[26];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__enp_fault_config_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_thr_fault__from_t;

/*!
 * Union for storing the parameters received by get_param_thr_state.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_thr_state__from_t
{
    unsigned char raw[30];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__enp_state_config_t data; /*!< Data read */
    } fields;
} isis_aocs__get_param_thr_state__from_t;

/*!
 * Union for storing the parameters sent by get_param_tle.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_tle__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_tle_index_t index; /*!< Parameter index */
        uint16_t offset; /*!< Offset in the parameter to read from */
        uint8_t size; /*!< Size of the data to read */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_tle__to_t;

/*!
 * Union for storing the parameters received by get_param_tle.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_tle__from_t
{
    unsigned char raw[43];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        isis_aocs__tle_t tle; /*!< Data read */
    } fields;
} isis_aocs__get_param_tle__from_t;

/*!
 * Union for storing the parameters received by get_param_total_impulse.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_total_impulse__from_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        float data; /*!< Data read */
    } fields;
} isis_aocs__get_param_total_impulse__from_t;

/*!
 * Union for storing the parameters sent by get_param_uint32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_uint32__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Parameter index */
        isis_aocs__param_source_t source; /*!< Parameter source */
    } fields;
} isis_aocs__get_param_uint32__to_t;

/*!
 * Union for storing the parameters received by get_param_uint32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_param_uint32__from_t
{
    unsigned char raw[243];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t error_code; /*!< Result code */
        uint32_t data[60]; /*!< Parameter value */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__get_param_uint32__from_t;

/*!
 * Union for storing the parameters received by get_tc_stats.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_tc_stats__from_t
{
    unsigned char raw[15];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint32_t count; /*!< Number of commands since boots */
        uint8_t last_tc; /*!< Code of the last command */
        uint64_t last_tc_timestamp; /*!< Timestamp of the last command */
    } fields;
} isis_aocs__get_tc_stats__from_t;

/*!
 * Union for storing the parameters received by get_time.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_time__from_t
{
    unsigned char raw[11];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint64_t epoch; /*!< Time since the UNIX epoch */
        isis_aocs__time_source_t time_source; /*!< Time source */
    } fields;
} isis_aocs__get_time__from_t;

/*!
 * Union for storing the parameters sent by get_trace_event.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_trace_event__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        int32_t entry; /*!< Number of entries to go back; -1 for the entry in the general telemetry */
        isis_aocs__trace_level_t match_level; /*!< Only return traces matching this level */
    } fields;
} isis_aocs__get_trace_event__to_t;

/*!
 * Union for storing the parameters received by get_trace_event.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_trace_event__from_t
{
    unsigned char raw[141];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        char last_event[119]; /*!< NULL-terminated string */
        uint32_t debug; /*!< debug level events since boot */
        uint32_t info; /*!< Info level events since boot */
        uint32_t warning; /*!< warning level events since boot */
        uint32_t error; /*!< error level events since boot */
        uint32_t failed; /*!< failed logging events since boot */
    } fields;
} isis_aocs__get_trace_event__from_t;

/*!
 * Union for storing the parameters sent by get_trace_log.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_trace_log__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__trace_level_t match_level; /*!< Only return traces matching this level */
        uint32_t entry; /*!< Number of entries to go back, 0 to N */
    } fields;
} isis_aocs__get_trace_log__to_t;

/*!
 * Union for storing the parameters received by get_trace_log.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_trace_log__from_t
{
    unsigned char raw[194];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__trace_list_entry_t entry[8]; /*!< Trace content */
    } fields;
} isis_aocs__get_trace_log__from_t;

/*!
 * Union for storing the parameters received by get_version.
 */
typedef union __attribute__((__packed__)) _isis_aocs__get_version__from_t
{
    unsigned char raw[82];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        char version[40]; /*!< AOCS FSW version as NULL-terminated string */
        char aocs_version[20]; /*!< AOCS library as NULL-terminated string */
        uint8_t revision[8]; /*!< AOCS FSW version as binary blob */
        uint8_t obc_uid[12]; /*!< AOCS OBC UID if available */
    } fields;
} isis_aocs__get_version__from_t;

/*!
 * Union for storing the parameters sent by gnss_capture_spectrum.
 */
typedef union __attribute__((__packed__)) _isis_aocs__gnss_capture_spectrum__to_t
{
    unsigned char raw[11];
    struct __attribute__ ((__packed__))
    {
        uint16_t count; /*!< Number of samples to capture */
        isis_aocs__novatel_spectrum_mode_t mode; /*!< View mode */
        isis_aocs__novatel_spectrum_frequency_t frequency; /*!< Frequency band to view */
        uint32_t update_period; /*!< Update rate; must be large enough for the entire message to be receivable in a single update period */
        isis_aocs__novatel_spectrum_fft_size_t FFT_size; /*!< Frequency resolution of the spectrum */
        uint8_t time_avg; /*!< Time averaging window */
        uint8_t sub_carrier_avg; /*!< The sliding window average over a number of FFT samples */
    } fields;
} isis_aocs__gnss_capture_spectrum__to_t;

/*!
 * Union for storing the parameters sent by gnss_dump_log.
 */
typedef union __attribute__((__packed__)) _isis_aocs__gnss_dump_log__to_t
{
    unsigned char raw[33];
    struct __attribute__ ((__packed__))
    {
        char filename[33]; /*!< Filename of the dump */
    } fields;
} isis_aocs__gnss_dump_log__to_t;

/*!
 * Union for storing the parameters received by gnss_get_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__gnss_get_output__from_t
{
    unsigned char raw[230];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        uint64_t bestxyz_timestamp; /*!< Unix timestamp when the last bestxyz message was received */
        isis_aocs__novatel_bestxyz_msg_t bestxyz; /*!< Last bestxyz message */
        uint64_t time_timestamp; /*!< Unix timestamp when the last time message was received */
        isis_aocs__novatel_time_msg_t time; /*!< Last time message */
    } fields;
} isis_aocs__gnss_get_output__from_t;

/*!
 * Union for storing the parameters received by gnss_get_pps_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__gnss_get_pps_status__from_t
{
    unsigned char raw[20];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__pps_status_t status; /*!< Status of the PPS signal */
        uint64_t timestamp; /*!< Unix timestamp of the last PPS signal */
        uint64_t age; /*!< Age of the last PPS signal \note conversion: eng. value [in s] = 0.000001 * raw */
        isis_aocs__time_source_t time_source; /*!< Time source */
    } fields;
} isis_aocs__gnss_get_pps_status__from_t;

/*!
 * Union for storing the parameters sent by gnss_send_command.
 */
typedef union __attribute__((__packed__)) _isis_aocs__gnss_send_command__to_t
{
    unsigned char raw[79];
    struct __attribute__ ((__packed__))
    {
        char command[79]; /*!< Command; optionally null-terminated */
    } fields;
} isis_aocs__gnss_send_command__to_t;

/*!
 * Union for storing the parameters sent by hdrm_fire.
 */
typedef union __attribute__((__packed__)) _isis_aocs__hdrm_fire__to_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__hdrm_firing_channels_t channels; /*!< Channel to fire */
        uint8_t timeout; /*!< Timeout before stopping heating in seconds; 0 for default value from FPDB */
        isis_aocs__hdrm_force_t force; /*!< Force burning for the entire timeout; ignore confirmation switch signal */
    } fields;
} isis_aocs__hdrm_fire__to_t;

/*!
 * Union for storing the parameters received by hdrm_get_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__hdrm_get_status__from_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__hdrm_state_t state; /*!< Deployment confirmation switch state */
        isis_aocs__hdrm_stage_t stage; /*!< Deployment stage */
    } fields;
} isis_aocs__hdrm_get_status__from_t;

/*!
 * Structure the parameters sent by imtq_set_bypass.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__imtq_set_bypass__to_t
{
    isis_aocs__imtq_bypass_mode_t mode; /*!< IMTQ bypass mode */
    int16_t* params; /*!< Bypass parameters; see aliases for specification (maximum length: 4 elements) */
} isis_aocs__imtq_set_bypass__to_t;

/*!
 * Union for storing the parameters sent by imtq_set_bypass_brf.
 */
typedef union __attribute__((__packed__)) _isis_aocs__imtq_set_bypass_brf__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        int16_t dipole[3]; /*!< Dipole \note conversion: eng. value [in mAm^2] = 0.1 * raw */
        uint16_t duration; /*!< Dipole duration in per loop iteration \note conversion: eng. value [in s] = 0.001 * raw */
    } fields;
} isis_aocs__imtq_set_bypass_brf__to_t;

/*!
 * Union for storing the parameters sent by imtq_set_bypass_dipole.
 */
typedef union __attribute__((__packed__)) _isis_aocs__imtq_set_bypass_dipole__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        int16_t dipole[3]; /*!< Dipole \note conversion: eng. value [in mAm^2] = 0.1 * raw */
        uint16_t duration; /*!< Dipole duration in per loop iteration \note conversion: eng. value [in s] = 0.001 * raw */
    } fields;
} isis_aocs__imtq_set_bypass_dipole__to_t;

/*!
 * Union for storing the parameters sent by imtq_set_bypass_sine.
 */
typedef union __attribute__((__packed__)) _isis_aocs__imtq_set_bypass_sine__to_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        uint16_t axis; /*!< Axis index (0/1/2) */
        uint16_t amplitude; /*!< Amplitude of the sinusoid \note conversion: eng. value [in mAm^2] = 0.1 * raw */
        uint16_t period; /*!< Period of the sinusoid \note conversion: eng. value [in s] = 0.001 * raw */
    } fields;
} isis_aocs__imtq_set_bypass_sine__to_t;

/*!
 * Union for storing the parameters received by lensrnd_get_correction_table_info.
 */
typedef union __attribute__((__packed__)) _isis_aocs__lensrnd_get_correction_table_info__from_t
{
    unsigned char raw[6];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__boolean_t enabled0 : 1; /*!< Table enabled */
        isis_aocs__boolean_t enabled1 : 1; /*!< Table enabled */
        isis_aocs__boolean_t enabled2 : 1; /*!< Table enabled */
        isis_aocs__boolean_t enabled3 : 1; /*!< Table enabled */
        uint8_t padding : 4; /*!< Padding bits */
        isis_aocs__lensrnd_error_code_t valid0 : 4; /*!< Table validity */
        isis_aocs__lensrnd_error_code_t valid1 : 4; /*!< Table validity */
        isis_aocs__lensrnd_error_code_t valid2 : 4; /*!< Table validity */
        isis_aocs__lensrnd_error_code_t valid3 : 4; /*!< Table validity */
        isis_aocs__boolean_t loaded : 1; /*!< Whether the tables were loaded from FRAM */
        isis_aocs__lensrnd_error_code_t load_status : 7; /*!< Result of last load from FRAM */
    } fields;
} isis_aocs__lensrnd_get_correction_table_info__from_t;

/*!
 * Union for storing the parameters sent by lensrnd_load_file.
 */
typedef union __attribute__((__packed__)) _isis_aocs__lensrnd_load_file__to_t
{
    unsigned char raw[42];
    struct __attribute__ ((__packed__))
    {
        char fname[33]; /*!< Filename for file */
        uint8_t fss_index; /*!< FSS index */
        uint32_t serial_number; /*!< Serial number */
        uint32_t date; /*!< Date */
    } fields;
} isis_aocs__lensrnd_load_file__to_t;

/*!
 * Union for storing the parameters received by list_faults.
 */
typedef union __attribute__((__packed__)) _isis_aocs__list_faults__from_t
{
    unsigned char raw[34];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__get_param_response_t result; /*!< Result code */
        uint8_t padding_0 : 1; /*!<  */
        isis_aocs__fault_mode_t STATE_ESTIMATOR_DIVERGED : 1; /*!<  */
        isis_aocs__fault_mode_t RATE_ESTIMATOR_DIVERGED : 1; /*!<  */
        isis_aocs__fault_mode_t ANGULAR_RATE_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t TASK_SYNC_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t SUBSYSTEM_NOT_READY : 1; /*!<  */
        isis_aocs__fault_mode_t THR_CONTROL_ERROR_LIMIT_EXCEEDED : 1; /*!<  */
        uint8_t padding_1[3]; /*!<  */
        isis_aocs__fault_mode_t PROCESSING_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t INVALID_TLE : 1; /*!<  */
        isis_aocs__fault_mode_t INVALID_MODE : 1; /*!<  */
        isis_aocs__fault_mode_t TIME_CONFIG_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t SENSORHANDLING_CONFIG_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t EPHEMERIS_CONFIG_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t DETERMINATION_CONFIG_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t TARGETING_CONFIG_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t CONTROL_CONFIG_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t ACTUATORHANDLING_CONFIG_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t SENSORHANDLING_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t EPHEMERIS_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t DETERMINATION_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t TARGETING_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t CONTROL_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t ACTUATORHANDLING_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t SENSOR_POSTPROCESSING_ERROR : 1; /*!<  */
        uint8_t padding_2; /*!<  */
        isis_aocs__fault_mode_t SYSTEM_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t OBC_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t ADC_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t IMTQ_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t MTM_EXT_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t SCG_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t RW_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t RW1_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t RW2_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t RW3_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t RW4_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t HDRM_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t GNSS_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t STR_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t THR_POWER_LIMIT_EXCEEDED : 1; /*!<  */
        uint8_t padding_3[2]; /*!<  */
        isis_aocs__fault_mode_t SUBSYSTEM_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t OBC_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t ADC_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t IMTQ_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t MTM_EXT_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t SCG_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t RWA_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t RW1_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t RW2_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t RW3_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t RW4_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t HDRM_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t GNSS_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t STR_ERROR : 1; /*!<  */
        isis_aocs__fault_mode_t THR_ERROR : 1; /*!<  */
        uint8_t padding_4[2]; /*!<  */
        isis_aocs__fault_mode_t SUBSYSTEM_INVALID_SAMPLE_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t ADC_INVALID_SAMPLE_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t IMTQ_INVALID_SAMPLE_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t MTM_EXT_INVALID_SAMPLE_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t SCG_INVALID_SAMPLE_LIMIT_EXCEEDED : 1; /*!<  */
        isis_aocs__fault_mode_t RWA_INVALID_SAMPLE_LIMIT_EXCEEDED : 1; /*!<  */
        uint8_t padding_5_0 : 2; /*!<  */
        uint8_t padding_5_1 : 5; /*!<  */
        isis_aocs__fault_mode_t THR_INVALID_SAMPLE_LIMIT_EXCEEDED : 1; /*!<  */
        uint8_t padding_6[2]; /*!<  */
        uint8_t padding_7[12]; /*!<  */
    } fields;
} isis_aocs__list_faults__from_t;

/*!
 * Union for storing the parameters sent by ls.
 */
typedef union __attribute__((__packed__)) _isis_aocs__ls__to_t
{
    unsigned char raw[33];
    struct __attribute__ ((__packed__))
    {
        char pattern[33]; /*!< Match pattern; leave empty to continue the last search */
    } fields;
} isis_aocs__ls__to_t;

/*!
 * Union for storing the parameters received by ls_get.
 */
typedef union __attribute__((__packed__)) _isis_aocs__ls_get__from_t
{
    unsigned char raw[133];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        char result[131]; /*!< Newline-separated list of files */
    } fields;
} isis_aocs__ls_get__from_t;

/*!
 * Union for storing the parameters sent by read_params_from_file.
 */
typedef union __attribute__((__packed__)) _isis_aocs__read_params_from_file__to_t
{
    unsigned char raw[33];
    struct __attribute__ ((__packed__))
    {
        char filename[33]; /*!< File to read from */
    } fields;
} isis_aocs__read_params_from_file__to_t;

/*!
 * Union for storing the parameters received by retrieve_actuation_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_actuation_output__from_t
{
    unsigned char raw[59];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__actuation_output_t actuation_output; /*!< Actuation output */
    } fields;
} isis_aocs__retrieve_actuation_output__from_t;

/*!
 * Union for storing the parameters received by retrieve_actuation_state.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_actuation_state__from_t
{
    unsigned char raw[36];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__mtq_actuation_state_t imtq_state; /*!< MTQ actuation state */
        uint64_t imtq_state_transition_time; /*!< Time when the state transition to occurred \note conversion: eng. value [in s] = 0.000001 * raw */
        isis_aocs__rw_actuation_state_t rw_state; /*!< RW actuation state */
        uint64_t rw_state_transition_time; /*!< Time when the state transition to occurred \note conversion: eng. value [in s] = 0.000001 * raw */
    } fields;
} isis_aocs__retrieve_actuation_state__from_t;

/*!
 * Union for storing the parameters received by retrieve_aocs_int_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_aocs_int_tlm__from_t
{
    unsigned char raw[250];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        float state_est_cov[49]; /*!< AUFKF covariance matrix */
        float rate_est_cov[9]; /*!< Rate estimator covariance matrix */
    } fields;
} isis_aocs__retrieve_aocs_int_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_aocs_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_aocs_tlm__from_t
{
    unsigned char raw[766];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__system_status_t status; /*!< System status */
        isis_aocs__measurements_t measurements; /*!< Raw measurements */
        isis_aocs__processed_sensor_data_t processed_sensor_data; /*!< Processed sensor data */
        isis_aocs__ephemeris_t ephemeris; /*!< Ephemeris */
        isis_aocs__state_estimate_t state_estimate; /*!< State estimate */
        isis_aocs__control_output_t control_output; /*!< Control output */
        isis_aocs__actuation_output_t actuation_output; /*!< Actuation output */
        isis_aocs__euler_angle_output_t euler_angle_output; /*!< Output as Euler angles */
    } fields;
} isis_aocs__retrieve_aocs_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_bias_estimation_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_bias_estimation_output__from_t
{
    unsigned char raw[114];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__bias_estimation_output_t data; /*!< Bias estimate */
    } fields;
} isis_aocs__retrieve_bias_estimation_output__from_t;

/*!
 * Union for storing the parameters received by retrieve_control_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_control_output__from_t
{
    unsigned char raw[59];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__control_output_t control_output; /*!< Control output */
    } fields;
} isis_aocs__retrieve_control_output__from_t;

/*!
 * Union for storing the parameters received by retrieve_cubewheel_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_cubewheel_tlm__from_t
{
    unsigned char raw[90];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__rw_power_t power; /*!< Reaction wheel power */
        isis_aocs__cubewheel_array_hk_t tlm; /*!< CW array telemetry */
    } fields;
} isis_aocs__retrieve_cubewheel_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_current_aocs_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_current_aocs_tlm__from_t
{
    unsigned char raw[766];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__system_status_t status; /*!< System status */
        isis_aocs__measurements_t measurements; /*!< Raw measurements */
        isis_aocs__processed_sensor_data_t processed_sensor_data; /*!< Processed sensor data */
        isis_aocs__ephemeris_t ephemeris; /*!< Ephemeris */
        isis_aocs__state_estimate_t state_estimate; /*!< State estimate */
        isis_aocs__control_output_t control_output; /*!< Control output */
        isis_aocs__actuation_output_t actuation_output; /*!< Actuation output */
        isis_aocs__euler_angle_output_t euler_angle_output; /*!< Output as Euler angles */
    } fields;
} isis_aocs__retrieve_current_aocs_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_current_subsystem_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_current_subsystem_tlm__from_t
{
    unsigned char raw[507];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__subsys_tlm_t tlm; /*!< Subsystem TLM */
    } fields;
} isis_aocs__retrieve_current_subsystem_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_enp_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_enp_tlm__from_t
{
    unsigned char raw[145];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__enp_power_t power; /*!< Thruster power */
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        isis_aocs__enpulsion_registermap_t tlm; /*!< Subsystem telemetry data */
    } fields;
} isis_aocs__retrieve_enp_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_ephemeris.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_ephemeris__from_t
{
    unsigned char raw[72];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__ephemeris_t ephemeris; /*!< Ephemeris */
    } fields;
} isis_aocs__retrieve_ephemeris__from_t;

/*!
 * Union for storing the parameters received by retrieve_euler_angles.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_euler_angles__from_t
{
    unsigned char raw[106];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__euler_angle_output_t angles; /*!< AOCS output as Euler angles */
    } fields;
} isis_aocs__retrieve_euler_angles__from_t;

/*!
 * Union for storing the parameters received by retrieve_gnss_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_gnss_tlm__from_t
{
    unsigned char raw[77];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__power_t power; /*!< GNSS power */
        isis_aocs__novatel_oem719_hk_t tlm; /*!< Subsystem telemetry data */
    } fields;
} isis_aocs__retrieve_gnss_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_imtq_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_imtq_tlm__from_t
{
    unsigned char raw[79];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__imtq_power_t power; /*!< IMTQ power */
        isis_aocs__imtq_hk_t tlm; /*!< Subsystem telemetry data */
    } fields;
} isis_aocs__retrieve_imtq_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_measurements.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_measurements__from_t
{
    unsigned char raw[274];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__measurements_t measurements; /*!< Raw measurements */
    } fields;
} isis_aocs__retrieve_measurements__from_t;

/*!
 * Union for storing the parameters received by retrieve_power_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_power_tlm__from_t
{
    unsigned char raw[106];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__power_hk_t power; /*!< Power TLM */
        isis_aocs__pdu_hk_t pdu; /*!< Power delivery unit TLM; if present */
    } fields;
} isis_aocs__retrieve_power_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_processed_sensor_data.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_processed_sensor_data__from_t
{
    unsigned char raw[206];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__processed_sensor_data_t processed_sensor_data; /*!< Processed sensor data */
    } fields;
} isis_aocs__retrieve_processed_sensor_data__from_t;

/*!
 * Union for storing the parameters received by retrieve_rw25_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_rw25_tlm__from_t
{
    unsigned char raw[90];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__rw_power_t power; /*!< Reaction wheel power */
        isis_aocs__af_rw25_array_tlm_t tlm; /*!< RW array telemetry */
    } fields;
} isis_aocs__retrieve_rw25_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_scg_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_scg_tlm__from_t
{
    unsigned char raw[50];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__power_t power; /*!< SCG power */
        isis_aocs__scg_hk_t tlm; /*!< Subsystem telemetry data */
    } fields;
} isis_aocs__retrieve_scg_tlm__from_t;

/*!
 * Union for storing the parameters sent by retrieve_single_aocs_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_single_aocs_tlm__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__aocs_tlm_type_t type; /*!< TLM type */
        isis_aocs__tlm_entry_last_pps_sample_t entry; /*!< Telemetry entry */
    } fields;
} isis_aocs__retrieve_single_aocs_tlm__to_t;

/*!
 * Union for storing the parameters received by retrieve_single_aocs_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_single_aocs_tlm__from_t
{
    unsigned char raw[274];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        uint8_t tlm[256]; /*!< Telemetry; one of the fields of retrieve_aocs_tlm */
    } fields;
} isis_aocs__retrieve_single_aocs_tlm__from_t;

/*!
 * Union for storing the parameters sent by retrieve_single_subsystem_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_single_subsystem_tlm__to_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__subsys_t subsystem; /*!< Subsystem to request */
        isis_aocs__tlm_entry_last_sample_t entry; /*!< Telemetry entry */
    } fields;
} isis_aocs__retrieve_single_subsystem_tlm__to_t;

/*!
 * Union for storing the parameters received by retrieve_single_subsystem_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_single_subsystem_tlm__from_t
{
    unsigned char raw[146];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        uint8_t tlm[128]; /*!< Subsystem telemetry: subsystem power followed by subsystem housekeeping; see fields of retrieve_subsystem_tlm */
    } fields;
} isis_aocs__retrieve_single_subsystem_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_state_estimate.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_state_estimate__from_t
{
    unsigned char raw[67];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__state_estimate_t state_estimate; /*!< State estimate */
    } fields;
} isis_aocs__retrieve_state_estimate__from_t;

/*!
 * Union for storing the parameters received by retrieve_str_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_str_tlm__from_t
{
    unsigned char raw[114];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__auriga_power_t power; /*!< Star tracker power */
        isis_aocs__auriga_hk_t tlm; /*!< Star tracker telemetry data */
    } fields;
} isis_aocs__retrieve_str_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_subsystem_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_subsystem_tlm__from_t
{
    unsigned char raw[507];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__subsys_tlm_t tlm; /*!< Subsystem TLM */
    } fields;
} isis_aocs__retrieve_subsystem_tlm__from_t;

/*!
 * Union for storing the parameters received by retrieve_system_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_system_status__from_t
{
    unsigned char raw[49];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__system_status_t status; /*!< System status */
    } fields;
} isis_aocs__retrieve_system_status__from_t;

/*!
 * Union for storing the parameters received by retrieve_thr_tlm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__retrieve_thr_tlm__from_t
{
    unsigned char raw[162];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tlm_response_header_t response_status; /*!< Response status */
        isis_aocs__tm_power_t power; /*!< Thruster power */
        uint64_t timestamp; /*!< Unix timestamp when the data was requested from the subsystem */
        isis_aocs__tm_hk_t tlm; /*!< Subsystem telemetry data */
    } fields;
} isis_aocs__retrieve_thr_tlm__from_t;

/*!
 * Structure the parameters sent by rw_set_bypass.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__rw_set_bypass__to_t
{
    isis_aocs__rw_bypass_mode_t mode; /*!< RW bypass mode */
    float* speed; /*!< Bypass parameters; see aliases for specification (maximum length: 4 elements) */
} isis_aocs__rw_set_bypass__to_t;

/*!
 * Union for storing the parameters sent by rw_set_bypass_duty_cycle.
 */
typedef union __attribute__((__packed__)) _isis_aocs__rw_set_bypass_duty_cycle__to_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        float speed[4]; /*!< Duty cycle \note conversion: eng. value [in %] = 100 * raw */
    } fields;
} isis_aocs__rw_set_bypass_duty_cycle__to_t;

/*!
 * Union for storing the parameters sent by rw_set_bypass_rpm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__rw_set_bypass_rpm__to_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        float speed[4]; /*!< Wheel speeds \note conversion: eng. value [in rpm] = 9.549296585513721 * raw */
    } fields;
} isis_aocs__rw_set_bypass_rpm__to_t;

/*!
 * Union for storing the parameters received by scg_get_fw_status.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_get_fw_status__from_t
{
    unsigned char raw[56];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__scg_reply_header_t reply_header; /*!<  */
        uint8_t fw_index; /*!<  */
        uint32_t borw_count; /*!<  */
        uint32_t fw0_size; /*!<  */
        uint16_t fw0_crc16; /*!<  */
        uint32_t fw0_version; /*!<  */
        uint32_t fw0_corw_count; /*!<  */
        uint32_t fw1_size; /*!<  */
        uint16_t fw1_crc16; /*!<  */
        uint32_t fw1_version; /*!<  */
        uint32_t fw1_corw_count; /*!<  */
        uint32_t fw2_size; /*!<  */
        uint16_t fw2_crc16; /*!<  */
        uint32_t fw2_version; /*!<  */
        uint32_t fw2_corw_count; /*!<  */
        isis_aocs__scg_fw_error_t bitmap1; /*!<  */
    } fields;
} isis_aocs__scg_get_fw_status__from_t;

/*!
 * Union for storing the parameters received by scg_get_system_output.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_get_system_output__from_t
{
    unsigned char raw[269];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__scg_reply_header_t reply_header; /*!<  */
        isis_aocs__scg_gyro_output_t gyro_output; /*!<  */
        isis_aocs__scg_gyro_temp_calib_t gyro_temp_calib; /*!<  */
        isis_aocs__scg_gyro_misa_calib_t gyro_misa_calib; /*!<  */
        isis_aocs__scg_ugakf_rate_t ugakf_rate; /*!<  */
        isis_aocs__scg_ugakf_bias_t ugakf_bias; /*!<  */
        int8_t mcu_temp; /*!<  */
        int8_t gyro1_temp_raw; /*!<  \note conversion: eng. value [in °C] = -1 * raw + 25*/
        int8_t gyro2_temp_raw; /*!<  \note conversion: eng. value [in °C] = -1 * raw + 25*/
        int8_t gyro3_temp_raw; /*!<  \note conversion: eng. value [in °C] = -1 * raw + 25*/
    } fields;
} isis_aocs__scg_get_system_output__from_t;

/*!
 * Union for storing the parameters sent by scg_update_fw.
 */
typedef union __attribute__((__packed__)) _isis_aocs__scg_update_fw__to_t
{
    unsigned char raw[38];
    struct __attribute__ ((__packed__))
    {
        char fname[33]; /*!< Filename for firmware */
        uint8_t fw_index; /*!< Firmware index */
        uint32_t fw_version; /*!< Firmware version */
    } fields;
} isis_aocs__scg_update_fw__to_t;

/*!
 * Structure the parameters sent by set_control_target_for_modes.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__set_control_target_for_modes__to_t
{
    uint16_t modes; /*!< Bitfield indicating the operating modes to update */
    isis_aocs__ctrl_target_type_t primary_target; /*!< Primary target Type */
    isis_aocs__ctrl_target_type_t secondary_target; /*!< Secondary target Type */
    uint8_t* params; /*!< Target parameters (maximum length: 44 elements) */
} isis_aocs__set_control_target_for_modes__to_t;

/*!
 * Union for storing the parameters sent by set_operating_mode.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_operating_mode__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__operating_mode_t mode; /*!< Operating mode */
        isis_aocs__opmode_switch_delay_t delay : 1; /*!< Delay operating switch according to configuration of the new operating mode */
        isis_aocs__opmode_switch_wait_t wait_for_subsys : 1; /*!< Wait for required subsystems to become ready before switching */
        isis_aocs__opmode_switch_subsys_power_on_t subsys_power_on : 1; /*!< Switch on subsystems according to configuration of the new operating mode */
        isis_aocs__opmode_switch_subsys_power_off_t subsys_power_off : 1; /*!< Switch off subsystems according to configuration of the current operating mode */
    } fields;
} isis_aocs__set_operating_mode__to_t;

/*!
 * Union for storing the parameters sent by set_param.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param__to_t
{
    unsigned char raw[245];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        uint8_t data[240]; /*!< Parameter value to set */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__set_param__to_t;

/*!
 * Union for storing the parameters sent by set_param_1f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_1f__to_t
{
    unsigned char raw[11];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        float data; /*!< Parameter value to set */
    } fields;
} isis_aocs__set_param_1f__to_t;

/*!
 * Union for storing the parameters sent by set_param_2f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_2f__to_t
{
    unsigned char raw[15];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        float data[2]; /*!< Parameter value to set */
    } fields;
} isis_aocs__set_param_2f__to_t;

/*!
 * Union for storing the parameters sent by set_param_3f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_3f__to_t
{
    unsigned char raw[19];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        float data[3]; /*!< Parameter value to set */
    } fields;
} isis_aocs__set_param_3f__to_t;

/*!
 * Union for storing the parameters sent by set_param_4f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_4f__to_t
{
    unsigned char raw[23];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        float data[4]; /*!< Parameter value to set */
    } fields;
} isis_aocs__set_param_4f__to_t;

/*!
 * Union for storing the parameters sent by set_param_ascii.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_ascii__to_t
{
    unsigned char raw[245];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        char data[240]; /*!< Parameter value to set */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__set_param_ascii__to_t;

/*!
 * Union for storing the parameters sent by set_param_bias_estimator.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_bias_estimator__to_t
{
    unsigned char raw[11];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_bias_est_options_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__sensor_mtm_int_t mtm_int : 1; /*!< Enable MTM_INT as reference */
        isis_aocs__sensor_mtm_ext_t mtm_ext : 1; /*!< Enable MTM_EXT as reference */
        isis_aocs__sensor_pda_t pda : 1; /*!< Enable PDA as reference */
        isis_aocs__sensor_scg_raw_t scg_raw : 1; /*!< Enable SCG_RAW as reference */
        isis_aocs__sensor_scg_filt_t scg_filt : 1; /*!< Enable SCG_FILT as reference */
        isis_aocs__sensor_fss_1_t fss_1 : 1; /*!< Enable FSS_1 as reference */
        isis_aocs__sensor_fss_2_t fss_2 : 1; /*!< Enable FSS_2 as reference */
        isis_aocs__sensor_fss_3_t fss_3 : 1; /*!< Enable FSS_3 as reference */
        isis_aocs__sensor_fss_4_t fss_4 : 1; /*!< Enable FSS_4 as reference */
        isis_aocs__sensor_gnss_t gnss : 1; /*!< Enable GNSS as reference */
        isis_aocs__sensor_str_1_t str_1 : 1; /*!< Enable STR_1 as reference */
        isis_aocs__sensor_str_2_t str_2 : 1; /*!< Enable STR_2 as reference */
        uint8_t reserved_1 : 4; /*!< Reserved for future use */
        uint8_t reserved_2 : 4; /*!< Reserved for future use */
        isis_aocs__source_full_state_estimator_t full_state_estimator : 1; /*!< Enable full-state estimator as reference */
        isis_aocs__source_raw_rate_estimator_t raw_rate_estimator : 1; /*!< Enable raw-rate estimator as reference */
        uint8_t reserved_3 : 2; /*!< Reserved for future use */
        isis_aocs__boolean_t enabled : 1; /*!< Whether the bias estimator is enabled */
        isis_aocs__boolean_t use_quaternion_derivative : 1; /*!< Whether the bias estimator uses the derivative of the quaternion as angular rate reference */
        isis_aocs__boolean_t weighted_average : 1; /*!< Whether the bias estimator scales each of the selected sources by the reciprocal of their noise (estimate) */
        isis_aocs__boolean_t scale_filter_coefficient : 1; /*!< Whether the bias estimator scales the filter coefficient by the mean of the reciprocals of the noises of the selected sources */
        uint8_t reserved_4 : 4; /*!< Reserved for future use */
    } fields;
} isis_aocs__set_param_bias_estimator__to_t;

/*!
 * Union for storing the parameters sent by set_param_control_target.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_control_target__to_t
{
    unsigned char raw[53];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_ctrl_target_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Offset in the parameter to write to */
        uint8_t size; /*!< Size of the data to write to the parameter */
        isis_aocs__control_target_generic_t target; /*!< Control target */
    } fields;
} isis_aocs__set_param_control_target__to_t;

/*!
 * Union for storing the parameters sent by set_param_control_target_axis.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_control_target_axis__to_t
{
    unsigned char raw[15];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_ctrl_target_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Offset in the parameter to write to */
        uint8_t size; /*!< Size of the data to write to the parameter */
        float target_axis_azimuth; /*!< Target axis azimuth angle \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float target_axis_elevation; /*!< Target axis elevation angle \note conversion: eng. value [in °] = 57.29577951308232 * raw */
    } fields;
} isis_aocs__set_param_control_target_axis__to_t;

/*!
 * Union for storing the parameters sent by set_param_control_target_lla.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_control_target_lla__to_t
{
    unsigned char raw[19];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_ctrl_target_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Offset in the parameter to write to */
        uint8_t size; /*!< Size of the data to write to the parameter */
        float target_latitude; /*!< Target point WGS84 latitude \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float target_longitude; /*!< Target point WGS84 longitude \note conversion: eng. value [in °] = 57.29577951308232 * raw */
        float target_altitude; /*!< Target point WGS84 altitude */
    } fields;
} isis_aocs__set_param_control_target_lla__to_t;

/*!
 * Union for storing the parameters sent by set_param_control_target_lvlh.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_control_target_lvlh__to_t
{
    unsigned char raw[21];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_ctrl_target_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Offset in the parameter to write to */
        uint8_t size; /*!< Size of the data to write to the parameter */
        isis_aocs__control_target_lvlh_t target; /*!< Control target */
    } fields;
} isis_aocs__set_param_control_target_lvlh__to_t;

/*!
 * Union for storing the parameters sent by set_param_control_target_quat.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_control_target_quat__to_t
{
    unsigned char raw[25];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_ctrl_target_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Offset in the parameter to write to */
        uint8_t size; /*!< Size of the data to write to the parameter */
        isis_aocs__control_target_quat_t target; /*!< Control target */
    } fields;
} isis_aocs__set_param_control_target_quat__to_t;

/*!
 * Union for storing the parameters sent by set_param_cubewheel.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_cubewheel__to_t
{
    unsigned char raw[4];
    struct __attribute__ ((__packed__))
    {
        uint8_t backup_mode[4]; /*!< What to write */
    } fields;
} isis_aocs__set_param_cubewheel__to_t;

/*!
 * Union for storing the parameters sent by set_param_f.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_f__to_t
{
    unsigned char raw[245];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        float data[60]; /*!< Parameter value to set */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__set_param_f__to_t;

/*!
 * Union for storing the parameters sent by set_param_generic.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_generic__to_t
{
    unsigned char raw[245];
    struct __attribute__ ((__packed__))
    {
        uint32_t index; /*!< Where to write the parameter */
        uint8_t data[240]; /*!< Parameter value to set */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__set_param_generic__to_t;

/*!
 * Union for storing the parameters sent by set_param_gnss_log_config.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_gnss_log_config__to_t
{
    unsigned char raw[14];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        uint16_t entry; /*!< Log entry in the parameter to write to \note conversion: eng. value = 0.14285714285714285 * raw */
        uint8_t size; /*!< Size of the data to write to the parameter */
        isis_aocs__novatel_log_config_item_t log; /*!< Data to write */
    } fields;
} isis_aocs__set_param_gnss_log_config__to_t;

/*!
 * Union for storing the parameters sent by set_param_hex32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_hex32__to_t
{
    unsigned char raw[245];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        uint32_t data[60]; /*!< Parameter value to set */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__set_param_hex32__to_t;

/*!
 * Union for storing the parameters sent by set_param_int32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_int32__to_t
{
    unsigned char raw[245];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        int32_t data[60]; /*!< Parameter value to set */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__set_param_int32__to_t;

/*!
 * Union for storing the parameters sent by set_param_operating_mode_subsys_auto_power.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_operating_mode_subsys_auto_power__to_t
{
    unsigned char raw[9];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_operating_mode_switch_config_t index; /*!< Where to write the parameter */
        isis_aocs__operating_mode_switch_config_subsys_power_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__subsystem_bitfield_t data; /*!< Data to write */
    } fields;
} isis_aocs__set_param_operating_mode_subsys_auto_power__to_t;

/*!
 * Union for storing the parameters sent by set_param_operating_mode_switch_delay.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_operating_mode_switch_delay__to_t
{
    unsigned char raw[9];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_operating_mode_switch_config_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        uint16_t switch_delay; /*!< Delay before switching to this mode \note conversion: eng. value [in s] = 0.001 * raw */
    } fields;
} isis_aocs__set_param_operating_mode_switch_delay__to_t;

/*!
 * Structure the parameters sent by set_param_partial.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__set_param_partial__to_t
{
    isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
    uint16_t offset; /*!< Byte offset in the parameter to write to */
    uint8_t size; /*!< Byte size of the data to write to the parameter */
    uint8_t* data; /*!< Parameter value to set (maximum length: 160 elements) */
} isis_aocs__set_param_partial__to_t;

/*!
 * Structure the parameters sent by set_param_partial_f.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__set_param_partial_f__to_t
{
    isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
    uint16_t offset; /*!< Byte offset in the parameter to write to */
    uint8_t size; /*!< Byte size of the data to write to the parameter */
    float* data; /*!< Parameter value to set (maximum length: 8 elements) */
} isis_aocs__set_param_partial_f__to_t;

/*!
 * Structure the parameters sent by set_param_partial_generic.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__set_param_partial_generic__to_t
{
    uint32_t index; /*!< Where to write the parameter */
    uint16_t offset; /*!< Byte offset in the parameter to write to */
    uint8_t size; /*!< Byte size of the data to write to the parameter */
    uint8_t* data; /*!< Parameter value to set (maximum length: 160 elements) */
} isis_aocs__set_param_partial_generic__to_t;

/*!
 * Structure the parameters sent by set_param_partial_hex32.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__set_param_partial_hex32__to_t
{
    isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
    uint16_t offset; /*!< Byte offset in the parameter to write to */
    uint8_t size; /*!< Byte size of the data to write to the parameter */
    uint32_t* data; /*!< Parameter value to set (maximum length: 8 elements) */
} isis_aocs__set_param_partial_hex32__to_t;

/*!
 * Structure the parameters sent by set_param_partial_int32.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__set_param_partial_int32__to_t
{
    isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
    uint16_t offset; /*!< Byte offset in the parameter to write to */
    uint8_t size; /*!< Byte size of the data to write to the parameter */
    int32_t* data; /*!< Parameter value to set (maximum length: 8 elements) */
} isis_aocs__set_param_partial_int32__to_t;

/*!
 * Structure the parameters sent by set_param_partial_uint32.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__set_param_partial_uint32__to_t
{
    isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
    uint16_t offset; /*!< Byte offset in the parameter to write to */
    uint8_t size; /*!< Byte size of the data to write to the parameter */
    uint32_t* data; /*!< Parameter value to set (maximum length: 8 elements) */
} isis_aocs__set_param_partial_uint32__to_t;

/*!
 * Union for storing the parameters sent by set_param_sensors.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_sensors__to_t
{
    unsigned char raw[9];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_mode_sensors_index_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__sensor_bitfield_t data; /*!< Data to write */
    } fields;
} isis_aocs__set_param_sensors__to_t;

/*!
 * Union for storing the parameters sent by set_param_subsys_required.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_subsys_required__to_t
{
    unsigned char raw[9];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_subsys_required_t index; /*!< Where to write the parameter */
        uint16_t offset; /*!< Byte offset in the parameter to write to */
        uint8_t size; /*!< Byte size of the data to write to the parameter */
        isis_aocs__subsystem_bitfield_t data; /*!< Data to write */
    } fields;
} isis_aocs__set_param_subsys_required__to_t;

/*!
 * Union for storing the parameters sent by set_param_uint32.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_param_uint32__to_t
{
    unsigned char raw[245];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__fpdb_index_t index; /*!< Where to write the parameter */
        uint32_t data[60]; /*!< Parameter value to set */
        uint8_t data_size; /*!< Number of bytes in data */
    } fields;
} isis_aocs__set_param_uint32__to_t;

/*!
 * Union for storing the parameters sent by set_subsystem_mode.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_subsystem_mode__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__subsys_t subsystem; /*!< Subsystem to switch */
        isis_aocs__subsys_mode_t mode; /*!< Subsystem mode */
    } fields;
} isis_aocs__set_subsystem_mode__to_t;

/*!
 * Union for storing the parameters sent by set_subsystem_power_bypass.
 */
typedef union __attribute__((__packed__)) _isis_aocs__set_subsystem_power_bypass__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__subsys_t subsystem; /*!< Subsystem to switch */
        isis_aocs__subsys_mode_t mode; /*!< Subsystem mode */
    } fields;
} isis_aocs__set_subsystem_power_bypass__to_t;

/*!
 * Structure the parameters sent by tdd.
 */
typedef struct __attribute__((__packed__))
_isis_aocs__tdd__to_t
{
    isis_aocs__tdd_command_t command; /*!< TDD command */
    uint8_t* data; /*!<  (maximum length: 64 elements) */
} isis_aocs__tdd__to_t;

/*!
 * Union for storing the parameters sent by tdd_delay_task.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tdd_delay_task__to_t
{
    unsigned char raw[37];
    struct __attribute__ ((__packed__))
    {
        uint32_t delay; /*!< Delay in [ms] */
        char task[33]; /*!< Task name */
    } fields;
} isis_aocs__tdd_delay_task__to_t;

/*!
 * Union for storing the parameters sent by tdd_deploy.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tdd_deploy__to_t
{
    unsigned char raw[2];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__tdd_command_t command; /*!< TDD command */
        isis_aocs__deployment_t state; /*!<  */
    } fields;
} isis_aocs__tdd_deploy__to_t;

/*!
 * Union for storing the parameters sent by tdd_set_subsys_error.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tdd_set_subsys_error__to_t
{
    unsigned char raw[9];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__subsys_t subsystem; /*!<  */
        int32_t error_code; /*!<  */
        uint32_t count; /*!<  */
    } fields;
} isis_aocs__tdd_set_subsys_error__to_t;

/*!
 * Union for storing the parameters sent by tdd_spoof_adc.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tdd_spoof_adc__to_t
{
    unsigned char raw[52];
    struct __attribute__ ((__packed__))
    {
        uint16_t ADC_INT[10]; /*!<  */
        uint16_t ADC_EXT[16]; /*!<  */
    } fields;
} isis_aocs__tdd_spoof_adc__to_t;

/*!
 * Union for storing the parameters sent by tdd_spoof_mtm.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tdd_spoof_mtm__to_t
{
    unsigned char raw[25];
    struct __attribute__ ((__packed__))
    {
        int32_t MTM_INT[3]; /*!<  */
        int32_t MTM_EXT[3]; /*!<  */
        int8_t MTM_TEMP; /*!<  */
    } fields;
} isis_aocs__tdd_spoof_mtm__to_t;

/*!
 * Union for storing the parameters sent by tdd_spoof_mtm_ext.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tdd_spoof_mtm_ext__to_t
{
    unsigned char raw[24];
    struct __attribute__ ((__packed__))
    {
        double MAG[3]; /*!<  */
    } fields;
} isis_aocs__tdd_spoof_mtm_ext__to_t;

/*!
 * Union for storing the parameters sent by thr_check_password.
 */
typedef union __attribute__((__packed__)) _isis_aocs__thr_check_password__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password */
    } fields;
} isis_aocs__thr_check_password__to_t;

/*!
 * Union for storing the parameters received by thr_check_password.
 */
typedef union __attribute__((__packed__)) _isis_aocs__thr_check_password__from_t
{
    unsigned char raw[3];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__generic_error_code_t error_code; /*!< Result code */
        isis_aocs__boolean8bit_t valid; /*!< Whether the password is valid */
    } fields;
} isis_aocs__thr_check_password__from_t;

/*!
 * Union for storing the parameters sent by thr_set_password.
 */
typedef union __attribute__((__packed__)) _isis_aocs__thr_set_password__to_t
{
    unsigned char raw[16];
    struct __attribute__ ((__packed__))
    {
        uint8_t old_password[8]; /*!< Old password */
        uint8_t new_password[8]; /*!< New password */
    } fields;
} isis_aocs__thr_set_password__to_t;

/*!
 * Union for storing the parameters sent by tm_arm_firing.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_arm_firing__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
    } fields;
} isis_aocs__tm_arm_firing__to_t;

/*!
 * Union for storing the parameters sent by tm_start_commissioning.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_start_commissioning__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
    } fields;
} isis_aocs__tm_start_commissioning__to_t;

/*!
 * Union for storing the parameters sent by tm_start_firing.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_start_firing__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
    } fields;
} isis_aocs__tm_start_firing__to_t;

/*!
 * Union for storing the parameters sent by tm_start_ground_test.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_start_ground_test__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
    } fields;
} isis_aocs__tm_start_ground_test__to_t;

/*!
 * Union for storing the parameters sent by tm_stop_commissioning.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_stop_commissioning__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
    } fields;
} isis_aocs__tm_stop_commissioning__to_t;

/*!
 * Union for storing the parameters sent by tm_stop_firing.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_stop_firing__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
    } fields;
} isis_aocs__tm_stop_firing__to_t;

/*!
 * Union for storing the parameters sent by tm_stop_ground_test.
 */
typedef union __attribute__((__packed__)) _isis_aocs__tm_stop_ground_test__to_t
{
    unsigned char raw[8];
    struct __attribute__ ((__packed__))
    {
        uint8_t password[8]; /*!< Password for arming and firing */
    } fields;
} isis_aocs__tm_stop_ground_test__to_t;

/*!
 * Union for storing the parameters sent by up_chunk.
 */
typedef union __attribute__((__packed__)) _isis_aocs__up_chunk__to_t
{
    unsigned char raw[135];
    struct __attribute__ ((__packed__))
    {
        uint32_t offset; /*!< Byte offset of this chunk */
        uint16_t crc16; /*!< CRC16 of the data block */
        uint8_t size; /*!< Size of this block */
        uint8_t data[128]; /*!< Data block */
    } fields;
} isis_aocs__up_chunk__to_t;

/*!
 * Union for storing the parameters sent by up_start.
 */
typedef union __attribute__((__packed__)) _isis_aocs__up_start__to_t
{
    unsigned char raw[39];
    struct __attribute__ ((__packed__))
    {
        uint8_t crc8; /*!< CRC8 of the following data (type, filename and size) */
        isis_aocs__file_upload_type_t type; /*!< Reserved for future use */
        char filename[33]; /*!< Null-terminated target filename */
        uint32_t size; /*!< Target file size */
    } fields;
} isis_aocs__up_start__to_t;

/*!
 * Union for storing the parameters sent by up_store.
 */
typedef union __attribute__((__packed__)) _isis_aocs__up_store__to_t
{
    unsigned char raw[37];
    struct __attribute__ ((__packed__))
    {
        char filename[33]; /*!< 0XCBF43926 */
        uint32_t crc32; /*!< CRC32 of the entire file */
    } fields;
} isis_aocs__up_store__to_t;

/*!
 * Union for storing the parameters sent by up_verify.
 */
typedef union __attribute__((__packed__)) _isis_aocs__up_verify__to_t
{
    unsigned char raw[33];
    struct __attribute__ ((__packed__))
    {
        char filename[33]; /*!< 0XCBF43926 */
    } fields;
} isis_aocs__up_verify__to_t;

/*!
 * Union for storing the parameters received by up_verify.
 */
typedef union __attribute__((__packed__)) _isis_aocs__up_verify__from_t
{
    unsigned char raw[5];
    struct __attribute__ ((__packed__))
    {
        isis_aocs__file_generic_response_t response; /*!< Generic file response */
        uint32_t crc32; /*!< Computed CRC32 of the stored file */
    } fields;
} isis_aocs__up_verify__from_t;

#ifdef __cplusplus
}
#endif

#endif /* ISIS_AOCS_TYPES_H_ */

