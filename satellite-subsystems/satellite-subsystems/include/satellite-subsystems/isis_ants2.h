/*
 * isis_ants2.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 *
 * Generated ICD version: 1.0
 * Generated from: isis_ants2.yaml
 */

#ifndef ISIS_ANTS2_H_
#define ISIS_ANTS2_H_

#include "isis_ants2_types.h"
#include <satellite-subsystems/common_types.h>

/*!
 *	Initialize ISIS_ANTS2 instances
 *
 *	@param[in] Pointer to array of ISIS_ANTS2 instances.
 *	@param[in] Count of ISIS_ANTS2 instances.
 * 	@return driver_error_t
 */
int ISIS_ANTS2_Init(ISIS_ANTS2_t* isis_ants2, uint8_t isis_ants2Count);

/*!
 * Arms the antenna system. The system needs to be armed to be able to deploy antennas.
 *
 * @return driver_error_t
 */
int isis_ants2__arm(uint8_t index);

/*!
 * Deactivate any deployment systems that are currently active, and terminate ongoing automated sequential antenna deployment. This command only has effect when the system has been armed and a deployment system is currently active or an automated sequential antenna deployment is currently ongoing.
 *
 * @return driver_error_t
 */
int isis_ants2__cancel_deploy(uint8_t index);

/*!
 * Cancel independent burn mode
 *
 * @return driver_error_t
 */
int isis_ants2__cancel_id(uint8_t index);

/*!
 * Performs a reset of the I2C watchdog without performing any other operation
 *
 * @return driver_error_t
 */
int isis_ants2__clear_wdg(uint8_t index);

/*!
 * Attempt to deploy antenna 1 by activating the deployment system for antenna 1
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__deploy1(uint8_t index, uint8_t max_time_in);

/*!
 * Attempt to deploy antenna 1 by activating the deployment system for antenna 1. This command ignores the corresponding deployment switch that indicates deployment of antenna 1.
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__deploy1_override(uint8_t index, uint8_t max_time_in);

/*!
 * Attempt to deploy antenna 1 by activating the deployment system for antenna 1
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__deploy1_redundant(uint8_t index, uint8_t max_time_in);

/*!
 * Attempt to deploy antenna 2 by activating the deployment system for antenna 1. This command ignores the corresponding deployment switch that indicates deployment of antenna 1.
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__deploy1_redundant_override(uint8_t index, uint8_t max_time_in);

/*!
 * Attempt to deploy antenna 2 by activating the deployment system for antenna 2
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__deploy2(uint8_t index, uint8_t max_time_in);

/*!
 * Attempt to deploy antenna 2 by activating the deployment system for antenna 2. This command ignores the corresponding deployment switch that indicates deployment of antenna 2.
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__deploy2_override(uint8_t index, uint8_t max_time_in);

/*!
 * Attempt to deploy antenna 2 by activating the deployment system for antenna 2
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__deploy2_redundant(uint8_t index, uint8_t max_time_in);

/*!
 * Attempt to deploy antenna 2 by activating the deployment system for antenna 2. This command ignores the corresponding deployment switch that indicates deployment of antenna 2.
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__deploy2_redundant_override(uint8_t index, uint8_t max_time_in);

/*!
 * Disarms the antenna system. This command will deactivate any active antenna deployment systems and terminate an ongoing automated sequential antenna deployment before disarming the system. The antenna system will only be able to deploy antennas once it has been armed again.
 *
 * @return driver_error_t
 */
int isis_ants2__disarm(uint8_t index);

/*!
 * Obtain ISIS Antenna Systems all telemetry structure.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_all_telemetry(uint8_t index, isis_ants2__get_all_telemetry__from_t *response);

/*!
 * Obtain ISIS Antenna Systems all telemetry structure.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_all_telemetry_reva(uint8_t index, isis_ants2__get_all_telemetry_reva__from_t *response);

/*!
 * Reports the number of times the deployment system for antenna 1 has been activated since the last reset of the microcontroller.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_deploy1_count(uint8_t index, uint8_t *deploy_count_out);

/*!
 * Reports the number of times the deployment system for antenna 1 has been activated since the last reset of the microcontroller.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_deploy1_redundant_count(uint8_t index, uint8_t *deploy_count_out);

/*!
 * Reports the total amount of time the deployment system for antenna 1 has been active since the last reset of the microcontroller. Please note that this value is cumulative, i.e. it sums the activation times for separate deployment system activations.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_deploy1_redundant_time(uint8_t index, uint16_t *deploy_time_out);

/*!
 * Reports the total amount of time the deployment system for antenna 1 has been active since the last reset of the microcontroller. Please note that this value is cumulative, i.e. it sums the activation times for separate deployment system activations.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_deploy1_time(uint8_t index, uint16_t *deploy_time_out);

/*!
 * Reports the number of times the deployment system for antenna 2 has been activated since the last reset of the microcontroller.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_deploy2_count(uint8_t index, uint8_t *deploy_count_out);

/*!
 * Reports the number of times the deployment system for antenna 2 has been activated since the last reset of the microcontroller.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_deploy2_redundant_count(uint8_t index, uint8_t *deploy_count_out);

/*!
 * Reports the total amount of time the deployment system for antenna 2 has been active since the last reset of the microcontroller. Please note that this value is cumulative, i.e. it sums the activation times for separate deployment system activations.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_deploy2_redundant_time(uint8_t index, uint16_t *deploy_time_out);

/*!
 * Reports the total amount of time the deployment system for antenna 2 has been active since the last reset of the microcontroller. Please note that this value is cumulative, i.e. it sums the activation times for separate deployment system activations.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_deploy2_time(uint8_t index, uint16_t *deploy_time_out);

/*!
 * Get independent burn time left
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_idtimeleft(uint8_t index, uint16_t *uptime_out);

/*!
 * Report deployment status
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_status(uint8_t index, isis_ants2__deploymenttelemetry_t *deployment_status_out);

/*!
 * Measures the temperature as reported by the temperature sensor on the antenna system.
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_temperature(uint8_t index, isis_ants2__get_temperature__from_t *response);

/*!
 * Obtain antenna systems uptime
 *
 * @param [out] Response received from subsystem.
 * @return driver_error_t
 */
int isis_ants2__get_uptime(uint8_t index, uint32_t *uptime_out);

/*!
 * Performs a reset of the microcontroller
 *
 * @return driver_error_t
 */
int isis_ants2__reset(uint8_t index);

/*!
 * Start automated sequential antenna deployment (primary)
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__start_auto_deploy(uint8_t index, uint8_t max_time_in);

/*!
 * Start automated sequential antenna deployment (redundant)
 *
 * @param [in] Parameters sent to subsystem.
 * @return driver_error_t
 */
int isis_ants2__start_auto_deploy_redundant(uint8_t index, uint8_t max_time_in);

#endif /* ISIS_ANTS2_H_ */

