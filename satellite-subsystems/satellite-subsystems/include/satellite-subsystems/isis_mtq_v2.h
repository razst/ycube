/*
 * isis_mtq_v2.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated ICD version: 1.6
 * Generated from: isis_mtq_v2.yaml
 */

#ifndef ISIS_MTQ_V2_H_
#define ISIS_MTQ_V2_H_

#include "isis_mtq_v2_types.h"
#include <satellite-subsystems/common_types.h>

#ifdef __cplusplus
extern "C"
{
#endif

/*!
 *	Initialize driver for a number of ISIS_MTQ_V2 instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] isis_mtq_v2 Pointer to array of ISIS_MTQ_V2 instances
 *	@param[in] isis_mtq_v2Count Number of ISIS_MTQ_V2 instances pointed to by isis_mtq_v2 input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t ISIS_MTQ_V2_Init(const ISIS_MTQ_V2_t* isis_mtq_v2, uint8_t isis_mtq_v2Count);

/*!
 * Switch to operation mode idle
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__cancel_op(uint8_t index, isis_mtq_v2__replyheader_t *reply_header_out);

/*!
 * Get calibrated results of a 3-axis measurement from the MTM
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_cal_mtm_data(uint8_t index, isis_mtq_v2__get_cal_mtm_data__from_t *response);

/*!
 * Get the commanded actuation dipole
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_cmd_actuation_dipole(uint8_t index, isis_mtq_v2__get_cmd_actuation_dipole__from_t *response);

/*!
 * Get the result of a current measurement on each of the 3 coils
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_coil_current(uint8_t index, isis_mtq_v2__get_coil_current__from_t *response);

/*!
 * Get the result of a temperature measurement of each of the 3 coils
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_coil_temps(uint8_t index, isis_mtq_v2__get_coil_temps__from_t *response);

/*!
 * Prepare the response buffer with the measurements and computations of the autonomous detumble mode
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_detumble_data(uint8_t index, isis_mtq_v2__get_detumble_data__from_t *response);

/*!
 * Get housekeeping data in raw format
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_housekeeping(uint8_t index, isis_mtq_v2__get_housekeeping__from_t *response);

/*!
 * Get housekeeping data in engineering format
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_housekeeping_engineering(uint8_t index, isis_mtq_v2__get_housekeeping_engineering__from_t *response);

/*!
 * Get the value of a parameter from the OBDB
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[in] param_id_in Parameter ID
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_parameter(uint8_t index, uint16_t param_id_in, isis_mtq_v2__get_parameter__from_t *response);

/*!
 * Get raw results of a 3-axis measurement from the MTM
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_raw_mtm_data(uint8_t index, isis_mtq_v2__get_raw_mtm_data__from_t *response);

/*!
 * Get data from the last executed self-test
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_self_test_result_all(uint8_t index, isis_mtq_v2__get_self_test_result_all__from_t *response);

/*!
 * Get data from the last executed self-test
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_self_test_result_single(uint8_t index, isis_mtq_v2__get_self_test_result_single__from_t *response);

/*!
 * Return IMTQ system status info
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__get_state(uint8_t index, isis_mtq_v2__get_state__from_t *response);

/*!
 * Performs a no-operation
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__no_op(uint8_t index, isis_mtq_v2__replyheader_t *reply_header_out);

/*!
 * Reset a parameter to its default hard-coded value
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[in] param_id_in Parameter ID
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__reset_parameter(uint8_t index, uint16_t param_id_in, isis_mtq_v2__reset_parameter__from_t *response);

/*!
 * Performs a software reset of the MCU. Internal memory and peripherals are reset starting up as if a power cycle was performed without actually performing a power cycle. Please note that a reply will only be available if the reset command is not accepted.
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__reset_sw(uint8_t index, isis_mtq_v2__replyheader_t *reply_header_out);

/*!
 * Set the user parameter in the OBDB
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__set_parameter(uint8_t index, const isis_mtq_v2__set_parameter__to_t *params, isis_mtq_v2__set_parameter__from_t *response);

/*!
 * Turn on the coils at the specified current level for a given duration
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__start_actuation_current(uint8_t index, const isis_mtq_v2__start_actuation_current__to_t *params, isis_mtq_v2__replyheader_t *reply_header_out);

/*!
 * Generate the specified dipole for the given duration
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__start_actuation_dipole(uint8_t index, const isis_mtq_v2__start_actuation_dipole__to_t *params, isis_mtq_v2__replyheader_t *reply_header_out);

/*!
 * Turn on the coils at the specified PWM level for a given duration
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__start_actuation_pwm(uint8_t index, const isis_mtq_v2__start_actuation_pwm__to_t *params, isis_mtq_v2__replyheader_t *reply_header_out);

/*!
 * Switch to detumble mode for a given duration
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[in] duration_in Detumble mode duration
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__start_bdot(uint8_t index, uint16_t duration_in, isis_mtq_v2__replyheader_t *reply_header_out);

/*!
 * Start a 3-axis measurement of the magnetic field.
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__start_mtm(uint8_t index, isis_mtq_v2__replyheader_t *reply_header_out);

/*!
 * Switch to self-test mode and perform single, specified or all-axis self-test
 *
 * @param[in] index Index of ISIS_MTQ_V2 in list provided during driver initialization
 * @param[in] axis_in Indicates the single axis to test, or all axes in sequence
 * @param[out] reply_header_out Generic iMTQ reply header
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_mtq_v2__start_self_test(uint8_t index, isis_mtq_v2__axis_t axis_in, isis_mtq_v2__replyheader_t *reply_header_out);

#ifdef __cplusplus
}
#endif

#endif /* ISIS_MTQ_V2_H_ */

