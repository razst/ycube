/*
 * isis_vu_d_types.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated ICD version: 1.5
 * Generated from:
 *  - isis_vu_rx_d.yaml
 *  - isis_vu_tx_d.yaml
 */

#ifndef ISIS_VU_D_TYPES_H_
#define ISIS_VU_D_TYPES_H_

#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C"
{
#endif

/* DEFINES */

#define ISIS_VU_D_SEND_FRAME_ID {0x10}
#define ISIS_VU_D_SEND_FRAME_WITH_CALLSIGNS_ID {0x11}
#define ISIS_VU_D_SET_BEACON_ID {0x14}
#define ISIS_VU_D_SET_BEACON_WITH_CALLSIGNS_ID {0x15}
#define ISIS_VU_D_GET_RX_TELEMETRY_ID {0x1A}
#define ISIS_VU_D_CLEAR_BEACON_ID {0x1F}
#define ISIS_VU_D_GET_FRAME_COUNT_ID {0x21}
#define ISIS_VU_D_GET_FRAME_ID {0x22}
#define ISIS_VU_D_SET_CALLSIGN_TO_ID {0x22}
#define ISIS_VU_D_GET_FULL_FRAME_ID {0x23}
#define ISIS_VU_D_SET_CALLSIGN_FROM_ID {0x23}
#define ISIS_VU_D_REMOVE_FRAME_ID {0x24}
#define ISIS_VU_D_SET_IDLE_STATE_ID {0x24}
#define ISIS_VU_D_GET_TX_TELEMETRY_ID {0x25}
#define ISIS_VU_D_GET_TX_TELEMETRY_LAST_ID {0x26}
#define ISIS_VU_D_SET_BITRATE_ID {0x28}
#define ISIS_VU_D_RX_UPTIME_ID {0x40}
#define ISIS_VU_D_TX_UPTIME_ID {0x40}
#define ISIS_VU_D_STATE_ID {0x41}
#define ISIS_VU_D_RESET_SW_RX_ID {0xAA}
#define ISIS_VU_D_RESET_SW_TX_ID {0xAA}
#define ISIS_VU_D_RESET_HW_RX_ID {0xAB}
#define ISIS_VU_D_RESET_HW_TX_ID {0xAB}
#define ISIS_VU_D_RESET_WDG_RX_ID {0xCC}
#define ISIS_VU_D_RESET_WDG_TX_ID {0xCC}

#define ISIS_VU_D_SEND_FRAME_MAX_DATA_LENGTH 235
#define ISIS_VU_D_SEND_FRAME_WITH_CALLSIGNS_MAX_DATA_LENGTH 235
#define ISIS_VU_D_SET_BEACON_MAX_DATA_LENGTH 235
#define ISIS_VU_D_SET_BEACON_WITH_CALLSIGNS_MAX_DATA_LENGTH 235
#define ISIS_VU_D_GET_FRAME_MAX_DATA_LENGTH 200
#define ISIS_VU_D_GET_FULL_FRAME_MAX_DATA_LENGTH 218

/* ENUMS */

/*!
 * 
 */
typedef enum __attribute__ ((__packed__)) isis_vu_d__bitrate_t
{
    isis_vu_d__bitrate__1200bps = 1u,
    isis_vu_d__bitrate__2400bps = 2u,
    isis_vu_d__bitrate__4800bps = 4u,
    isis_vu_d__bitrate__9600bps = 8u,
} isis_vu_d__bitrate_t;

/*!
 * Enum for telemetry baudrate
 */
typedef enum __attribute__ ((__packed__)) isis_vu_d__bitrate_tlm_t
{
    isis_vu_d__bitrate_tlm__1200bps = 0u,
    isis_vu_d__bitrate_tlm__2400bps = 1u,
    isis_vu_d__bitrate_tlm__4800bps = 2u,
    isis_vu_d__bitrate_tlm__9600bps = 3u,
} isis_vu_d__bitrate_tlm_t;

/*!
 * Enum for on/off state
 */
typedef enum __attribute__ ((__packed__)) isis_vu_d__onoff_t
{
    isis_vu_d__onoff__off = 0u,
    isis_vu_d__onoff__on = 1u,
} isis_vu_d__onoff_t;

/* STRUCTS */

/*!
 *  ISIS_VU_D instance structure
 */
typedef struct
{
    uint8_t rxAddr; /*!< I2C address used for rx part of the subsystem */
    uint8_t txAddr; /*!< I2C address used for tx part of the subsystem */
    size_t maxReceiveBufferLength;
    size_t maxSendBufferLength;
} ISIS_VU_D_t;

/*!
 * Structure the parameters received by get_frame.
 */
typedef struct __attribute__((__packed__))
_isis_vu_d__get_frame__from_t
{
    uint16_t length; /*!< Frame data contents size */
    uint16_t doppler; /*!< Doppler frequency \note conversion: eng. value = 13.352 * raw + -22300*/
    uint16_t rssi; /*!< This field contains the measured Received Signal Strength Indicator (RSSI) at the reception time \note conversion: eng. value = 0.03 * raw + -152*/
    uint8_t* data; /*!< Frame contents (maximum length: 200 elements) */
} isis_vu_d__get_frame__from_t;

/*!
 * Structure the parameters received by get_full_frame.
 */
typedef struct __attribute__((__packed__))
_isis_vu_d__get_full_frame__from_t
{
    uint16_t length; /*!< Full frame contents size */
    uint16_t doppler; /*!< Doppler frequency \note conversion: eng. value = 13.352 * raw + -22300*/
    uint16_t rssi; /*!< This field contains the measured Received Signal Strength Indicator (RSSI) at the reception time \note conversion: eng. value = 0.03 * raw + -152*/
    uint8_t* data; /*!< Frame contents (maximum length: 218 elements) */
} isis_vu_d__get_full_frame__from_t;

/*!
 * Union for storing the parameters received by get_rx_telemetry.
 */
typedef union __attribute__((__packed__)) _isis_vu_d__get_rx_telemetry__from_t
{
    unsigned char raw[18];
    struct __attribute__ ((__packed__))
    {
        uint16_t doppler; /*!< Raw measurement value of the instantaneous Doppler offset of the signal at the receiver port. \note conversion: eng. value = 13.352 * raw + -22300*/
        uint16_t rssi; /*!< This field contains the measured Received Signal Strength Indicator (RSSI) at the reception time \note conversion: eng. value = 0.03 * raw + -152*/
        uint16_t voltage; /*!< Raw measurement value of the power bus voltage. \note conversion: eng. value = 0.00488 * raw */
        uint16_t current_total; /*!< Raw measurement value of the total supply current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_tx; /*!< Raw measurement value of the transmitter current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_rx; /*!< Raw measurement value of receiver current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_pa; /*!< Raw measurement power amplifier current \note conversion: eng. value = 0.16643964 * raw */
        uint16_t temp_pa; /*!< Raw measurement value of the power amplifier temperature. \note conversion: eng. value = -0.07669 * raw + 195.6037*/
        uint16_t temp_board; /*!< Raw measurement of board temperature \note conversion: eng. value = -0.07669 * raw + 195.6037*/
    } fields;
} isis_vu_d__get_rx_telemetry__from_t;

/*!
 * Union for storing the parameters received by get_tx_telemetry.
 */
typedef union __attribute__((__packed__)) _isis_vu_d__get_tx_telemetry__from_t
{
    unsigned char raw[18];
    struct __attribute__ ((__packed__))
    {
        uint16_t reflected_power; /*!< Raw measurement value of the instantaneous RF reflected power at the transmitter port. \note conversion: eng. value = 0.00005887 * raw<sup>2</sup> */
        uint16_t forward_power; /*!< Raw measurement value of the instantaneous RF forward power at the transmitter port. \note conversion: eng. value = 0.00005887 * raw<sup>2</sup> */
        uint16_t voltage; /*!< Raw measurement value of the power bus voltage. \note conversion: eng. value = 0.00488 * raw */
        uint16_t current_total; /*!< Raw measurement value of the total supply current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_tx; /*!< Raw measurement value of the transmitter current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_rx; /*!< Raw measurement value of receiver current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_pa; /*!< Raw measurement power amplifier current \note conversion: eng. value = 0.16643964 * raw */
        uint16_t temp_pa; /*!< Raw measurement value of the power amplifier temperature. \note conversion: eng. value = -0.07669 * raw + 195.6037*/
        uint16_t temp_board; /*!< Raw measurement of board temperature \note conversion: eng. value = -0.07669 * raw + 195.6037*/
    } fields;
} isis_vu_d__get_tx_telemetry__from_t;

/*!
 * Union for storing the parameters received by get_tx_telemetry_last.
 */
typedef union __attribute__((__packed__)) _isis_vu_d__get_tx_telemetry_last__from_t
{
    unsigned char raw[18];
    struct __attribute__ ((__packed__))
    {
        uint16_t reflected_power; /*!< Raw measurement value of the instantaneous RF reflected power at the transmitter port. \note conversion: eng. value = 0.00005887 * raw<sup>2</sup> */
        uint16_t forward_power; /*!< Raw measurement value of the instantaneous RF forward power at the transmitter port. \note conversion: eng. value = 0.00005887 * raw<sup>2</sup> */
        uint16_t voltage; /*!< Raw measurement value of the power bus voltage. \note conversion: eng. value = 0.00488 * raw */
        uint16_t current_total; /*!< Raw measurement value of the total supply current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_tx; /*!< Raw measurement value of the transmitter current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_rx; /*!< Raw measurement value of receiver current. \note conversion: eng. value = 0.16643964 * raw */
        uint16_t current_pa; /*!< Raw measurement power amplifier current \note conversion: eng. value = 0.16643964 * raw */
        uint16_t temp_pa; /*!< Raw measurement value of the power amplifier temperature. \note conversion: eng. value = -0.07669 * raw + 195.6037*/
        uint16_t temp_board; /*!< Raw measurement of board temperature \note conversion: eng. value = -0.07669 * raw + 195.6037*/
    } fields;
} isis_vu_d__get_tx_telemetry_last__from_t;

/*!
 * Structure the parameters sent by send_frame_with_callsigns.
 */
typedef struct __attribute__((__packed__))
_isis_vu_d__send_frame_with_callsigns__to_t
{
    uint8_t from_callsign[7]; /*!< The new 7 characters from callsign. */
    uint8_t to_callsign[7]; /*!< The new 7 characters to callsign. */
    uint8_t* data; /*!< Data to put in the AX.25 message (maximum length: 235 elements) */
} isis_vu_d__send_frame_with_callsigns__to_t;

/*!
 * Structure the parameters sent by set_beacon.
 */
typedef struct __attribute__((__packed__))
_isis_vu_d__set_beacon__to_t
{
    uint16_t interval; /*!< Interval of beacon transmission */
    uint8_t* data; /*!< Data to put in the AX.25 message (maximum length: 235 elements) */
} isis_vu_d__set_beacon__to_t;

/*!
 * Structure the parameters sent by set_beacon_with_callsigns.
 */
typedef struct __attribute__((__packed__))
_isis_vu_d__set_beacon_with_callsigns__to_t
{
    uint16_t interval; /*!< Interval of beacon transmission */
    uint8_t from_callsign[7]; /*!< The new 7 characters from callsign. */
    uint8_t to_callsign[7]; /*!< The new 7 characters to callsign. */
    uint8_t* data; /*!< Data to put in the AX.25 message (maximum length: 235 elements) */
} isis_vu_d__set_beacon_with_callsigns__to_t;

/*!
 * Union for storing the parameters sent by set_callsign_from.
 */
typedef union __attribute__((__packed__)) _isis_vu_d__set_callsign_from__to_t
{
    unsigned char raw[7];
    struct __attribute__ ((__packed__))
    {
        char ascii[6]; /*!< AX.25 TO callsign to be used for AX.25 frames */
        uint8_t number; /*!<  */
    } fields;
} isis_vu_d__set_callsign_from__to_t;

/*!
 * Union for storing the parameters sent by set_callsign_to.
 */
typedef union __attribute__((__packed__)) _isis_vu_d__set_callsign_to__to_t
{
    unsigned char raw[7];
    struct __attribute__ ((__packed__))
    {
        char ascii[6]; /*!< AX.25 TO callsign to be used for AX.25 frames */
        uint8_t number; /*!<  */
    } fields;
} isis_vu_d__set_callsign_to__to_t;

/*!
 * Union for storing the parameters received by state.
 */
typedef union __attribute__((__packed__)) _isis_vu_d__state__from_t
{
    unsigned char raw[1];
    struct __attribute__ ((__packed__))
    {
        isis_vu_d__onoff_t idle : 1; /*!< Transmitter idle state */
        isis_vu_d__onoff_t beacon : 1; /*!< Beacon active */
        isis_vu_d__bitrate_tlm_t bitrate : 2; /*!< Transmission bitrate. */
    } fields;
} isis_vu_d__state__from_t;

#ifdef __cplusplus
}
#endif

#endif /* ISIS_VU_D_TYPES_H_ */

