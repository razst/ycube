/*
 * isis_vu_e.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 * Generated using autogen v1.0.3
 *
 * Generated ICD version: 1.0
 * Generated from:
 *  - isis_vu_rx_e.yaml
 *  - isis_vu_tx_e.yaml
 */

#ifndef ISIS_VU_E_H_
#define ISIS_VU_E_H_

#include "isis_vu_e_types.h"
#include <satellite-subsystems/common_types.h>

#ifdef __cplusplus
extern "C"
{
#endif

/*!
 *	Initialize driver for a number of ISIS_VU_E instances. The first instance can then be referenced by using index 0, the second by using index 1, etc.
 *
 *	@param[in] isis_vu_e Pointer to array of ISIS_VU_E instances
 *	@param[in] isis_vu_eCount Number of ISIS_VU_E instances pointed to by isis_vu_e input parameter
 * 	@return Error code as specified in common_types.h
 */
driver_error_t ISIS_VU_E_Init(const ISIS_VU_E_t* isis_vu_e, uint8_t isis_vu_eCount);

/*!
 * Clears any beacon that is currently set in the transceiver.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__clear_beacon(uint8_t index);

/*!
 * Gets the AX.25 FROM callsign in the transmitter.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_callsign_from(uint8_t index, isis_vu_e__get_callsign_from__from_t *response);

/*!
 * Gets the AX.25 TO callsign in the transmitter.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_callsign_to(uint8_t index, isis_vu_e__get_callsign_to__from_t *response);

/*!
 * Get frame from receive buffer
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] data_out Pointer to buffer for the response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_frame(uint8_t index, isis_vu_e__get_frame__from_t *response);

/*!
 * Get frame from receive buffer
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] data_out Pointer to buffer for the response from subsystem
 * @param[in] data_length Number of elements to read for output struct member 'data' in bytes
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_frame_variable(uint8_t index, isis_vu_e__get_frame__from_t *response, size_t data_length);

/*!
 * Retrieves the number of frames that are currently stored in the receiver buffer.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] frame_count_out Number of frames in receive buffer
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_frame_count(uint8_t index, uint16_t *frame_count_out);

/*!
 * Retrieves the length of frames that are currently stored in the receiver buffer.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] p_frame_length_out Pointer to buffer for the response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_frame_count_length(uint8_t index, isis_vu_e__get_frame_count_length__from_t *response);

/*!
 * Retrieves the length of frames that are currently stored in the receiver buffer.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] p_frame_length_out Pointer to buffer for the response from subsystem
 * @param[in] p_frame_length_length Number of elements to read for output struct member 'p_frame_length' in bytes
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_frame_count_length_variable(uint8_t index, isis_vu_e__get_frame_count_length__from_t *response, size_t p_frame_length_length);

/*!
 * Get full frame from receive buffer
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] data_out Pointer to buffer for the response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_full_frame(uint8_t index, isis_vu_e__get_full_frame__from_t *response);

/*!
 * Get full frame from receive buffer
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] data_out Pointer to buffer for the response from subsystem
 * @param[in] data_length Number of elements to read for output struct member 'data' in bytes
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_full_frame_variable(uint8_t index, isis_vu_e__get_full_frame__from_t *response, size_t data_length);

/*!
 * Get receiver frequency
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_rx_freq(uint8_t index, isis_vu_e__get_rx_freq__from_t *response);

/*!
 * Get last reset cause
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] last_reset_cause_out Last reset cause
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_rx_last_reset_cause(uint8_t index, uint8_t *last_reset_cause_out);

/*!
 * Get PLL error
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_rx_pll_error(uint8_t index, isis_vu_e__get_rx_pll_error__from_t *response);

/*!
 * Get firmware information
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_rx_swinfo(uint8_t index, isis_vu_e__get_rx_swinfo__from_t *response);

/*!
 * Measure all telemetry channels
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_rx_telemetry(uint8_t index, isis_vu_e__get_rx_telemetry__from_t *response);

/*!
 * Get transponder input frequency
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_transponder_in_freq(uint8_t index, isis_vu_e__get_transponder_in_freq__from_t *response);

/*!
 * Get transmitter frequency
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] freq_out Current frequency of transmitter in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_tx_freq(uint8_t index, uint32_t *freq_out);

/*!
 * Get last reset cause
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] last_reset_cause_out Last reset cause
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_tx_last_reset_cause(uint8_t index, uint8_t *last_reset_cause_out);

/*!
 * Get PLL error
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_tx_pll_error(uint8_t index, isis_vu_e__get_tx_pll_error__from_t *response);

/*!
 * Get TX RSSI
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] rssi_out TX RSSI
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_tx_rssi(uint8_t index, uint16_t *rssi_out);

/*!
 * Get firmware information
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_tx_swinfo(uint8_t index, isis_vu_e__get_tx_swinfo__from_t *response);

/*!
 * Measure all the telemetry channels
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_tx_telemetry(uint8_t index, isis_vu_e__get_tx_telemetry__from_t *response);

/*!
 * Get the stored telemetry channels during the last transmission
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__get_tx_telemetry_last(uint8_t index, isis_vu_e__get_tx_telemetry_last__from_t *response);

/*!
 * Removes the oldest frame from the receive buffer. This is the same frame that can be retrieved from the receiver buffer command. If there are 0 frames in the receive buffer this command has no effect.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__remove_frame(uint8_t index);

/*!
 * Removes all frames from the receive buffer. If there are 0 frames in the receive buffer this command has no effect.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__remove_frame_all(uint8_t index);

/*!
 * Power cycles the full board (transmitter and receiver will be both reset).
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__reset_hw_rx(uint8_t index);

/*!
 * Power cycles the full board (transmitter and receiver will be both reset).
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__reset_hw_tx(uint8_t index);

/*!
 * Performs a reset of the I2C watchdog without performing any other operation.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__reset_wdg_rx(uint8_t index);

/*!
 * Performs a reset of the I2C watchdog without performing any other operation.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__reset_wdg_tx(uint8_t index);

/*!
 * Report receiver uptime
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] uptime_out Reports the amount of time the transmitter MCU has been active since the last reset, also known as up- time.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__rx_uptime(uint8_t index, uint32_t *uptime_out);

/*!
 * Transmit an AX.25 frame with default callsigns or HDLC frame.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] data_in Data to put in the frame
 * @param[in] data_length Length of data_in parameter in number of elements, maximum value: 235
 * @param[out] slots_available_out Number of the available slots in the transmission buffer of the VU TC after the frame has been added. 0: Full, 255: Was not added
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__send_frame(uint8_t index, const uint8_t* data_in, size_t data_length, uint8_t *slots_available_out);

/*!
 * Transmit an AX.25 frame with override callsigns and specified content.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 235
 * @param[out] slots_available_out Number of the available slots in the transmission buffer of the VU TC after the frame has been added. 0: Full, 255: Was not added
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__send_frame_with_callsigns(uint8_t index, const isis_vu_e__send_frame_with_callsigns__to_t *params, size_t data_length, uint8_t *slots_available_out);

/*!
 * Set the parameters for the AX25 Beacon with default callsigns or HDLC Beacon.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 235
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_beacon(uint8_t index, const isis_vu_e__set_beacon__to_t *params, size_t data_length);

/*!
 * Set the parameters for the AX25 Beacon with override callsigns.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @param[in] data_length Length of input struct member 'data' in number of elements, maximum value: 235
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_beacon_with_callsigns(uint8_t index, const isis_vu_e__set_beacon_with_callsigns__to_t *params, size_t data_length);

/*!
 * Set AX.25 transmission bitrate
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] bitrate_in Transmission bitrate.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_bitrate(uint8_t index, isis_vu_e__bitrate_t bitrate_in);

/*!
 * Sets the default AX.25 FROM callsign in the transmitter.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_callsign_from(uint8_t index, const isis_vu_e__set_callsign_from__to_t *params);

/*!
 * Sets the default AX.25 TO callsign in the transmitter.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] params Struct with parameters for subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_callsign_to(uint8_t index, const isis_vu_e__set_callsign_to__to_t *params);

/*!
 * Sets the state of the transmitter when it is idle.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] idle_state_in The idle state of the transmitter to be set.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_idle_state(uint8_t index, isis_vu_e__onoff_t idle_state_in);

/*!
 * Set receiver frequency
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] freq_in Desired frequency for receiver in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_rx_freq(uint8_t index, uint32_t freq_in);

/*!
 * Set transponder input frequency
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] freq_in Desired transponder input frequency in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_transponder_in_freq(uint8_t index, uint32_t freq_in);

/*!
 * Set transmitter frequency
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] freq_in Desired frequency for transmitter in kHz
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_tx_freq(uint8_t index, uint32_t freq_in);

/*!
 * Set transmitter mode
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] mode_in Transmitter mode (1: nominal, 2: transponder)
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_tx_mode(uint8_t index, uint8_t mode_in);

/*!
 * PLL power out
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] reg_value_in Configuration register value for power output of the synthesizer
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_tx_pll_powerout(uint8_t index, uint16_t reg_value_in);

/*!
 * Set THR RSSI
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[in] mode_in THR RSSI
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__set_tx_thr_rssi(uint8_t index, uint16_t mode_in);

/*!
 * Reports general information about the state the transmitter is currently in.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] response Struct with response from subsystem
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__state(uint8_t index, isis_vu_e__state__from_t *response);

/*!
 * Clear PA overtemperature flag, set to zero
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__tx_clear_pa_overtemp_flag(uint8_t index);

/*!
 * Get PA overtemperature flag
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] state_out PA overtemperature flag (0: no issue, 1: overtemperature reached)
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__tx_get_pa_overtemp_flag(uint8_t index, uint8_t *state_out);

/*!
 * Reports the amount of time the transmitter MCU has been active since the last reset, also known as up- time.
 *
 * @param[in] index Index of ISIS_VU_E in list provided during driver initialization
 * @param[out] uptime_out Seconds uptime value.
 * @return Error code as specified in common_types.h
 */
driver_error_t isis_vu_e__tx_uptime(uint8_t index, uint32_t *uptime_out);

#ifdef __cplusplus
}
#endif

#endif /* ISIS_VU_E_H_ */

